"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@neynar";
exports.ids = ["vendor-chunks/@neynar"];
exports.modules = {

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/action-api.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/action-api.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ActionApi = exports.ActionApiFactory = exports.ActionApiFp = exports.ActionApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * ActionApi - axios parameter creator\n * @export\n */ const ActionApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\\'s Farcaster signer.\n         * @summary User actions across apps\n         * @param {FarcasterActionReqBody} farcasterActionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)\n         *\n         */ publishFarcasterAction: async (farcasterActionReqBody, options = {})=>{\n            // verify required parameter 'farcasterActionReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishFarcasterAction\", \"farcasterActionReqBody\", farcasterActionReqBody);\n            const localVarPath = `/farcaster/action`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(farcasterActionReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.ActionApiAxiosParamCreator = ActionApiAxiosParamCreator;\n/**\n * ActionApi - functional programming interface\n * @export\n */ const ActionApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.ActionApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\\'s Farcaster signer.\n         * @summary User actions across apps\n         * @param {FarcasterActionReqBody} farcasterActionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)\n         *\n         */ async publishFarcasterAction (farcasterActionReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishFarcasterAction(farcasterActionReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ActionApi.publishFarcasterAction\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.ActionApiFp = ActionApiFp;\n/**\n * ActionApi - factory interface\n * @export\n */ const ActionApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.ActionApiFp)(configuration);\n    return {\n        /**\n         * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\\'s Farcaster signer.\n         * @summary User actions across apps\n         * @param {ActionApiPublishFarcasterActionRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)\n         *\n         */ publishFarcasterAction (requestParameters, options) {\n            return localVarFp.publishFarcasterAction(requestParameters.farcasterActionReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.ActionApiFactory = ActionApiFactory;\n/**\n * ActionApi - object-oriented interface\n * @export\n * @class ActionApi\n * @extends {BaseAPI}\n */ class ActionApi extends base_1.BaseAPI {\n    /**\n     * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\\'s Farcaster signer.\n     * @summary User actions across apps\n     * @param {ActionApiPublishFarcasterActionRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ActionApi\n     * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)\n     *\n     */ publishFarcasterAction(requestParameters, options) {\n        return (0, exports.ActionApiFp)(this.configuration).publishFarcasterAction(requestParameters.farcasterActionReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.ActionApi = ActionApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2FwaS9hcGlzL2FjdGlvbi1hcGkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixrQkFBa0IsR0FDbEIsa0JBQWtCLEdBQ2xCOzs7Ozs7Ozs7O0NBVUMsR0FDRCxJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSx3QkFBd0IsR0FBR0EsbUJBQW1CLEdBQUdBLGtDQUFrQyxHQUFHLEtBQUs7QUFDL0csTUFBTU0sVUFBVVgsZ0JBQWdCWSxtQkFBT0EsQ0FBQyw2REFBTztBQUMvQyx5REFBeUQ7QUFDekQsYUFBYTtBQUNiLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLDhFQUFXO0FBQ3BDLGFBQWE7QUFDYixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQywwRUFBUztBQUNoQzs7O0NBR0MsR0FDRCxNQUFNRiw2QkFBNkIsU0FBVUssYUFBYTtJQUN0RCxPQUFPO1FBQ0g7Ozs7Ozs7Ozs7U0FVQyxHQUNEQyx3QkFBd0IsT0FBT0Msd0JBQXdCQyxVQUFVLENBQUMsQ0FBQztZQUMvRCw4RUFBOEU7WUFDN0UsSUFBR0wsU0FBU00saUJBQWlCLEVBQUUsMEJBQTBCLDBCQUEwQkY7WUFDcEYsTUFBTUcsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1lBQ3hDLG9GQUFvRjtZQUNwRixNQUFNQyxpQkFBaUIsSUFBSUMsSUFBSUYsY0FBY1AsU0FBU1UsY0FBYztZQUNwRSxJQUFJQztZQUNKLElBQUlULGVBQWU7Z0JBQ2ZTLGNBQWNULGNBQWNTLFdBQVc7WUFDM0M7WUFDQSxNQUFNQyx5QkFBeUJ0QixPQUFPdUIsTUFBTSxDQUFDdkIsT0FBT3VCLE1BQU0sQ0FBQztnQkFBRUMsUUFBUTtZQUFPLEdBQUdILGNBQWNOO1lBQzdGLE1BQU1VLDBCQUEwQixDQUFDO1lBQ2pDLE1BQU1DLHlCQUF5QixDQUFDO1lBQ2hDLHFDQUFxQztZQUNyQyxNQUFNLENBQUMsR0FBR2hCLFNBQVNpQixpQkFBaUIsRUFBRUYseUJBQXlCLGFBQWFiO1lBQzVFYSx1QkFBdUIsQ0FBQyxlQUFlLEdBQUc7WUFDekMsSUFBR2YsU0FBU2tCLGVBQWUsRUFBRVYsZ0JBQWdCUTtZQUM5QyxJQUFJRyx5QkFBeUJSLGVBQWVBLFlBQVlTLE9BQU8sR0FBR1QsWUFBWVMsT0FBTyxHQUFHLENBQUM7WUFDekZSLHVCQUF1QlEsT0FBTyxHQUFHOUIsT0FBT3VCLE1BQU0sQ0FBQ3ZCLE9BQU91QixNQUFNLENBQUN2QixPQUFPdUIsTUFBTSxDQUFDLENBQUMsR0FBR0UsMEJBQTBCSSx5QkFBeUJkLFFBQVFlLE9BQU87WUFDakpSLHVCQUF1QlMsSUFBSSxHQUFHLENBQUMsR0FBR3JCLFNBQVNzQixxQkFBcUIsRUFBRWxCLHdCQUF3QlEsd0JBQXdCVjtZQUNsSCxPQUFPO2dCQUNIcUIsS0FBSyxDQUFDLEdBQUd2QixTQUFTd0IsWUFBWSxFQUFFaEI7Z0JBQ2hDSCxTQUFTTztZQUNiO1FBQ0o7SUFDSjtBQUNKO0FBQ0FwQixrQ0FBa0MsR0FBR0s7QUFDckM7OztDQUdDLEdBQ0QsTUFBTUQsY0FBYyxTQUFVTSxhQUFhO0lBQ3ZDLE1BQU11Qiw0QkFBNEIsQ0FBQyxHQUFHakMsUUFBUUssMEJBQTBCLEVBQUVLO0lBQzFFLE9BQU87UUFDSDs7Ozs7Ozs7OztTQVVDLEdBQ0QsTUFBTUMsd0JBQXVCQyxzQkFBc0IsRUFBRUMsT0FBTztZQUN4RCxJQUFJcUIsSUFBSUMsSUFBSUM7WUFDWixNQUFNQyxvQkFBb0IsTUFBTUosMEJBQTBCdEIsc0JBQXNCLENBQUNDLHdCQUF3QkM7WUFDekcsTUFBTXlCLCtCQUErQixDQUFDSixLQUFLeEIsa0JBQWtCLFFBQVFBLGtCQUFrQixLQUFLLElBQUksS0FBSyxJQUFJQSxjQUFjNkIsV0FBVyxNQUFNLFFBQVFMLE9BQU8sS0FBSyxJQUFJQSxLQUFLO1lBQ3JLLE1BQU1NLGtDQUFrQyxDQUFDSixLQUFLLENBQUNELEtBQUsxQixPQUFPZ0Msa0JBQWtCLENBQUMsbUNBQW1DLE1BQU0sUUFBUU4sT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFLENBQUNHLDZCQUE2QixNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0wsR0FBRztZQUNyTyxPQUFPLENBQUNXLE9BQU9DLFdBQWEsQ0FBQyxHQUFHbkMsU0FBU29DLHFCQUFxQixFQUFFUCxtQkFBbUIvQixRQUFRdUMsT0FBTyxFQUFFcEMsT0FBT3FDLFNBQVMsRUFBRXBDLGVBQWVnQyxPQUFPRixtQ0FBbUNHO1FBQ25MO0lBQ0o7QUFDSjtBQUNBM0MsbUJBQW1CLEdBQUdJO0FBQ3RCOzs7Q0FHQyxHQUNELE1BQU1ELG1CQUFtQixTQUFVTyxhQUFhLEVBQUVpQyxRQUFRLEVBQUVELEtBQUs7SUFDN0QsTUFBTUssYUFBYSxDQUFDLEdBQUcvQyxRQUFRSSxXQUFXLEVBQUVNO0lBQzVDLE9BQU87UUFDSDs7Ozs7Ozs7OztTQVVDLEdBQ0RDLHdCQUF1QnFDLGlCQUFpQixFQUFFbkMsT0FBTztZQUM3QyxPQUFPa0MsV0FBV3BDLHNCQUFzQixDQUFDcUMsa0JBQWtCcEMsc0JBQXNCLEVBQUVDLFNBQVNvQyxJQUFJLENBQUMsQ0FBQ0MsVUFBWUEsUUFBUVIsT0FBT0M7UUFDakk7SUFDSjtBQUNKO0FBQ0EzQyx3QkFBd0IsR0FBR0c7QUFDM0I7Ozs7O0NBS0MsR0FDRCxNQUFNRCxrQkFBa0JPLE9BQU8wQyxPQUFPO0lBQ2xDOzs7Ozs7Ozs7OztLQVdDLEdBQ0R4Qyx1QkFBdUJxQyxpQkFBaUIsRUFBRW5DLE9BQU8sRUFBRTtRQUMvQyxPQUFPLENBQUMsR0FBR2IsUUFBUUksV0FBVyxFQUFFLElBQUksQ0FBQ00sYUFBYSxFQUFFQyxzQkFBc0IsQ0FBQ3FDLGtCQUFrQnBDLHNCQUFzQixFQUFFQyxTQUFTb0MsSUFBSSxDQUFDLENBQUNDLFVBQVlBLFFBQVEsSUFBSSxDQUFDUixLQUFLLEVBQUUsSUFBSSxDQUFDQyxRQUFRO0lBQ3JMO0FBQ0o7QUFDQTNDLGlCQUFpQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZhcmNhc3RlcnN0YXRzLy4vbm9kZV9tb2R1bGVzL0BuZXluYXIvbm9kZWpzLXNkay9idWlsZC9hcGkvYXBpcy9hY3Rpb24tYXBpLmpzP2U3ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogRmFyY2FzdGVyIEFQSSBWMlxuICogVGhlIEZhcmNhc3RlciBBUEkgYWxsb3dzIHlvdSB0byBpbnRlcmFjdCB3aXRoIHRoZSBGYXJjYXN0ZXIgcHJvdG9jb2wuIFNlZSB0aGUgW05leW5hciBkb2NzXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDIuNDQuMFxuICogQ29udGFjdDogdGVhbUBuZXluYXIuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFjdGlvbkFwaSA9IGV4cG9ydHMuQWN0aW9uQXBpRmFjdG9yeSA9IGV4cG9ydHMuQWN0aW9uQXBpRnAgPSBleHBvcnRzLkFjdGlvbkFwaUF4aW9zUGFyYW1DcmVhdG9yID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuLy8gU29tZSBpbXBvcnRzIG5vdCB1c2VkIGRlcGVuZGluZyBvbiB0ZW1wbGF0ZSBjb25kaXRpb25zXG4vLyBAdHMtaWdub3JlXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBiYXNlXzEgPSByZXF1aXJlKFwiLi4vYmFzZVwiKTtcbi8qKlxuICogQWN0aW9uQXBpIC0gYXhpb3MgcGFyYW1ldGVyIGNyZWF0b3JcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgQWN0aW9uQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWN1cmVseSBjb21tdW5pY2F0ZSBhbmQgcGVyZm9ybSBhY3Rpb25zIG9uIGJlaGFsZiBvZiB1c2VycyBhY3Jvc3MgZGlmZmVyZW50IGFwcHMuIEl0IGVuYWJsZXMgYW4gYXBwIHRvIHNlbmQgZGF0YSBvciB0cmlnZ2VyIGFjdGlvbnMgaW4gYW5vdGhlciBhcHAgb24gYmVoYWxmIG9mIGEgbXV0dWFsIHVzZXIgYnkgc2lnbmluZyBtZXNzYWdlcyB1c2luZyB0aGUgdXNlclxcJ3MgRmFyY2FzdGVyIHNpZ25lci5cbiAgICAgICAgICogQHN1bW1hcnkgVXNlciBhY3Rpb25zIGFjcm9zcyBhcHBzXG4gICAgICAgICAqIEBwYXJhbSB7RmFyY2FzdGVyQWN0aW9uUmVxQm9keX0gZmFyY2FzdGVyQWN0aW9uUmVxQm9keVxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7IFtrZXk6IHN0cmluZ106IGFueTsgfT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYHsgW2tleTogc3RyaW5nXTogYW55OyB9YCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL2RvY3MvZmFyY2FzdGVyLWFjdGlvbnMtc3BlYylcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHB1Ymxpc2hGYXJjYXN0ZXJBY3Rpb246IGFzeW5jIChmYXJjYXN0ZXJBY3Rpb25SZXFCb2R5LCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZhcmNhc3RlckFjdGlvblJlcUJvZHknIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKSgncHVibGlzaEZhcmNhc3RlckFjdGlvbicsICdmYXJjYXN0ZXJBY3Rpb25SZXFCb2R5JywgZmFyY2FzdGVyQWN0aW9uUmVxQm9keSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2ZhcmNhc3Rlci9hY3Rpb25gO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEFwaUtleUF1dGggcmVxdWlyZWRcbiAgICAgICAgICAgIGF3YWl0ICgwLCBjb21tb25fMS5zZXRBcGlLZXlUb09iamVjdCkobG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIFwieC1hcGkta2V5XCIsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcykobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAoMCwgY29tbW9uXzEuc2VyaWFsaXplRGF0YUlmTmVlZGVkKShmYXJjYXN0ZXJBY3Rpb25SZXFCb2R5LCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiAoMCwgY29tbW9uXzEudG9QYXRoU3RyaW5nKShsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnRzLkFjdGlvbkFwaUF4aW9zUGFyYW1DcmVhdG9yID0gQWN0aW9uQXBpQXhpb3NQYXJhbUNyZWF0b3I7XG4vKipcbiAqIEFjdGlvbkFwaSAtIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmNvbnN0IEFjdGlvbkFwaUZwID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zdCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yID0gKDAsIGV4cG9ydHMuQWN0aW9uQXBpQXhpb3NQYXJhbUNyZWF0b3IpKGNvbmZpZ3VyYXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWN1cmVseSBjb21tdW5pY2F0ZSBhbmQgcGVyZm9ybSBhY3Rpb25zIG9uIGJlaGFsZiBvZiB1c2VycyBhY3Jvc3MgZGlmZmVyZW50IGFwcHMuIEl0IGVuYWJsZXMgYW4gYXBwIHRvIHNlbmQgZGF0YSBvciB0cmlnZ2VyIGFjdGlvbnMgaW4gYW5vdGhlciBhcHAgb24gYmVoYWxmIG9mIGEgbXV0dWFsIHVzZXIgYnkgc2lnbmluZyBtZXNzYWdlcyB1c2luZyB0aGUgdXNlclxcJ3MgRmFyY2FzdGVyIHNpZ25lci5cbiAgICAgICAgICogQHN1bW1hcnkgVXNlciBhY3Rpb25zIGFjcm9zcyBhcHBzXG4gICAgICAgICAqIEBwYXJhbSB7RmFyY2FzdGVyQWN0aW9uUmVxQm9keX0gZmFyY2FzdGVyQWN0aW9uUmVxQm9keVxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7IFtrZXk6IHN0cmluZ106IGFueTsgfT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYHsgW2tleTogc3RyaW5nXTogYW55OyB9YCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL2RvY3MvZmFyY2FzdGVyLWFjdGlvbnMtc3BlYylcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGFzeW5jIHB1Ymxpc2hGYXJjYXN0ZXJBY3Rpb24oZmFyY2FzdGVyQWN0aW9uUmVxQm9keSwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IGF3YWl0IGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IucHVibGlzaEZhcmNhc3RlckFjdGlvbihmYXJjYXN0ZXJBY3Rpb25SZXFCb2R5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyT3BlcmF0aW9uU2VydmVySW5kZXggPSAoX2EgPSBjb25maWd1cmF0aW9uID09PSBudWxsIHx8IGNvbmZpZ3VyYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZ3VyYXRpb24uc2VydmVySW5kZXgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoID0gKF9jID0gKF9iID0gYmFzZV8xLm9wZXJhdGlvblNlcnZlck1hcFsnQWN0aW9uQXBpLnB1Ymxpc2hGYXJjYXN0ZXJBY3Rpb24nXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW2xvY2FsVmFyT3BlcmF0aW9uU2VydmVySW5kZXhdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudXJsO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvcywgYmFzZVBhdGgpID0+ICgwLCBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24pKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pKGF4aW9zLCBsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoIHx8IGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydHMuQWN0aW9uQXBpRnAgPSBBY3Rpb25BcGlGcDtcbi8qKlxuICogQWN0aW9uQXBpIC0gZmFjdG9yeSBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgQWN0aW9uQXBpRmFjdG9yeSA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uLCBiYXNlUGF0aCwgYXhpb3MpIHtcbiAgICBjb25zdCBsb2NhbFZhckZwID0gKDAsIGV4cG9ydHMuQWN0aW9uQXBpRnApKGNvbmZpZ3VyYXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWN1cmVseSBjb21tdW5pY2F0ZSBhbmQgcGVyZm9ybSBhY3Rpb25zIG9uIGJlaGFsZiBvZiB1c2VycyBhY3Jvc3MgZGlmZmVyZW50IGFwcHMuIEl0IGVuYWJsZXMgYW4gYXBwIHRvIHNlbmQgZGF0YSBvciB0cmlnZ2VyIGFjdGlvbnMgaW4gYW5vdGhlciBhcHAgb24gYmVoYWxmIG9mIGEgbXV0dWFsIHVzZXIgYnkgc2lnbmluZyBtZXNzYWdlcyB1c2luZyB0aGUgdXNlclxcJ3MgRmFyY2FzdGVyIHNpZ25lci5cbiAgICAgICAgICogQHN1bW1hcnkgVXNlciBhY3Rpb25zIGFjcm9zcyBhcHBzXG4gICAgICAgICAqIEBwYXJhbSB7QWN0aW9uQXBpUHVibGlzaEZhcmNhc3RlckFjdGlvblJlcXVlc3R9IHJlcXVlc3RQYXJhbWV0ZXJzIFJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8eyBba2V5OiBzdHJpbmddOiBhbnk7IH0+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIGB7IFtrZXk6IHN0cmluZ106IGFueTsgfWAgb2JqZWN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCByZWZlciB0byB0aGUgW0FQSSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9kb2NzL2ZhcmNhc3Rlci1hY3Rpb25zLXNwZWMpXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaXNoRmFyY2FzdGVyQWN0aW9uKHJlcXVlc3RQYXJhbWV0ZXJzLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5wdWJsaXNoRmFyY2FzdGVyQWN0aW9uKHJlcXVlc3RQYXJhbWV0ZXJzLmZhcmNhc3RlckFjdGlvblJlcUJvZHksIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnRzLkFjdGlvbkFwaUZhY3RvcnkgPSBBY3Rpb25BcGlGYWN0b3J5O1xuLyoqXG4gKiBBY3Rpb25BcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQWN0aW9uQXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuY2xhc3MgQWN0aW9uQXBpIGV4dGVuZHMgYmFzZV8xLkJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqIFNlY3VyZWx5IGNvbW11bmljYXRlIGFuZCBwZXJmb3JtIGFjdGlvbnMgb24gYmVoYWxmIG9mIHVzZXJzIGFjcm9zcyBkaWZmZXJlbnQgYXBwcy4gSXQgZW5hYmxlcyBhbiBhcHAgdG8gc2VuZCBkYXRhIG9yIHRyaWdnZXIgYWN0aW9ucyBpbiBhbm90aGVyIGFwcCBvbiBiZWhhbGYgb2YgYSBtdXR1YWwgdXNlciBieSBzaWduaW5nIG1lc3NhZ2VzIHVzaW5nIHRoZSB1c2VyXFwncyBGYXJjYXN0ZXIgc2lnbmVyLlxuICAgICAqIEBzdW1tYXJ5IFVzZXIgYWN0aW9ucyBhY3Jvc3MgYXBwc1xuICAgICAqIEBwYXJhbSB7QWN0aW9uQXBpUHVibGlzaEZhcmNhc3RlckFjdGlvblJlcXVlc3R9IHJlcXVlc3RQYXJhbWV0ZXJzIFJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFjdGlvbkFwaVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHsgW2tleTogc3RyaW5nXTogYW55OyB9Pn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBgeyBba2V5OiBzdHJpbmddOiBhbnk7IH1gIG9iamVjdFxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL2RvY3MvZmFyY2FzdGVyLWFjdGlvbnMtc3BlYylcbiAgICAgKlxuICAgICAqL1xuICAgIHB1Ymxpc2hGYXJjYXN0ZXJBY3Rpb24ocmVxdWVzdFBhcmFtZXRlcnMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLkFjdGlvbkFwaUZwKSh0aGlzLmNvbmZpZ3VyYXRpb24pLnB1Ymxpc2hGYXJjYXN0ZXJBY3Rpb24ocmVxdWVzdFBhcmFtZXRlcnMuZmFyY2FzdGVyQWN0aW9uUmVxQm9keSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5BY3Rpb25BcGkgPSBBY3Rpb25BcGk7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQWN0aW9uQXBpIiwiQWN0aW9uQXBpRmFjdG9yeSIsIkFjdGlvbkFwaUZwIiwiQWN0aW9uQXBpQXhpb3NQYXJhbUNyZWF0b3IiLCJheGlvc18xIiwicmVxdWlyZSIsImNvbW1vbl8xIiwiYmFzZV8xIiwiY29uZmlndXJhdGlvbiIsInB1Ymxpc2hGYXJjYXN0ZXJBY3Rpb24iLCJmYXJjYXN0ZXJBY3Rpb25SZXFCb2R5Iiwib3B0aW9ucyIsImFzc2VydFBhcmFtRXhpc3RzIiwibG9jYWxWYXJQYXRoIiwibG9jYWxWYXJVcmxPYmoiLCJVUkwiLCJEVU1NWV9CQVNFX1VSTCIsImJhc2VPcHRpb25zIiwibG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyIsImFzc2lnbiIsIm1ldGhvZCIsImxvY2FsVmFySGVhZGVyUGFyYW1ldGVyIiwibG9jYWxWYXJRdWVyeVBhcmFtZXRlciIsInNldEFwaUtleVRvT2JqZWN0Iiwic2V0U2VhcmNoUGFyYW1zIiwiaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyIsImhlYWRlcnMiLCJkYXRhIiwic2VyaWFsaXplRGF0YUlmTmVlZGVkIiwidXJsIiwidG9QYXRoU3RyaW5nIiwibG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvciIsIl9hIiwiX2IiLCJfYyIsImxvY2FsVmFyQXhpb3NBcmdzIiwibG9jYWxWYXJPcGVyYXRpb25TZXJ2ZXJJbmRleCIsInNlcnZlckluZGV4IiwibG9jYWxWYXJPcGVyYXRpb25TZXJ2ZXJCYXNlUGF0aCIsIm9wZXJhdGlvblNlcnZlck1hcCIsImF4aW9zIiwiYmFzZVBhdGgiLCJjcmVhdGVSZXF1ZXN0RnVuY3Rpb24iLCJkZWZhdWx0IiwiQkFTRV9QQVRIIiwibG9jYWxWYXJGcCIsInJlcXVlc3RQYXJhbWV0ZXJzIiwidGhlbiIsInJlcXVlc3QiLCJCYXNlQVBJIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/action-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/agents-api.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/agents-api.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AgentsApi = exports.AgentsApiFactory = exports.AgentsApiFp = exports.AgentsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * AgentsApi - axios parameter creator\n * @export\n */ const AgentsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Creates a new transaction pay mini app that can be used to collect payments through a mini app\n         * @summary Create transaction pay mini app\n         * @param {FramePayTransactionRequestBody} framePayTransactionRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object\n         *\n         */ createTransactionPayFrame: async (framePayTransactionRequestBody, options = {})=>{\n            // verify required parameter 'framePayTransactionRequestBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"createTransactionPayFrame\", \"framePayTransactionRequestBody\", framePayTransactionRequestBody);\n            const localVarPath = `/farcaster/frame/transaction/pay`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(framePayTransactionRequestBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of interactions between two users\n         * @summary User interactions\n         * @param {string} fids Comma separated list of two FIDs\n         * @param {Array<NotificationType>} [type] Comma seperated list of Interaction type to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserInteractions200Response>} A promise that resolves to a `FetchUserInteractions200Response` object\n         *\n         */ fetchUserInteractions: async (fids, type, options = {})=>{\n            // verify required parameter 'fids' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserInteractions\", \"fids\", fids);\n            const localVarPath = `/farcaster/user/interactions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fids !== undefined) {\n                localVarQueryParameter[\"fids\"] = fids;\n            }\n            if (type) {\n                localVarQueryParameter[\"type\"] = type.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.\n         * @summary Cast conversation summary\n         * @param {string} identifier Cast identifier (Its either a url or a hash)\n         * @param {number} [limit] Number of casts to consider in a summary up to a point of target cast  (Default: 20, Maximum: 50)\n         * @param {string} [prompt] Additional prompt used to generate a summary\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ConversationSummary>} A promise that resolves to a `ConversationSummary` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation-summary)\n         *\n         */ lookupCastConversationSummary: async (identifier, limit, prompt, options = {})=>{\n            // verify required parameter 'identifier' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupCastConversationSummary\", \"identifier\", identifier);\n            const localVarPath = `/farcaster/cast/conversation/summary`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (identifier !== undefined) {\n                localVarQueryParameter[\"identifier\"] = identifier;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (prompt !== undefined) {\n                localVarQueryParameter[\"prompt\"] = prompt;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.AgentsApiAxiosParamCreator = AgentsApiAxiosParamCreator;\n/**\n * AgentsApi - functional programming interface\n * @export\n */ const AgentsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.AgentsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Creates a new transaction pay mini app that can be used to collect payments through a mini app\n         * @summary Create transaction pay mini app\n         * @param {FramePayTransactionRequestBody} framePayTransactionRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object\n         *\n         */ async createTransactionPayFrame (framePayTransactionRequestBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransactionPayFrame(framePayTransactionRequestBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"AgentsApi.createTransactionPayFrame\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of interactions between two users\n         * @summary User interactions\n         * @param {string} fids Comma separated list of two FIDs\n         * @param {Array<NotificationType>} [type] Comma seperated list of Interaction type to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserInteractions200Response>} A promise that resolves to a `FetchUserInteractions200Response` object\n         *\n         */ async fetchUserInteractions (fids, type, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserInteractions(fids, type, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"AgentsApi.fetchUserInteractions\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.\n         * @summary Cast conversation summary\n         * @param {string} identifier Cast identifier (Its either a url or a hash)\n         * @param {number} [limit] Number of casts to consider in a summary up to a point of target cast  (Default: 20, Maximum: 50)\n         * @param {string} [prompt] Additional prompt used to generate a summary\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ConversationSummary>} A promise that resolves to a `ConversationSummary` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation-summary)\n         *\n         */ async lookupCastConversationSummary (identifier, limit, prompt, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupCastConversationSummary(identifier, limit, prompt, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"AgentsApi.lookupCastConversationSummary\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.AgentsApiFp = AgentsApiFp;\n/**\n * AgentsApi - factory interface\n * @export\n */ const AgentsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.AgentsApiFp)(configuration);\n    return {\n        /**\n         * Creates a new transaction pay mini app that can be used to collect payments through a mini app\n         * @summary Create transaction pay mini app\n         * @param {AgentsApiCreateTransactionPayFrameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object\n         *\n         */ createTransactionPayFrame (requestParameters, options) {\n            return localVarFp.createTransactionPayFrame(requestParameters.framePayTransactionRequestBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of interactions between two users\n         * @summary User interactions\n         * @param {AgentsApiFetchUserInteractionsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserInteractions200Response>} A promise that resolves to a `FetchUserInteractions200Response` object\n         *\n         */ fetchUserInteractions (requestParameters, options) {\n            return localVarFp.fetchUserInteractions(requestParameters.fids, requestParameters.type, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.\n         * @summary Cast conversation summary\n         * @param {AgentsApiLookupCastConversationSummaryRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ConversationSummary>} A promise that resolves to a `ConversationSummary` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation-summary)\n         *\n         */ lookupCastConversationSummary (requestParameters, options) {\n            return localVarFp.lookupCastConversationSummary(requestParameters.identifier, requestParameters.limit, requestParameters.prompt, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.AgentsApiFactory = AgentsApiFactory;\n/**\n * AgentsApi - object-oriented interface\n * @export\n * @class AgentsApi\n * @extends {BaseAPI}\n */ class AgentsApi extends base_1.BaseAPI {\n    /**\n     * Creates a new transaction pay mini app that can be used to collect payments through a mini app\n     * @summary Create transaction pay mini app\n     * @param {AgentsApiCreateTransactionPayFrameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AgentsApi\n     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object\n     *\n     */ createTransactionPayFrame(requestParameters, options) {\n        return (0, exports.AgentsApiFp)(this.configuration).createTransactionPayFrame(requestParameters.framePayTransactionRequestBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of interactions between two users\n     * @summary User interactions\n     * @param {AgentsApiFetchUserInteractionsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AgentsApi\n     * @returns {Promise<FetchUserInteractions200Response>} A promise that resolves to a `FetchUserInteractions200Response` object\n     *\n     */ fetchUserInteractions(requestParameters, options) {\n        return (0, exports.AgentsApiFp)(this.configuration).fetchUserInteractions(requestParameters.fids, requestParameters.type, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.\n     * @summary Cast conversation summary\n     * @param {AgentsApiLookupCastConversationSummaryRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AgentsApi\n     * @returns {Promise<ConversationSummary>} A promise that resolves to a `ConversationSummary` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation-summary)\n     *\n     */ lookupCastConversationSummary(requestParameters, options) {\n        return (0, exports.AgentsApiFp)(this.configuration).lookupCastConversationSummary(requestParameters.identifier, requestParameters.limit, requestParameters.prompt, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.AgentsApi = AgentsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/agents-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/ban-api.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/ban-api.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BanApi = exports.BanApiFactory = exports.BanApiFp = exports.BanApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * BanApi - axios parameter creator\n * @export\n */ const BanApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Deletes a list of FIDs from the app associated with your API key.\n         * @summary Unban FIDs from app\n         * @param {BanReqBody} banReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)\n         *\n         */ deleteBans: async (banReqBody, options = {})=>{\n            // verify required parameter 'banReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"deleteBans\", \"banReqBody\", banReqBody);\n            const localVarPath = `/farcaster/ban`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(banReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches all FIDs that your app has banned.\n         * @summary Banned FIDs of app\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)\n         *\n         */ fetchBanList: async (limit, cursor, xNeynarExperimental, options = {})=>{\n            const localVarPath = `/farcaster/ban/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.\n         * @summary Ban FIDs from app\n         * @param {BanReqBody} banReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)\n         *\n         */ publishBans: async (banReqBody, options = {})=>{\n            // verify required parameter 'banReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishBans\", \"banReqBody\", banReqBody);\n            const localVarPath = `/farcaster/ban`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(banReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.BanApiAxiosParamCreator = BanApiAxiosParamCreator;\n/**\n * BanApi - functional programming interface\n * @export\n */ const BanApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.BanApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Deletes a list of FIDs from the app associated with your API key.\n         * @summary Unban FIDs from app\n         * @param {BanReqBody} banReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)\n         *\n         */ async deleteBans (banReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBans(banReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"BanApi.deleteBans\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches all FIDs that your app has banned.\n         * @summary Banned FIDs of app\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)\n         *\n         */ async fetchBanList (limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBanList(limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"BanApi.fetchBanList\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.\n         * @summary Ban FIDs from app\n         * @param {BanReqBody} banReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)\n         *\n         */ async publishBans (banReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishBans(banReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"BanApi.publishBans\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.BanApiFp = BanApiFp;\n/**\n * BanApi - factory interface\n * @export\n */ const BanApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.BanApiFp)(configuration);\n    return {\n        /**\n         * Deletes a list of FIDs from the app associated with your API key.\n         * @summary Unban FIDs from app\n         * @param {BanApiDeleteBansRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)\n         *\n         */ deleteBans (requestParameters, options) {\n            return localVarFp.deleteBans(requestParameters.banReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches all FIDs that your app has banned.\n         * @summary Banned FIDs of app\n         * @param {BanApiFetchBanListRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)\n         *\n         */ fetchBanList (requestParameters = {}, options) {\n            return localVarFp.fetchBanList(requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.\n         * @summary Ban FIDs from app\n         * @param {BanApiPublishBansRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)\n         *\n         */ publishBans (requestParameters, options) {\n            return localVarFp.publishBans(requestParameters.banReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.BanApiFactory = BanApiFactory;\n/**\n * BanApi - object-oriented interface\n * @export\n * @class BanApi\n * @extends {BaseAPI}\n */ class BanApi extends base_1.BaseAPI {\n    /**\n     * Deletes a list of FIDs from the app associated with your API key.\n     * @summary Unban FIDs from app\n     * @param {BanApiDeleteBansRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BanApi\n     * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)\n     *\n     */ deleteBans(requestParameters, options) {\n        return (0, exports.BanApiFp)(this.configuration).deleteBans(requestParameters.banReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches all FIDs that your app has banned.\n     * @summary Banned FIDs of app\n     * @param {BanApiFetchBanListRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BanApi\n     * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)\n     *\n     */ fetchBanList(requestParameters = {}, options) {\n        return (0, exports.BanApiFp)(this.configuration).fetchBanList(requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.\n     * @summary Ban FIDs from app\n     * @param {BanApiPublishBansRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BanApi\n     * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)\n     *\n     */ publishBans(requestParameters, options) {\n        return (0, exports.BanApiFp)(this.configuration).publishBans(requestParameters.banReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.BanApi = BanApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/ban-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/block-api.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/block-api.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BlockApi = exports.BlockApiFactory = exports.BlockApiFp = exports.BlockApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * BlockApi - axios parameter creator\n * @export\n */ const BlockApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Deletes a block for a given FID.\n         * @summary Unblock FID\n         * @param {BlockReqBody} blockReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-block)\n         *\n         */ deleteBlock: async (blockReqBody, options = {})=>{\n            // verify required parameter 'blockReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"deleteBlock\", \"blockReqBody\", blockReqBody);\n            const localVarPath = `/farcaster/block`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(blockReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches all FIDs that a user has blocked or has been blocked by\n         * @summary Blocked / Blocked by FIDs\n         * @param {number} [blockerFid] Providing this will return the users that this user has blocked\n         * @param {number} [blockedFid] Providing this will return the users that have blocked this user\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BlockListResponse>} A promise that resolves to a `BlockListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-block-list)\n         *\n         */ fetchBlockList: async (blockerFid, blockedFid, limit, cursor, xNeynarExperimental, options = {})=>{\n            const localVarPath = `/farcaster/block/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (blockerFid !== undefined) {\n                localVarQueryParameter[\"blocker_fid\"] = blockerFid;\n            }\n            if (blockedFid !== undefined) {\n                localVarQueryParameter[\"blocked_fid\"] = blockedFid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Adds a block for a given FID.\n         * @summary Block FID\n         * @param {BlockReqBody} blockReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-block)\n         *\n         */ publishBlock: async (blockReqBody, options = {})=>{\n            // verify required parameter 'blockReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishBlock\", \"blockReqBody\", blockReqBody);\n            const localVarPath = `/farcaster/block`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(blockReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.BlockApiAxiosParamCreator = BlockApiAxiosParamCreator;\n/**\n * BlockApi - functional programming interface\n * @export\n */ const BlockApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.BlockApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Deletes a block for a given FID.\n         * @summary Unblock FID\n         * @param {BlockReqBody} blockReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-block)\n         *\n         */ async deleteBlock (blockReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlock(blockReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"BlockApi.deleteBlock\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches all FIDs that a user has blocked or has been blocked by\n         * @summary Blocked / Blocked by FIDs\n         * @param {number} [blockerFid] Providing this will return the users that this user has blocked\n         * @param {number} [blockedFid] Providing this will return the users that have blocked this user\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BlockListResponse>} A promise that resolves to a `BlockListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-block-list)\n         *\n         */ async fetchBlockList (blockerFid, blockedFid, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBlockList(blockerFid, blockedFid, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"BlockApi.fetchBlockList\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Adds a block for a given FID.\n         * @summary Block FID\n         * @param {BlockReqBody} blockReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-block)\n         *\n         */ async publishBlock (blockReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishBlock(blockReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"BlockApi.publishBlock\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.BlockApiFp = BlockApiFp;\n/**\n * BlockApi - factory interface\n * @export\n */ const BlockApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.BlockApiFp)(configuration);\n    return {\n        /**\n         * Deletes a block for a given FID.\n         * @summary Unblock FID\n         * @param {BlockApiDeleteBlockRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-block)\n         *\n         */ deleteBlock (requestParameters, options) {\n            return localVarFp.deleteBlock(requestParameters.blockReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches all FIDs that a user has blocked or has been blocked by\n         * @summary Blocked / Blocked by FIDs\n         * @param {BlockApiFetchBlockListRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BlockListResponse>} A promise that resolves to a `BlockListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-block-list)\n         *\n         */ fetchBlockList (requestParameters = {}, options) {\n            return localVarFp.fetchBlockList(requestParameters.blockerFid, requestParameters.blockedFid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Adds a block for a given FID.\n         * @summary Block FID\n         * @param {BlockApiPublishBlockRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-block)\n         *\n         */ publishBlock (requestParameters, options) {\n            return localVarFp.publishBlock(requestParameters.blockReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.BlockApiFactory = BlockApiFactory;\n/**\n * BlockApi - object-oriented interface\n * @export\n * @class BlockApi\n * @extends {BaseAPI}\n */ class BlockApi extends base_1.BaseAPI {\n    /**\n     * Deletes a block for a given FID.\n     * @summary Unblock FID\n     * @param {BlockApiDeleteBlockRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BlockApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-block)\n     *\n     */ deleteBlock(requestParameters, options) {\n        return (0, exports.BlockApiFp)(this.configuration).deleteBlock(requestParameters.blockReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches all FIDs that a user has blocked or has been blocked by\n     * @summary Blocked / Blocked by FIDs\n     * @param {BlockApiFetchBlockListRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BlockApi\n     * @returns {Promise<BlockListResponse>} A promise that resolves to a `BlockListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-block-list)\n     *\n     */ fetchBlockList(requestParameters = {}, options) {\n        return (0, exports.BlockApiFp)(this.configuration).fetchBlockList(requestParameters.blockerFid, requestParameters.blockedFid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Adds a block for a given FID.\n     * @summary Block FID\n     * @param {BlockApiPublishBlockRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BlockApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-block)\n     *\n     */ publishBlock(requestParameters, options) {\n        return (0, exports.BlockApiFp)(this.configuration).publishBlock(requestParameters.blockReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.BlockApi = BlockApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/block-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/cast-api.js":
/*!********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/cast-api.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SearchCastsModeEnum = exports.LookupCastConversationFoldEnum = exports.FetchBulkCastsSortTypeEnum = exports.CastApi = exports.CastApiFactory = exports.CastApiFp = exports.CastApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * CastApi - axios parameter creator\n * @export\n */ const CastApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Delete an existing cast. \\\\ (In order to delete a cast `signer_uuid` must be approved)\n         * @summary Delete a cast\n         * @param {DeleteCastReqBody} deleteCastReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)\n         *\n         */ deleteCast: async (deleteCastReqBody, options = {})=>{\n            // verify required parameter 'deleteCastReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"deleteCast\", \"deleteCastReqBody\", deleteCastReqBody);\n            const localVarPath = `/farcaster/cast`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deleteCastReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch multiple casts using their respective hashes.\n         * @summary Bulk fetch casts\n         * @param {string} casts Hashes of the cast to be retrived (Comma separated, no spaces)\n         * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.\n         * @param {FetchBulkCastsSortTypeEnum} [sortType] Optional parameter to sort the casts based on different criteria\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)\n         *\n         */ fetchBulkCasts: async (casts, viewerFid, sortType, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'casts' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchBulkCasts\", \"casts\", casts);\n            const localVarPath = `/farcaster/casts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (casts !== undefined) {\n                localVarQueryParameter[\"casts\"] = casts;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (sortType !== undefined) {\n                localVarQueryParameter[\"sort_type\"] = sortType;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches all composer actions on Warpcast. You can filter by top or featured.\n         * @summary Fetch composer actions\n         * @param {CastComposerType} list Type of list to fetch.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)\n         *\n         */ fetchComposerActions: async (list, limit, cursor, options = {})=>{\n            // verify required parameter 'list' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchComposerActions\", \"list\", list);\n            const localVarPath = `/farcaster/cast/composer_actions/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (list !== undefined) {\n                localVarQueryParameter[\"list\"] = list;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Crawls the given URL and returns metadata useful when embedding the URL in a cast.\n         * @summary Embedded URL metadata\n         * @param {string} url URL to crawl metadata of\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)\n         *\n         */ fetchEmbeddedUrlMetadata: async (url, options = {})=>{\n            // verify required parameter 'url' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchEmbeddedUrlMetadata\", \"url\", url);\n            const localVarPath = `/farcaster/cast/embed/crawl`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (url !== undefined) {\n                localVarQueryParameter[\"url\"] = url;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash\n         * @summary By hash or URL\n         * @param {string} identifier Cast identifier (Its either a url or a hash)\n         * @param {CastParamType} type\n         * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)\n         *\n         */ lookupCastByHashOrWarpcastUrl: async (identifier, type, viewerFid, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'identifier' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupCastByHashOrWarpcastUrl\", \"identifier\", identifier);\n            // verify required parameter 'type' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupCastByHashOrWarpcastUrl\", \"type\", type);\n            const localVarPath = `/farcaster/cast`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (identifier !== undefined) {\n                localVarQueryParameter[\"identifier\"] = identifier;\n            }\n            if (type !== undefined) {\n                localVarQueryParameter[\"type\"] = type;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.\n         * @summary Conversation for a cast\n         * @param {string} identifier Cast identifier (Its either a url or a hash)\n         * @param {CastParamType} type\n         * @param {number} [replyDepth] The depth of replies in the conversation that will be returned (default 2)\n         * @param {boolean} [includeChronologicalParentCasts] Include all parent casts in chronological order\n         * @param {number} [viewerFid] Providing this will return a conversation that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {CastConversationSortType} [sortType] Sort type for the ordering of descendants. Default is &#x60;chron&#x60;\n         * @param {LookupCastConversationFoldEnum} [fold] Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding.\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 50)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)\n         *\n         */ lookupCastConversation: async (identifier, type, replyDepth, includeChronologicalParentCasts, viewerFid, sortType, fold, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'identifier' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupCastConversation\", \"identifier\", identifier);\n            // verify required parameter 'type' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupCastConversation\", \"type\", type);\n            const localVarPath = `/farcaster/cast/conversation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (identifier !== undefined) {\n                localVarQueryParameter[\"identifier\"] = identifier;\n            }\n            if (type !== undefined) {\n                localVarQueryParameter[\"type\"] = type;\n            }\n            if (replyDepth !== undefined) {\n                localVarQueryParameter[\"reply_depth\"] = replyDepth;\n            }\n            if (includeChronologicalParentCasts !== undefined) {\n                localVarQueryParameter[\"include_chronological_parent_casts\"] = includeChronologicalParentCasts;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (sortType !== undefined) {\n                localVarQueryParameter[\"sort_type\"] = sortType;\n            }\n            if (fold !== undefined) {\n                localVarQueryParameter[\"fold\"] = fold;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)\n         * @summary Post a cast\n         * @param {PostCastReqBody} postCastReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)\n         *\n         */ publishCast: async (postCastReqBody, options = {})=>{\n            // verify required parameter 'postCastReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishCast\", \"postCastReqBody\", postCastReqBody);\n            const localVarPath = `/farcaster/cast`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postCastReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Search for casts based on a query string, with optional AND filters\n         * @summary Search for casts\n         * @param {string} q Query string to search for casts. Supported operators:  | Operator  | Description                                                                                              | | --------- | -------------------------------------------------------------------------------------------------------- | | &#x60;+&#x60;       | Acts as the AND operator. This is the default operator between terms and can usually be omitted.         | | &#x60;\\\\|&#x60;      | Acts as the OR operator.                                                                                 | | &#x60;*&#x60;       | When used at the end of a term, signifies a prefix query.                                                  | | &#x60;\\&quot;&#x60;       | Wraps several terms into a phrase (for example, &#x60;\\&quot;star wars\\&quot;&#x60;).                                          | | &#x60;(&#x60;, &#x60;)&#x60;  | Wrap a clause for precedence (for example, &#x60;star + (wars \\\\| trek)&#x60;).                                     | | &#x60;~n&#x60;      | When used after a term (for example, &#x60;satr~3&#x60;), sets &#x60;fuzziness&#x60;. When used after a phrase, sets &#x60;slop&#x60;. | | &#x60;-&#x60;       | Negates the term.                                                                                        | | &#x60;before:&#x60; | Search for casts before a specific date. (e.g. &#x60;before:2025-04-20&#x60;)                                       | | &#x60;after:&#x60;  | Search for casts after a specific date. (e.g. &#x60;after:2025-04-20&#x60;)                                         |\n         * @param {SearchCastsModeEnum} [mode] Choices are: - &#x60;literal&#x60; - Searches for the words in the query string (default) - &#x60;semantic&#x60; - Searches for the meaning of the query string - &#x60;hybrid&#x60; - Combines both literal and semantic results\n         * @param {SearchSortType} [sortType] Choices are: - &#x60;desc_chron&#x60; - All casts sorted by time (default) - &#x60;algorithmic&#x60; - Casts sorted by engagement and time\n         * @param {number} [authorFid] Fid of the user whose casts you want to search\n         * @param {number} [viewerFid] Providing this will return search results that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {string} [parentUrl] Parent URL of the casts you want to search\n         * @param {string} [channelId] Channel ID of the casts you want to search\n         * @param {boolean} [priorityMode] When true, only returns search results from power badge users and users that the viewer follows (if viewer_fid is provided).\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)\n         *\n         */ searchCasts: async (q, mode, sortType, authorFid, viewerFid, parentUrl, channelId, priorityMode, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'q' is not null or undefined\n            (0, common_1.assertParamExists)(\"searchCasts\", \"q\", q);\n            const localVarPath = `/farcaster/cast/search`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (q !== undefined) {\n                localVarQueryParameter[\"q\"] = q;\n            }\n            if (mode !== undefined) {\n                localVarQueryParameter[\"mode\"] = mode;\n            }\n            if (sortType !== undefined) {\n                localVarQueryParameter[\"sort_type\"] = sortType;\n            }\n            if (authorFid !== undefined) {\n                localVarQueryParameter[\"author_fid\"] = authorFid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (parentUrl !== undefined) {\n                localVarQueryParameter[\"parent_url\"] = parentUrl;\n            }\n            if (channelId !== undefined) {\n                localVarQueryParameter[\"channel_id\"] = channelId;\n            }\n            if (priorityMode !== undefined) {\n                localVarQueryParameter[\"priority_mode\"] = priorityMode;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.CastApiAxiosParamCreator = CastApiAxiosParamCreator;\n/**\n * CastApi - functional programming interface\n * @export\n */ const CastApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.CastApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Delete an existing cast. \\\\ (In order to delete a cast `signer_uuid` must be approved)\n         * @summary Delete a cast\n         * @param {DeleteCastReqBody} deleteCastReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)\n         *\n         */ async deleteCast (deleteCastReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCast(deleteCastReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastApi.deleteCast\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch multiple casts using their respective hashes.\n         * @summary Bulk fetch casts\n         * @param {string} casts Hashes of the cast to be retrived (Comma separated, no spaces)\n         * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.\n         * @param {FetchBulkCastsSortTypeEnum} [sortType] Optional parameter to sort the casts based on different criteria\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)\n         *\n         */ async fetchBulkCasts (casts, viewerFid, sortType, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBulkCasts(casts, viewerFid, sortType, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastApi.fetchBulkCasts\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches all composer actions on Warpcast. You can filter by top or featured.\n         * @summary Fetch composer actions\n         * @param {CastComposerType} list Type of list to fetch.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)\n         *\n         */ async fetchComposerActions (list, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchComposerActions(list, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastApi.fetchComposerActions\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Crawls the given URL and returns metadata useful when embedding the URL in a cast.\n         * @summary Embedded URL metadata\n         * @param {string} url URL to crawl metadata of\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)\n         *\n         */ async fetchEmbeddedUrlMetadata (url, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchEmbeddedUrlMetadata(url, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastApi.fetchEmbeddedUrlMetadata\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash\n         * @summary By hash or URL\n         * @param {string} identifier Cast identifier (Its either a url or a hash)\n         * @param {CastParamType} type\n         * @param {number} [viewerFid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)\n         *\n         */ async lookupCastByHashOrWarpcastUrl (identifier, type, viewerFid, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupCastByHashOrWarpcastUrl(identifier, type, viewerFid, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastApi.lookupCastByHashOrWarpcastUrl\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.\n         * @summary Conversation for a cast\n         * @param {string} identifier Cast identifier (Its either a url or a hash)\n         * @param {CastParamType} type\n         * @param {number} [replyDepth] The depth of replies in the conversation that will be returned (default 2)\n         * @param {boolean} [includeChronologicalParentCasts] Include all parent casts in chronological order\n         * @param {number} [viewerFid] Providing this will return a conversation that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {CastConversationSortType} [sortType] Sort type for the ordering of descendants. Default is &#x60;chron&#x60;\n         * @param {LookupCastConversationFoldEnum} [fold] Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding.\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 50)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)\n         *\n         */ async lookupCastConversation (identifier, type, replyDepth, includeChronologicalParentCasts, viewerFid, sortType, fold, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupCastConversation(identifier, type, replyDepth, includeChronologicalParentCasts, viewerFid, sortType, fold, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastApi.lookupCastConversation\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)\n         * @summary Post a cast\n         * @param {PostCastReqBody} postCastReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)\n         *\n         */ async publishCast (postCastReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishCast(postCastReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastApi.publishCast\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Search for casts based on a query string, with optional AND filters\n         * @summary Search for casts\n         * @param {string} q Query string to search for casts. Supported operators:  | Operator  | Description                                                                                              | | --------- | -------------------------------------------------------------------------------------------------------- | | &#x60;+&#x60;       | Acts as the AND operator. This is the default operator between terms and can usually be omitted.         | | &#x60;\\\\|&#x60;      | Acts as the OR operator.                                                                                 | | &#x60;*&#x60;       | When used at the end of a term, signifies a prefix query.                                                  | | &#x60;\\&quot;&#x60;       | Wraps several terms into a phrase (for example, &#x60;\\&quot;star wars\\&quot;&#x60;).                                          | | &#x60;(&#x60;, &#x60;)&#x60;  | Wrap a clause for precedence (for example, &#x60;star + (wars \\\\| trek)&#x60;).                                     | | &#x60;~n&#x60;      | When used after a term (for example, &#x60;satr~3&#x60;), sets &#x60;fuzziness&#x60;. When used after a phrase, sets &#x60;slop&#x60;. | | &#x60;-&#x60;       | Negates the term.                                                                                        | | &#x60;before:&#x60; | Search for casts before a specific date. (e.g. &#x60;before:2025-04-20&#x60;)                                       | | &#x60;after:&#x60;  | Search for casts after a specific date. (e.g. &#x60;after:2025-04-20&#x60;)                                         |\n         * @param {SearchCastsModeEnum} [mode] Choices are: - &#x60;literal&#x60; - Searches for the words in the query string (default) - &#x60;semantic&#x60; - Searches for the meaning of the query string - &#x60;hybrid&#x60; - Combines both literal and semantic results\n         * @param {SearchSortType} [sortType] Choices are: - &#x60;desc_chron&#x60; - All casts sorted by time (default) - &#x60;algorithmic&#x60; - Casts sorted by engagement and time\n         * @param {number} [authorFid] Fid of the user whose casts you want to search\n         * @param {number} [viewerFid] Providing this will return search results that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {string} [parentUrl] Parent URL of the casts you want to search\n         * @param {string} [channelId] Channel ID of the casts you want to search\n         * @param {boolean} [priorityMode] When true, only returns search results from power badge users and users that the viewer follows (if viewer_fid is provided).\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)\n         *\n         */ async searchCasts (q, mode, sortType, authorFid, viewerFid, parentUrl, channelId, priorityMode, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCasts(q, mode, sortType, authorFid, viewerFid, parentUrl, channelId, priorityMode, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastApi.searchCasts\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.CastApiFp = CastApiFp;\n/**\n * CastApi - factory interface\n * @export\n */ const CastApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.CastApiFp)(configuration);\n    return {\n        /**\n         * Delete an existing cast. \\\\ (In order to delete a cast `signer_uuid` must be approved)\n         * @summary Delete a cast\n         * @param {CastApiDeleteCastRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)\n         *\n         */ deleteCast (requestParameters, options) {\n            return localVarFp.deleteCast(requestParameters.deleteCastReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch multiple casts using their respective hashes.\n         * @summary Bulk fetch casts\n         * @param {CastApiFetchBulkCastsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)\n         *\n         */ fetchBulkCasts (requestParameters, options) {\n            return localVarFp.fetchBulkCasts(requestParameters.casts, requestParameters.viewerFid, requestParameters.sortType, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches all composer actions on Warpcast. You can filter by top or featured.\n         * @summary Fetch composer actions\n         * @param {CastApiFetchComposerActionsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)\n         *\n         */ fetchComposerActions (requestParameters, options) {\n            return localVarFp.fetchComposerActions(requestParameters.list, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Crawls the given URL and returns metadata useful when embedding the URL in a cast.\n         * @summary Embedded URL metadata\n         * @param {CastApiFetchEmbeddedUrlMetadataRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)\n         *\n         */ fetchEmbeddedUrlMetadata (requestParameters, options) {\n            return localVarFp.fetchEmbeddedUrlMetadata(requestParameters.url, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash\n         * @summary By hash or URL\n         * @param {CastApiLookupCastByHashOrWarpcastUrlRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)\n         *\n         */ lookupCastByHashOrWarpcastUrl (requestParameters, options) {\n            return localVarFp.lookupCastByHashOrWarpcastUrl(requestParameters.identifier, requestParameters.type, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.\n         * @summary Conversation for a cast\n         * @param {CastApiLookupCastConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)\n         *\n         */ lookupCastConversation (requestParameters, options) {\n            return localVarFp.lookupCastConversation(requestParameters.identifier, requestParameters.type, requestParameters.replyDepth, requestParameters.includeChronologicalParentCasts, requestParameters.viewerFid, requestParameters.sortType, requestParameters.fold, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)\n         * @summary Post a cast\n         * @param {CastApiPublishCastRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)\n         *\n         */ publishCast (requestParameters, options) {\n            return localVarFp.publishCast(requestParameters.postCastReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Search for casts based on a query string, with optional AND filters\n         * @summary Search for casts\n         * @param {CastApiSearchCastsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)\n         *\n         */ searchCasts (requestParameters, options) {\n            return localVarFp.searchCasts(requestParameters.q, requestParameters.mode, requestParameters.sortType, requestParameters.authorFid, requestParameters.viewerFid, requestParameters.parentUrl, requestParameters.channelId, requestParameters.priorityMode, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.CastApiFactory = CastApiFactory;\n/**\n * CastApi - object-oriented interface\n * @export\n * @class CastApi\n * @extends {BaseAPI}\n */ class CastApi extends base_1.BaseAPI {\n    /**\n     * Delete an existing cast. \\\\ (In order to delete a cast `signer_uuid` must be approved)\n     * @summary Delete a cast\n     * @param {CastApiDeleteCastRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)\n     *\n     */ deleteCast(requestParameters, options) {\n        return (0, exports.CastApiFp)(this.configuration).deleteCast(requestParameters.deleteCastReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch multiple casts using their respective hashes.\n     * @summary Bulk fetch casts\n     * @param {CastApiFetchBulkCastsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastApi\n     * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)\n     *\n     */ fetchBulkCasts(requestParameters, options) {\n        return (0, exports.CastApiFp)(this.configuration).fetchBulkCasts(requestParameters.casts, requestParameters.viewerFid, requestParameters.sortType, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches all composer actions on Warpcast. You can filter by top or featured.\n     * @summary Fetch composer actions\n     * @param {CastApiFetchComposerActionsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastApi\n     * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)\n     *\n     */ fetchComposerActions(requestParameters, options) {\n        return (0, exports.CastApiFp)(this.configuration).fetchComposerActions(requestParameters.list, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Crawls the given URL and returns metadata useful when embedding the URL in a cast.\n     * @summary Embedded URL metadata\n     * @param {CastApiFetchEmbeddedUrlMetadataRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastApi\n     * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)\n     *\n     */ fetchEmbeddedUrlMetadata(requestParameters, options) {\n        return (0, exports.CastApiFp)(this.configuration).fetchEmbeddedUrlMetadata(requestParameters.url, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Gets information about an individual cast by passing in a Warpcast web URL or cast hash\n     * @summary By hash or URL\n     * @param {CastApiLookupCastByHashOrWarpcastUrlRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastApi\n     * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)\n     *\n     */ lookupCastByHashOrWarpcastUrl(requestParameters, options) {\n        return (0, exports.CastApiFp)(this.configuration).lookupCastByHashOrWarpcastUrl(requestParameters.identifier, requestParameters.type, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.\n     * @summary Conversation for a cast\n     * @param {CastApiLookupCastConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastApi\n     * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)\n     *\n     */ lookupCastConversation(requestParameters, options) {\n        return (0, exports.CastApiFp)(this.configuration).lookupCastConversation(requestParameters.identifier, requestParameters.type, requestParameters.replyDepth, requestParameters.includeChronologicalParentCasts, requestParameters.viewerFid, requestParameters.sortType, requestParameters.fold, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)\n     * @summary Post a cast\n     * @param {CastApiPublishCastRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastApi\n     * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)\n     *\n     */ publishCast(requestParameters, options) {\n        return (0, exports.CastApiFp)(this.configuration).publishCast(requestParameters.postCastReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Search for casts based on a query string, with optional AND filters\n     * @summary Search for casts\n     * @param {CastApiSearchCastsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastApi\n     * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)\n     *\n     */ searchCasts(requestParameters, options) {\n        return (0, exports.CastApiFp)(this.configuration).searchCasts(requestParameters.q, requestParameters.mode, requestParameters.sortType, requestParameters.authorFid, requestParameters.viewerFid, requestParameters.parentUrl, requestParameters.channelId, requestParameters.priorityMode, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.CastApi = CastApi;\n/**\n * @export\n */ exports.FetchBulkCastsSortTypeEnum = {\n    Trending: \"trending\",\n    Likes: \"likes\",\n    Recasts: \"recasts\",\n    Replies: \"replies\",\n    Recent: \"recent\"\n};\n/**\n * @export\n */ exports.LookupCastConversationFoldEnum = {\n    Above: \"above\",\n    Below: \"below\"\n};\n/**\n * @export\n */ exports.SearchCastsModeEnum = {\n    Literal: \"literal\",\n    Semantic: \"semantic\",\n    Hybrid: \"hybrid\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/cast-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/channel-api.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/channel-api.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FetchTrendingChannelsTimeWindowEnum = exports.ChannelApi = exports.ChannelApiFactory = exports.ChannelApiFp = exports.ChannelApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * ChannelApi - axios parameter creator\n * @export\n */ const ChannelApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Returns a list of all channels with their details\n         * @summary Fetch all channels with their details\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 200)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)\n         *\n         */ fetchAllChannels: async (limit, cursor, options = {})=>{\n            const localVarPath = `/farcaster/channel/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns details of multiple channels\n         * @summary Bulk fetch\n         * @param {string} ids Comma separated list of channel IDs or parent_urls, up to 100 at a time\n         * @param {ChannelType} [type] Type of identifier being used to query the channels. Defaults to ID.\n         * @param {number} [viewerFid] FID of the user viewing the channels.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)\n         *\n         */ fetchBulkChannels: async (ids, type, viewerFid, options = {})=>{\n            // verify required parameter 'ids' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchBulkChannels\", \"ids\", ids);\n            const localVarPath = `/farcaster/channel/bulk`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (ids !== undefined) {\n                localVarQueryParameter[\"ids\"] = ids;\n            }\n            if (type !== undefined) {\n                localVarQueryParameter[\"type\"] = type;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.\n         * @summary Open invites\n         * @param {string} [channelId] Channel ID for the channel being queried\n         * @param {number} [invitedFid] FID of the user being invited\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)\n         *\n         */ fetchChannelInvites: async (channelId, invitedFid, limit, cursor, options = {})=>{\n            const localVarPath = `/farcaster/channel/member/invite/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (channelId !== undefined) {\n                localVarQueryParameter[\"channel_id\"] = channelId;\n            }\n            if (invitedFid !== undefined) {\n                localVarQueryParameter[\"invited_fid\"] = invitedFid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of members in a channel\n         * @summary Fetch members\n         * @param {string} channelId Channel ID for the channel being queried\n         * @param {number} [fid] FID of the user being queried. Specify this to check if a user is a member of the channel without paginating through all members.\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)\n         *\n         */ fetchChannelMembers: async (channelId, fid, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'channelId' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchChannelMembers\", \"channelId\", channelId);\n            const localVarPath = `/farcaster/channel/member/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (channelId !== undefined) {\n                localVarQueryParameter[\"channel_id\"] = channelId;\n            }\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.\n         * @summary For channel\n         * @param {string} id Channel ID for the channel being queried\n         * @param {number} [viewerFid] Providing this will return a list of followers that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {string} [cursor] Pagination cursor.\n         * @param {number} [limit] Number of followers to fetch  (Default: 25, Maximum: 1000)\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)\n         *\n         */ fetchFollowersForAChannel: async (id, viewerFid, cursor, limit, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'id' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchFollowersForAChannel\", \"id\", id);\n            const localVarPath = `/farcaster/channel/followers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (id !== undefined) {\n                localVarQueryParameter[\"id\"] = id;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \\\"X, Y, Z follow this channel\\\".\n         * @summary Relevant followers\n         * @param {string} id Channel ID being queried\n         * @param {number} viewerFid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)\n         *\n         */ fetchRelevantFollowersForAChannel: async (id, viewerFid, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'id' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchRelevantFollowersForAChannel\", \"id\", id);\n            // verify required parameter 'viewerFid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchRelevantFollowersForAChannel\", \"viewerFid\", viewerFid);\n            const localVarPath = `/farcaster/channel/followers/relevant`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (id !== undefined) {\n                localVarQueryParameter[\"id\"] = id;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of trending channels based on activity\n         * @summary Channels by activity\n         * @param {FetchTrendingChannelsTimeWindowEnum} [timeWindow]\n         * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)\n         *\n         */ fetchTrendingChannels: async (timeWindow, limit, cursor, options = {})=>{\n            const localVarPath = `/farcaster/channel/trending`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (timeWindow !== undefined) {\n                localVarQueryParameter[\"time_window\"] = timeWindow;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.\n         * @summary Member of\n         * @param {number} fid The FID of the user.\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)\n         *\n         */ fetchUserChannelMemberships: async (fid, limit, cursor, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserChannelMemberships\", \"fid\", fid);\n            const localVarPath = `/farcaster/user/memberships/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of all channels with their details that a FID follows.\n         * @summary Following\n         * @param {number} fid The FID of the user.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)\n         *\n         */ fetchUserChannels: async (fid, limit, cursor, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserChannels\", \"fid\", fid);\n            const localVarPath = `/farcaster/user/channels`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches all channels that a user has casted in, in reverse chronological order.\n         * @summary Fetch channels that user is active in\n         * @param {number} fid The user\\&#39;s FID (identifier)\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)\n         *\n         */ fetchUsersActiveChannels: async (fid, limit, cursor, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUsersActiveChannels\", \"fid\", fid);\n            const localVarPath = `/farcaster/channel/user`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Follow a channel\n         * @summary Follow a channel\n         * @param {ChannelFollowReqBody} channelFollowReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)\n         *\n         */ followChannel: async (channelFollowReqBody, options = {})=>{\n            // verify required parameter 'channelFollowReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"followChannel\", \"channelFollowReqBody\", channelFollowReqBody);\n            const localVarPath = `/farcaster/channel/follow`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(channelFollowReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Invite a user to a channel\n         * @summary Invite\n         * @param {InviteChannelMemberReqBody} inviteChannelMemberReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)\n         *\n         */ inviteChannelMember: async (inviteChannelMemberReqBody, options = {})=>{\n            // verify required parameter 'inviteChannelMemberReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"inviteChannelMember\", \"inviteChannelMemberReqBody\", inviteChannelMemberReqBody);\n            const localVarPath = `/farcaster/channel/member/invite`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(inviteChannelMemberReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns details of a channel\n         * @summary By ID or parent_url\n         * @param {string} id Channel ID for the channel being queried\n         * @param {ChannelType} [type] Type of identifier being used to query the channel. Defaults to ID.\n         * @param {number} [viewerFid] FID of the user viewing the channel.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)\n         *\n         */ lookupChannel: async (id, type, viewerFid, options = {})=>{\n            // verify required parameter 'id' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupChannel\", \"id\", id);\n            const localVarPath = `/farcaster/channel`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (id !== undefined) {\n                localVarQueryParameter[\"id\"] = id;\n            }\n            if (type !== undefined) {\n                localVarQueryParameter[\"type\"] = type;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Remove a user from a channel or a user\\'s invite to a channel role\n         * @summary Remove user\n         * @param {RemoveChannelMemberReqBody} removeChannelMemberReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)\n         *\n         */ removeChannelMember: async (removeChannelMemberReqBody, options = {})=>{\n            // verify required parameter 'removeChannelMemberReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"removeChannelMember\", \"removeChannelMemberReqBody\", removeChannelMemberReqBody);\n            const localVarPath = `/farcaster/channel/member`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(removeChannelMemberReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Accept or reject a channel invite\n         * @summary Accept or reject an invite\n         * @param {RespondChannelInviteReqBody} respondChannelInviteReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)\n         *\n         */ respondChannelInvite: async (respondChannelInviteReqBody, options = {})=>{\n            // verify required parameter 'respondChannelInviteReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"respondChannelInvite\", \"respondChannelInviteReqBody\", respondChannelInviteReqBody);\n            const localVarPath = `/farcaster/channel/member/invite`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"PUT\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(respondChannelInviteReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of channels based on ID or name\n         * @summary Search by ID or name\n         * @param {string} q Channel ID or name for the channel being queried\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 200)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)\n         *\n         */ searchChannels: async (q, limit, cursor, options = {})=>{\n            // verify required parameter 'q' is not null or undefined\n            (0, common_1.assertParamExists)(\"searchChannels\", \"q\", q);\n            const localVarPath = `/farcaster/channel/search`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (q !== undefined) {\n                localVarQueryParameter[\"q\"] = q;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Unfollow a channel\n         * @summary Unfollow a channel\n         * @param {ChannelFollowReqBody} channelFollowReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)\n         *\n         */ unfollowChannel: async (channelFollowReqBody, options = {})=>{\n            // verify required parameter 'channelFollowReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"unfollowChannel\", \"channelFollowReqBody\", channelFollowReqBody);\n            const localVarPath = `/farcaster/channel/follow`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(channelFollowReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.ChannelApiAxiosParamCreator = ChannelApiAxiosParamCreator;\n/**\n * ChannelApi - functional programming interface\n * @export\n */ const ChannelApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.ChannelApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Returns a list of all channels with their details\n         * @summary Fetch all channels with their details\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 200)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)\n         *\n         */ async fetchAllChannels (limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAllChannels(limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchAllChannels\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns details of multiple channels\n         * @summary Bulk fetch\n         * @param {string} ids Comma separated list of channel IDs or parent_urls, up to 100 at a time\n         * @param {ChannelType} [type] Type of identifier being used to query the channels. Defaults to ID.\n         * @param {number} [viewerFid] FID of the user viewing the channels.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)\n         *\n         */ async fetchBulkChannels (ids, type, viewerFid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBulkChannels(ids, type, viewerFid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchBulkChannels\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.\n         * @summary Open invites\n         * @param {string} [channelId] Channel ID for the channel being queried\n         * @param {number} [invitedFid] FID of the user being invited\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)\n         *\n         */ async fetchChannelInvites (channelId, invitedFid, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchChannelInvites(channelId, invitedFid, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchChannelInvites\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of members in a channel\n         * @summary Fetch members\n         * @param {string} channelId Channel ID for the channel being queried\n         * @param {number} [fid] FID of the user being queried. Specify this to check if a user is a member of the channel without paginating through all members.\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)\n         *\n         */ async fetchChannelMembers (channelId, fid, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchChannelMembers(channelId, fid, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchChannelMembers\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.\n         * @summary For channel\n         * @param {string} id Channel ID for the channel being queried\n         * @param {number} [viewerFid] Providing this will return a list of followers that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {string} [cursor] Pagination cursor.\n         * @param {number} [limit] Number of followers to fetch  (Default: 25, Maximum: 1000)\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)\n         *\n         */ async fetchFollowersForAChannel (id, viewerFid, cursor, limit, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFollowersForAChannel(id, viewerFid, cursor, limit, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchFollowersForAChannel\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \\\"X, Y, Z follow this channel\\\".\n         * @summary Relevant followers\n         * @param {string} id Channel ID being queried\n         * @param {number} viewerFid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)\n         *\n         */ async fetchRelevantFollowersForAChannel (id, viewerFid, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRelevantFollowersForAChannel(id, viewerFid, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchRelevantFollowersForAChannel\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of trending channels based on activity\n         * @summary Channels by activity\n         * @param {FetchTrendingChannelsTimeWindowEnum} [timeWindow]\n         * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)\n         *\n         */ async fetchTrendingChannels (timeWindow, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchTrendingChannels(timeWindow, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchTrendingChannels\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.\n         * @summary Member of\n         * @param {number} fid The FID of the user.\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)\n         *\n         */ async fetchUserChannelMemberships (fid, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserChannelMemberships(fid, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchUserChannelMemberships\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of all channels with their details that a FID follows.\n         * @summary Following\n         * @param {number} fid The FID of the user.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)\n         *\n         */ async fetchUserChannels (fid, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserChannels(fid, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchUserChannels\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches all channels that a user has casted in, in reverse chronological order.\n         * @summary Fetch channels that user is active in\n         * @param {number} fid The user\\&#39;s FID (identifier)\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)\n         *\n         */ async fetchUsersActiveChannels (fid, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsersActiveChannels(fid, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.fetchUsersActiveChannels\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Follow a channel\n         * @summary Follow a channel\n         * @param {ChannelFollowReqBody} channelFollowReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)\n         *\n         */ async followChannel (channelFollowReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.followChannel(channelFollowReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.followChannel\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Invite a user to a channel\n         * @summary Invite\n         * @param {InviteChannelMemberReqBody} inviteChannelMemberReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)\n         *\n         */ async inviteChannelMember (inviteChannelMemberReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteChannelMember(inviteChannelMemberReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.inviteChannelMember\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns details of a channel\n         * @summary By ID or parent_url\n         * @param {string} id Channel ID for the channel being queried\n         * @param {ChannelType} [type] Type of identifier being used to query the channel. Defaults to ID.\n         * @param {number} [viewerFid] FID of the user viewing the channel.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)\n         *\n         */ async lookupChannel (id, type, viewerFid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupChannel(id, type, viewerFid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.lookupChannel\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Remove a user from a channel or a user\\'s invite to a channel role\n         * @summary Remove user\n         * @param {RemoveChannelMemberReqBody} removeChannelMemberReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)\n         *\n         */ async removeChannelMember (removeChannelMemberReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.removeChannelMember(removeChannelMemberReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.removeChannelMember\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Accept or reject a channel invite\n         * @summary Accept or reject an invite\n         * @param {RespondChannelInviteReqBody} respondChannelInviteReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)\n         *\n         */ async respondChannelInvite (respondChannelInviteReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.respondChannelInvite(respondChannelInviteReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.respondChannelInvite\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of channels based on ID or name\n         * @summary Search by ID or name\n         * @param {string} q Channel ID or name for the channel being queried\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 200)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)\n         *\n         */ async searchChannels (q, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.searchChannels(q, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.searchChannels\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Unfollow a channel\n         * @summary Unfollow a channel\n         * @param {ChannelFollowReqBody} channelFollowReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)\n         *\n         */ async unfollowChannel (channelFollowReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowChannel(channelFollowReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ChannelApi.unfollowChannel\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.ChannelApiFp = ChannelApiFp;\n/**\n * ChannelApi - factory interface\n * @export\n */ const ChannelApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.ChannelApiFp)(configuration);\n    return {\n        /**\n         * Returns a list of all channels with their details\n         * @summary Fetch all channels with their details\n         * @param {ChannelApiFetchAllChannelsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)\n         *\n         */ fetchAllChannels (requestParameters = {}, options) {\n            return localVarFp.fetchAllChannels(requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns details of multiple channels\n         * @summary Bulk fetch\n         * @param {ChannelApiFetchBulkChannelsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)\n         *\n         */ fetchBulkChannels (requestParameters, options) {\n            return localVarFp.fetchBulkChannels(requestParameters.ids, requestParameters.type, requestParameters.viewerFid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.\n         * @summary Open invites\n         * @param {ChannelApiFetchChannelInvitesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)\n         *\n         */ fetchChannelInvites (requestParameters = {}, options) {\n            return localVarFp.fetchChannelInvites(requestParameters.channelId, requestParameters.invitedFid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of members in a channel\n         * @summary Fetch members\n         * @param {ChannelApiFetchChannelMembersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)\n         *\n         */ fetchChannelMembers (requestParameters, options) {\n            return localVarFp.fetchChannelMembers(requestParameters.channelId, requestParameters.fid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.\n         * @summary For channel\n         * @param {ChannelApiFetchFollowersForAChannelRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)\n         *\n         */ fetchFollowersForAChannel (requestParameters, options) {\n            return localVarFp.fetchFollowersForAChannel(requestParameters.id, requestParameters.viewerFid, requestParameters.cursor, requestParameters.limit, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \\\"X, Y, Z follow this channel\\\".\n         * @summary Relevant followers\n         * @param {ChannelApiFetchRelevantFollowersForAChannelRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)\n         *\n         */ fetchRelevantFollowersForAChannel (requestParameters, options) {\n            return localVarFp.fetchRelevantFollowersForAChannel(requestParameters.id, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of trending channels based on activity\n         * @summary Channels by activity\n         * @param {ChannelApiFetchTrendingChannelsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)\n         *\n         */ fetchTrendingChannels (requestParameters = {}, options) {\n            return localVarFp.fetchTrendingChannels(requestParameters.timeWindow, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.\n         * @summary Member of\n         * @param {ChannelApiFetchUserChannelMembershipsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)\n         *\n         */ fetchUserChannelMemberships (requestParameters, options) {\n            return localVarFp.fetchUserChannelMemberships(requestParameters.fid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of all channels with their details that a FID follows.\n         * @summary Following\n         * @param {ChannelApiFetchUserChannelsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)\n         *\n         */ fetchUserChannels (requestParameters, options) {\n            return localVarFp.fetchUserChannels(requestParameters.fid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches all channels that a user has casted in, in reverse chronological order.\n         * @summary Fetch channels that user is active in\n         * @param {ChannelApiFetchUsersActiveChannelsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)\n         *\n         */ fetchUsersActiveChannels (requestParameters, options) {\n            return localVarFp.fetchUsersActiveChannels(requestParameters.fid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Follow a channel\n         * @summary Follow a channel\n         * @param {ChannelApiFollowChannelRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)\n         *\n         */ followChannel (requestParameters, options) {\n            return localVarFp.followChannel(requestParameters.channelFollowReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Invite a user to a channel\n         * @summary Invite\n         * @param {ChannelApiInviteChannelMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)\n         *\n         */ inviteChannelMember (requestParameters, options) {\n            return localVarFp.inviteChannelMember(requestParameters.inviteChannelMemberReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns details of a channel\n         * @summary By ID or parent_url\n         * @param {ChannelApiLookupChannelRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)\n         *\n         */ lookupChannel (requestParameters, options) {\n            return localVarFp.lookupChannel(requestParameters.id, requestParameters.type, requestParameters.viewerFid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Remove a user from a channel or a user\\'s invite to a channel role\n         * @summary Remove user\n         * @param {ChannelApiRemoveChannelMemberRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)\n         *\n         */ removeChannelMember (requestParameters, options) {\n            return localVarFp.removeChannelMember(requestParameters.removeChannelMemberReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Accept or reject a channel invite\n         * @summary Accept or reject an invite\n         * @param {ChannelApiRespondChannelInviteRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)\n         *\n         */ respondChannelInvite (requestParameters, options) {\n            return localVarFp.respondChannelInvite(requestParameters.respondChannelInviteReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of channels based on ID or name\n         * @summary Search by ID or name\n         * @param {ChannelApiSearchChannelsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)\n         *\n         */ searchChannels (requestParameters, options) {\n            return localVarFp.searchChannels(requestParameters.q, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Unfollow a channel\n         * @summary Unfollow a channel\n         * @param {ChannelApiUnfollowChannelRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)\n         *\n         */ unfollowChannel (requestParameters, options) {\n            return localVarFp.unfollowChannel(requestParameters.channelFollowReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.ChannelApiFactory = ChannelApiFactory;\n/**\n * ChannelApi - object-oriented interface\n * @export\n * @class ChannelApi\n * @extends {BaseAPI}\n */ class ChannelApi extends base_1.BaseAPI {\n    /**\n     * Returns a list of all channels with their details\n     * @summary Fetch all channels with their details\n     * @param {ChannelApiFetchAllChannelsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)\n     *\n     */ fetchAllChannels(requestParameters = {}, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchAllChannels(requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns details of multiple channels\n     * @summary Bulk fetch\n     * @param {ChannelApiFetchBulkChannelsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)\n     *\n     */ fetchBulkChannels(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchBulkChannels(requestParameters.ids, requestParameters.type, requestParameters.viewerFid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.\n     * @summary Open invites\n     * @param {ChannelApiFetchChannelInvitesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)\n     *\n     */ fetchChannelInvites(requestParameters = {}, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchChannelInvites(requestParameters.channelId, requestParameters.invitedFid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of members in a channel\n     * @summary Fetch members\n     * @param {ChannelApiFetchChannelMembersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)\n     *\n     */ fetchChannelMembers(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchChannelMembers(requestParameters.channelId, requestParameters.fid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.\n     * @summary For channel\n     * @param {ChannelApiFetchFollowersForAChannelRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)\n     *\n     */ fetchFollowersForAChannel(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchFollowersForAChannel(requestParameters.id, requestParameters.viewerFid, requestParameters.cursor, requestParameters.limit, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \\\"X, Y, Z follow this channel\\\".\n     * @summary Relevant followers\n     * @param {ChannelApiFetchRelevantFollowersForAChannelRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)\n     *\n     */ fetchRelevantFollowersForAChannel(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchRelevantFollowersForAChannel(requestParameters.id, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of trending channels based on activity\n     * @summary Channels by activity\n     * @param {ChannelApiFetchTrendingChannelsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)\n     *\n     */ fetchTrendingChannels(requestParameters = {}, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchTrendingChannels(requestParameters.timeWindow, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.\n     * @summary Member of\n     * @param {ChannelApiFetchUserChannelMembershipsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)\n     *\n     */ fetchUserChannelMemberships(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchUserChannelMemberships(requestParameters.fid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of all channels with their details that a FID follows.\n     * @summary Following\n     * @param {ChannelApiFetchUserChannelsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)\n     *\n     */ fetchUserChannels(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchUserChannels(requestParameters.fid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches all channels that a user has casted in, in reverse chronological order.\n     * @summary Fetch channels that user is active in\n     * @param {ChannelApiFetchUsersActiveChannelsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)\n     *\n     */ fetchUsersActiveChannels(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).fetchUsersActiveChannels(requestParameters.fid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Follow a channel\n     * @summary Follow a channel\n     * @param {ChannelApiFollowChannelRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)\n     *\n     */ followChannel(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).followChannel(requestParameters.channelFollowReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Invite a user to a channel\n     * @summary Invite\n     * @param {ChannelApiInviteChannelMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)\n     *\n     */ inviteChannelMember(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).inviteChannelMember(requestParameters.inviteChannelMemberReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns details of a channel\n     * @summary By ID or parent_url\n     * @param {ChannelApiLookupChannelRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)\n     *\n     */ lookupChannel(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).lookupChannel(requestParameters.id, requestParameters.type, requestParameters.viewerFid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Remove a user from a channel or a user\\'s invite to a channel role\n     * @summary Remove user\n     * @param {ChannelApiRemoveChannelMemberRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)\n     *\n     */ removeChannelMember(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).removeChannelMember(requestParameters.removeChannelMemberReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Accept or reject a channel invite\n     * @summary Accept or reject an invite\n     * @param {ChannelApiRespondChannelInviteRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)\n     *\n     */ respondChannelInvite(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).respondChannelInvite(requestParameters.respondChannelInviteReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of channels based on ID or name\n     * @summary Search by ID or name\n     * @param {ChannelApiSearchChannelsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)\n     *\n     */ searchChannels(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).searchChannels(requestParameters.q, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Unfollow a channel\n     * @summary Unfollow a channel\n     * @param {ChannelApiUnfollowChannelRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ChannelApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)\n     *\n     */ unfollowChannel(requestParameters, options) {\n        return (0, exports.ChannelApiFp)(this.configuration).unfollowChannel(requestParameters.channelFollowReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.ChannelApi = ChannelApi;\n/**\n * @export\n */ exports.FetchTrendingChannelsTimeWindowEnum = {\n    _1d: \"1d\",\n    _7d: \"7d\",\n    _30d: \"30d\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/channel-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/feed-api.js":
/*!********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/feed-api.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FetchTrendingFeedTimeWindowEnum = exports.FetchRepliesAndRecastsForUserFilterEnum = exports.FeedApi = exports.FeedApiFactory = exports.FeedApiFp = exports.FeedApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * FeedApi - axios parameter creator\n * @export\n */ const FeedApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel\n         * @summary Chronologically\n         * @param {number} fid FID of user whose recent casts you want to fetch\n         * @param {number} [appFid] Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast\n         * @param {number} [viewerFid] FID of the user viewing the feed\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)\n         * @param {string} [cursor] Pagination cursor\n         * @param {boolean} [includeReplies] Include reply casts by the author in the response, true by default\n         * @param {string} [parentUrl] Parent URL to filter the feed; mutually exclusive with channel_id\n         * @param {string} [channelId] Channel ID to filter the feed; mutually exclusive with parent_url\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)\n         *\n         */ fetchCastsForUser: async (fid, appFid, viewerFid, limit, cursor, includeReplies, parentUrl, channelId, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchCastsForUser\", \"fid\", fid);\n            const localVarPath = `/farcaster/feed/user/casts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (appFid !== undefined) {\n                localVarQueryParameter[\"app_fid\"] = appFid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (includeReplies !== undefined) {\n                localVarQueryParameter[\"include_replies\"] = includeReplies;\n            }\n            if (parentUrl !== undefined) {\n                localVarQueryParameter[\"parent_url\"] = parentUrl;\n            }\n            if (channelId !== undefined) {\n                localVarQueryParameter[\"channel_id\"] = channelId;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.\n         * @summary By filters\n         * @param {FeedType} feedType Defaults to following (requires FID or address). If set to filter (requires filter_type)\n         * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)\n         * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type\n         * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.\n         * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type.\n         * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.\n         * @param {boolean} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.\n         * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend \\&#39;https://\\&#39; if no protocol is included. Requires feed_type and filter_type.\n         * @param {Array<EmbedType>} [embedTypes] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type.\n         * @param {boolean} [withRecasts] Include recasts in the response, true by default\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)\n         *\n         */ fetchFeed: async (feedType, filterType, fid, fids, parentUrl, channelId, membersOnly, embedUrl, embedTypes, withRecasts, limit, cursor, viewerFid, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'feedType' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchFeed\", \"feedType\", feedType);\n            const localVarPath = `/farcaster/feed`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (feedType !== undefined) {\n                localVarQueryParameter[\"feed_type\"] = feedType;\n            }\n            if (filterType !== undefined) {\n                localVarQueryParameter[\"filter_type\"] = filterType;\n            }\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (fids !== undefined) {\n                localVarQueryParameter[\"fids\"] = fids;\n            }\n            if (parentUrl !== undefined) {\n                localVarQueryParameter[\"parent_url\"] = parentUrl;\n            }\n            if (channelId !== undefined) {\n                localVarQueryParameter[\"channel_id\"] = channelId;\n            }\n            if (membersOnly !== undefined) {\n                localVarQueryParameter[\"members_only\"] = membersOnly;\n            }\n            if (embedUrl !== undefined) {\n                localVarQueryParameter[\"embed_url\"] = embedUrl;\n            }\n            if (embedTypes) {\n                localVarQueryParameter[\"embed_types\"] = embedTypes.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (withRecasts !== undefined) {\n                localVarQueryParameter[\"with_recasts\"] = withRecasts;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch feed based on channel IDs\n         * @summary By channel IDs\n         * @param {string} channelIds Comma separated list of up to 10 channel IDs e.g. neynar,farcaster\n         * @param {boolean} [withRecasts] Include recasts in the response, true by default\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [withReplies] Include replies in the response, false by default\n         * @param {boolean} [membersOnly] Only include casts from members of the channel. True by default.\n         * @param {string} [fids] Comma separated list of FIDs to filter the feed by, up to 10 at a time\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [shouldModerate] If true, only casts that have been liked by the moderator (if one exists) will be returned.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)\n         *\n         */ fetchFeedByChannelIds: async (channelIds, withRecasts, viewerFid, withReplies, membersOnly, fids, limit, cursor, shouldModerate, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'channelIds' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchFeedByChannelIds\", \"channelIds\", channelIds);\n            const localVarPath = `/farcaster/feed/channels`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (channelIds !== undefined) {\n                localVarQueryParameter[\"channel_ids\"] = channelIds;\n            }\n            if (withRecasts !== undefined) {\n                localVarQueryParameter[\"with_recasts\"] = withRecasts;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (withReplies !== undefined) {\n                localVarQueryParameter[\"with_replies\"] = withReplies;\n            }\n            if (membersOnly !== undefined) {\n                localVarQueryParameter[\"members_only\"] = membersOnly;\n            }\n            if (fids !== undefined) {\n                localVarQueryParameter[\"fids\"] = fids;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (shouldModerate !== undefined) {\n                localVarQueryParameter[\"should_moderate\"] = shouldModerate;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch feed based on parent URLs\n         * @summary By parent URLs\n         * @param {string} parentUrls Comma separated list of parent_urls\n         * @param {boolean} [withRecasts] Include recasts in the response, true by default\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [withReplies] Include replies in the response, false by default\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)\n         *\n         */ fetchFeedByParentUrls: async (parentUrls, withRecasts, viewerFid, withReplies, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'parentUrls' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchFeedByParentUrls\", \"parentUrls\", parentUrls);\n            const localVarPath = `/farcaster/feed/parent_urls`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (parentUrls !== undefined) {\n                localVarQueryParameter[\"parent_urls\"] = parentUrls;\n            }\n            if (withRecasts !== undefined) {\n                localVarQueryParameter[\"with_recasts\"] = withRecasts;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (withReplies !== undefined) {\n                localVarQueryParameter[\"with_replies\"] = withReplies;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a personalized For You feed for a user\n         * @summary For you\n         * @param {number} fid FID of user whose feed you want to create\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {ForYouProvider} [provider]\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)\n         *\n         */ fetchFeedForYou: async (fid, viewerFid, provider, limit, cursor, providerMetadata, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchFeedForYou\", \"fid\", fid);\n            const localVarPath = `/farcaster/feed/for_you`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (provider !== undefined) {\n                localVarQueryParameter[\"provider\"] = provider;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (providerMetadata !== undefined) {\n                localVarQueryParameter[\"provider_metadata\"] = providerMetadata;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch feed of casts with mini apps, reverse chronological order\n         * @summary Casts with mini apps\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)\n         *\n         */ fetchFramesOnlyFeed: async (limit, viewerFid, cursor, xNeynarExperimental, options = {})=>{\n            const localVarPath = `/farcaster/feed/frames`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first\n         * @summary 10 most popular casts\n         * @param {number} fid FID of user whose feed you want to create\n         * @param {number} [viewerFid]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)\n         *\n         */ fetchPopularCastsByUser: async (fid, viewerFid, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchPopularCastsByUser\", \"fid\", fid);\n            const localVarPath = `/farcaster/feed/user/popular`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch recent replies and recasts for a given user FID; sorted by most recent first\n         * @summary Replies and recasts\n         * @param {number} fid FID of user whose replies and recasts you want to fetch\n         * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] filter to fetch only replies or recasts\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)\n         *\n         */ fetchRepliesAndRecastsForUser: async (fid, filter, limit, cursor, viewerFid, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchRepliesAndRecastsForUser\", \"fid\", fid);\n            const localVarPath = `/farcaster/feed/user/replies_and_recasts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (filter !== undefined) {\n                localVarQueryParameter[\"filter\"] = filter;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.\n         * @summary Trending feeds\n         * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)\n         * @param {string} [cursor] Pagination cursor\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {FetchTrendingFeedTimeWindowEnum} [timeWindow] Time window for trending casts (7d window for channel feeds only)\n         * @param {string} [channelId] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.\n         * @param {string} [parentUrl] Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.\n         * @param {FeedTrendingProvider} [provider] The provider of the trending casts feed.\n         * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)\n         *\n         */ fetchTrendingFeed: async (limit, cursor, viewerFid, timeWindow, channelId, parentUrl, provider, providerMetadata, xNeynarExperimental, options = {})=>{\n            const localVarPath = `/farcaster/feed/trending`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (timeWindow !== undefined) {\n                localVarQueryParameter[\"time_window\"] = timeWindow;\n            }\n            if (channelId !== undefined) {\n                localVarQueryParameter[\"channel_id\"] = channelId;\n            }\n            if (parentUrl !== undefined) {\n                localVarQueryParameter[\"parent_url\"] = parentUrl;\n            }\n            if (provider !== undefined) {\n                localVarQueryParameter[\"provider\"] = provider;\n            }\n            if (providerMetadata !== undefined) {\n                localVarQueryParameter[\"provider_metadata\"] = providerMetadata;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch feed based on who a user is following\n         * @summary Following\n         * @param {number} fid FID of user whose feed you want to create\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [withRecasts] Include recasts in the response, true by default\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)\n         *\n         */ fetchUserFollowingFeed: async (fid, viewerFid, withRecasts, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserFollowingFeed\", \"fid\", fid);\n            const localVarPath = `/farcaster/feed/following`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (withRecasts !== undefined) {\n                localVarQueryParameter[\"with_recasts\"] = withRecasts;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.FeedApiAxiosParamCreator = FeedApiAxiosParamCreator;\n/**\n * FeedApi - functional programming interface\n * @export\n */ const FeedApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.FeedApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel\n         * @summary Chronologically\n         * @param {number} fid FID of user whose recent casts you want to fetch\n         * @param {number} [appFid] Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast\n         * @param {number} [viewerFid] FID of the user viewing the feed\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)\n         * @param {string} [cursor] Pagination cursor\n         * @param {boolean} [includeReplies] Include reply casts by the author in the response, true by default\n         * @param {string} [parentUrl] Parent URL to filter the feed; mutually exclusive with channel_id\n         * @param {string} [channelId] Channel ID to filter the feed; mutually exclusive with parent_url\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)\n         *\n         */ async fetchCastsForUser (fid, appFid, viewerFid, limit, cursor, includeReplies, parentUrl, channelId, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastsForUser(fid, appFid, viewerFid, limit, cursor, includeReplies, parentUrl, channelId, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchCastsForUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.\n         * @summary By filters\n         * @param {FeedType} feedType Defaults to following (requires FID or address). If set to filter (requires filter_type)\n         * @param {FilterType} [filterType] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)\n         * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type\n         * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.\n         * @param {string} [parentUrl] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type.\n         * @param {string} [channelId] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.\n         * @param {boolean} [membersOnly] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.\n         * @param {string} [embedUrl] Used when filter_type&#x3D;embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend \\&#39;https://\\&#39; if no protocol is included. Requires feed_type and filter_type.\n         * @param {Array<EmbedType>} [embedTypes] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type.\n         * @param {boolean} [withRecasts] Include recasts in the response, true by default\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)\n         *\n         */ async fetchFeed (feedType, filterType, fid, fids, parentUrl, channelId, membersOnly, embedUrl, embedTypes, withRecasts, limit, cursor, viewerFid, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeed(feedType, filterType, fid, fids, parentUrl, channelId, membersOnly, embedUrl, embedTypes, withRecasts, limit, cursor, viewerFid, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchFeed\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch feed based on channel IDs\n         * @summary By channel IDs\n         * @param {string} channelIds Comma separated list of up to 10 channel IDs e.g. neynar,farcaster\n         * @param {boolean} [withRecasts] Include recasts in the response, true by default\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [withReplies] Include replies in the response, false by default\n         * @param {boolean} [membersOnly] Only include casts from members of the channel. True by default.\n         * @param {string} [fids] Comma separated list of FIDs to filter the feed by, up to 10 at a time\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [shouldModerate] If true, only casts that have been liked by the moderator (if one exists) will be returned.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)\n         *\n         */ async fetchFeedByChannelIds (channelIds, withRecasts, viewerFid, withReplies, membersOnly, fids, limit, cursor, shouldModerate, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedByChannelIds(channelIds, withRecasts, viewerFid, withReplies, membersOnly, fids, limit, cursor, shouldModerate, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchFeedByChannelIds\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch feed based on parent URLs\n         * @summary By parent URLs\n         * @param {string} parentUrls Comma separated list of parent_urls\n         * @param {boolean} [withRecasts] Include recasts in the response, true by default\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [withReplies] Include replies in the response, false by default\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)\n         *\n         */ async fetchFeedByParentUrls (parentUrls, withRecasts, viewerFid, withReplies, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedByParentUrls(parentUrls, withRecasts, viewerFid, withReplies, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchFeedByParentUrls\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a personalized For You feed for a user\n         * @summary For you\n         * @param {number} fid FID of user whose feed you want to create\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {ForYouProvider} [provider]\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)\n         *\n         */ async fetchFeedForYou (fid, viewerFid, provider, limit, cursor, providerMetadata, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedForYou(fid, viewerFid, provider, limit, cursor, providerMetadata, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchFeedForYou\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch feed of casts with mini apps, reverse chronological order\n         * @summary Casts with mini apps\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)\n         *\n         */ async fetchFramesOnlyFeed (limit, viewerFid, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFramesOnlyFeed(limit, viewerFid, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchFramesOnlyFeed\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first\n         * @summary 10 most popular casts\n         * @param {number} fid FID of user whose feed you want to create\n         * @param {number} [viewerFid]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)\n         *\n         */ async fetchPopularCastsByUser (fid, viewerFid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPopularCastsByUser(fid, viewerFid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchPopularCastsByUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch recent replies and recasts for a given user FID; sorted by most recent first\n         * @summary Replies and recasts\n         * @param {number} fid FID of user whose replies and recasts you want to fetch\n         * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] filter to fetch only replies or recasts\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)\n         *\n         */ async fetchRepliesAndRecastsForUser (fid, filter, limit, cursor, viewerFid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRepliesAndRecastsForUser(fid, filter, limit, cursor, viewerFid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchRepliesAndRecastsForUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.\n         * @summary Trending feeds\n         * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)\n         * @param {string} [cursor] Pagination cursor\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {FetchTrendingFeedTimeWindowEnum} [timeWindow] Time window for trending casts (7d window for channel feeds only)\n         * @param {string} [channelId] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.\n         * @param {string} [parentUrl] Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either &#x60;channel_id&#x60; or &#x60;parent_url&#x60;, not both.\n         * @param {FeedTrendingProvider} [provider] The provider of the trending casts feed.\n         * @param {string} [providerMetadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)\n         *\n         */ async fetchTrendingFeed (limit, cursor, viewerFid, timeWindow, channelId, parentUrl, provider, providerMetadata, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchTrendingFeed(limit, cursor, viewerFid, timeWindow, channelId, parentUrl, provider, providerMetadata, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchTrendingFeed\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch feed based on who a user is following\n         * @summary Following\n         * @param {number} fid FID of user whose feed you want to create\n         * @param {number} [viewerFid] Providing this will return a feed that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [withRecasts] Include recasts in the response, true by default\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)\n         *\n         */ async fetchUserFollowingFeed (fid, viewerFid, withRecasts, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowingFeed(fid, viewerFid, withRecasts, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FeedApi.fetchUserFollowingFeed\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.FeedApiFp = FeedApiFp;\n/**\n * FeedApi - factory interface\n * @export\n */ const FeedApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.FeedApiFp)(configuration);\n    return {\n        /**\n         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel\n         * @summary Chronologically\n         * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)\n         *\n         */ fetchCastsForUser (requestParameters, options) {\n            return localVarFp.fetchCastsForUser(requestParameters.fid, requestParameters.appFid, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.includeReplies, requestParameters.parentUrl, requestParameters.channelId, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.\n         * @summary By filters\n         * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)\n         *\n         */ fetchFeed (requestParameters, options) {\n            return localVarFp.fetchFeed(requestParameters.feedType, requestParameters.filterType, requestParameters.fid, requestParameters.fids, requestParameters.parentUrl, requestParameters.channelId, requestParameters.membersOnly, requestParameters.embedUrl, requestParameters.embedTypes, requestParameters.withRecasts, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch feed based on channel IDs\n         * @summary By channel IDs\n         * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)\n         *\n         */ fetchFeedByChannelIds (requestParameters, options) {\n            return localVarFp.fetchFeedByChannelIds(requestParameters.channelIds, requestParameters.withRecasts, requestParameters.viewerFid, requestParameters.withReplies, requestParameters.membersOnly, requestParameters.fids, requestParameters.limit, requestParameters.cursor, requestParameters.shouldModerate, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch feed based on parent URLs\n         * @summary By parent URLs\n         * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)\n         *\n         */ fetchFeedByParentUrls (requestParameters, options) {\n            return localVarFp.fetchFeedByParentUrls(requestParameters.parentUrls, requestParameters.withRecasts, requestParameters.viewerFid, requestParameters.withReplies, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a personalized For You feed for a user\n         * @summary For you\n         * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)\n         *\n         */ fetchFeedForYou (requestParameters, options) {\n            return localVarFp.fetchFeedForYou(requestParameters.fid, requestParameters.viewerFid, requestParameters.provider, requestParameters.limit, requestParameters.cursor, requestParameters.providerMetadata, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch feed of casts with mini apps, reverse chronological order\n         * @summary Casts with mini apps\n         * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)\n         *\n         */ fetchFramesOnlyFeed (requestParameters = {}, options) {\n            return localVarFp.fetchFramesOnlyFeed(requestParameters.limit, requestParameters.viewerFid, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first\n         * @summary 10 most popular casts\n         * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)\n         *\n         */ fetchPopularCastsByUser (requestParameters, options) {\n            return localVarFp.fetchPopularCastsByUser(requestParameters.fid, requestParameters.viewerFid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch recent replies and recasts for a given user FID; sorted by most recent first\n         * @summary Replies and recasts\n         * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)\n         *\n         */ fetchRepliesAndRecastsForUser (requestParameters, options) {\n            return localVarFp.fetchRepliesAndRecastsForUser(requestParameters.fid, requestParameters.filter, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.\n         * @summary Trending feeds\n         * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)\n         *\n         */ fetchTrendingFeed (requestParameters = {}, options) {\n            return localVarFp.fetchTrendingFeed(requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, requestParameters.timeWindow, requestParameters.channelId, requestParameters.parentUrl, requestParameters.provider, requestParameters.providerMetadata, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch feed based on who a user is following\n         * @summary Following\n         * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)\n         *\n         */ fetchUserFollowingFeed (requestParameters, options) {\n            return localVarFp.fetchUserFollowingFeed(requestParameters.fid, requestParameters.viewerFid, requestParameters.withRecasts, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.FeedApiFactory = FeedApiFactory;\n/**\n * FeedApi - object-oriented interface\n * @export\n * @class FeedApi\n * @extends {BaseAPI}\n */ class FeedApi extends base_1.BaseAPI {\n    /**\n     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel\n     * @summary Chronologically\n     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)\n     *\n     */ fetchCastsForUser(requestParameters, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchCastsForUser(requestParameters.fid, requestParameters.appFid, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.includeReplies, requestParameters.parentUrl, requestParameters.channelId, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.\n     * @summary By filters\n     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)\n     *\n     */ fetchFeed(requestParameters, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchFeed(requestParameters.feedType, requestParameters.filterType, requestParameters.fid, requestParameters.fids, requestParameters.parentUrl, requestParameters.channelId, requestParameters.membersOnly, requestParameters.embedUrl, requestParameters.embedTypes, requestParameters.withRecasts, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch feed based on channel IDs\n     * @summary By channel IDs\n     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)\n     *\n     */ fetchFeedByChannelIds(requestParameters, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchFeedByChannelIds(requestParameters.channelIds, requestParameters.withRecasts, requestParameters.viewerFid, requestParameters.withReplies, requestParameters.membersOnly, requestParameters.fids, requestParameters.limit, requestParameters.cursor, requestParameters.shouldModerate, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch feed based on parent URLs\n     * @summary By parent URLs\n     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)\n     *\n     */ fetchFeedByParentUrls(requestParameters, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchFeedByParentUrls(requestParameters.parentUrls, requestParameters.withRecasts, requestParameters.viewerFid, requestParameters.withReplies, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a personalized For You feed for a user\n     * @summary For you\n     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)\n     *\n     */ fetchFeedForYou(requestParameters, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchFeedForYou(requestParameters.fid, requestParameters.viewerFid, requestParameters.provider, requestParameters.limit, requestParameters.cursor, requestParameters.providerMetadata, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch feed of casts with mini apps, reverse chronological order\n     * @summary Casts with mini apps\n     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)\n     *\n     */ fetchFramesOnlyFeed(requestParameters = {}, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchFramesOnlyFeed(requestParameters.limit, requestParameters.viewerFid, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first\n     * @summary 10 most popular casts\n     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)\n     *\n     */ fetchPopularCastsByUser(requestParameters, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchPopularCastsByUser(requestParameters.fid, requestParameters.viewerFid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch recent replies and recasts for a given user FID; sorted by most recent first\n     * @summary Replies and recasts\n     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)\n     *\n     */ fetchRepliesAndRecastsForUser(requestParameters, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchRepliesAndRecastsForUser(requestParameters.fid, requestParameters.filter, requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.\n     * @summary Trending feeds\n     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)\n     *\n     */ fetchTrendingFeed(requestParameters = {}, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchTrendingFeed(requestParameters.limit, requestParameters.cursor, requestParameters.viewerFid, requestParameters.timeWindow, requestParameters.channelId, requestParameters.parentUrl, requestParameters.provider, requestParameters.providerMetadata, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch feed based on who a user is following\n     * @summary Following\n     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeedApi\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)\n     *\n     */ fetchUserFollowingFeed(requestParameters, options) {\n        return (0, exports.FeedApiFp)(this.configuration).fetchUserFollowingFeed(requestParameters.fid, requestParameters.viewerFid, requestParameters.withRecasts, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.FeedApi = FeedApi;\n/**\n * @export\n */ exports.FetchRepliesAndRecastsForUserFilterEnum = {\n    Replies: \"replies\",\n    Recasts: \"recasts\",\n    All: \"all\"\n};\n/**\n * @export\n */ exports.FetchTrendingFeedTimeWindowEnum = {\n    _1h: \"1h\",\n    _6h: \"6h\",\n    _12h: \"12h\",\n    _24h: \"24h\",\n    _7d: \"7d\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/feed-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/fname-api.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/fname-api.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FnameApi = exports.FnameApiFactory = exports.FnameApiFp = exports.FnameApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * FnameApi - axios parameter creator\n * @export\n */ const FnameApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Check if a given fname is available\n         * @summary Check fname availability\n         * @param {string} fname\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FnameAvailabilityResponse>} A promise that resolves to a `FnameAvailabilityResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/is-fname-available)\n         *\n         */ isFnameAvailable: async (fname, options = {})=>{\n            // verify required parameter 'fname' is not null or undefined\n            (0, common_1.assertParamExists)(\"isFnameAvailable\", \"fname\", fname);\n            const localVarPath = `/farcaster/fname/availability`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fname !== undefined) {\n                localVarQueryParameter[\"fname\"] = fname;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.FnameApiAxiosParamCreator = FnameApiAxiosParamCreator;\n/**\n * FnameApi - functional programming interface\n * @export\n */ const FnameApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.FnameApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Check if a given fname is available\n         * @summary Check fname availability\n         * @param {string} fname\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FnameAvailabilityResponse>} A promise that resolves to a `FnameAvailabilityResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/is-fname-available)\n         *\n         */ async isFnameAvailable (fname, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isFnameAvailable(fname, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FnameApi.isFnameAvailable\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.FnameApiFp = FnameApiFp;\n/**\n * FnameApi - factory interface\n * @export\n */ const FnameApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.FnameApiFp)(configuration);\n    return {\n        /**\n         * Check if a given fname is available\n         * @summary Check fname availability\n         * @param {FnameApiIsFnameAvailableRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FnameAvailabilityResponse>} A promise that resolves to a `FnameAvailabilityResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/is-fname-available)\n         *\n         */ isFnameAvailable (requestParameters, options) {\n            return localVarFp.isFnameAvailable(requestParameters.fname, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.FnameApiFactory = FnameApiFactory;\n/**\n * FnameApi - object-oriented interface\n * @export\n * @class FnameApi\n * @extends {BaseAPI}\n */ class FnameApi extends base_1.BaseAPI {\n    /**\n     * Check if a given fname is available\n     * @summary Check fname availability\n     * @param {FnameApiIsFnameAvailableRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FnameApi\n     * @returns {Promise<FnameAvailabilityResponse>} A promise that resolves to a `FnameAvailabilityResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/is-fname-available)\n     *\n     */ isFnameAvailable(requestParameters, options) {\n        return (0, exports.FnameApiFp)(this.configuration).isFnameAvailable(requestParameters.fname, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.FnameApi = FnameApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/fname-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/follows-api.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/follows-api.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FollowsApi = exports.FollowsApiFactory = exports.FollowsApiFp = exports.FollowsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * FollowsApi - axios parameter creator\n * @export\n */ const FollowsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch a list of suggested users to follow. Used to help users discover new users to follow\n         * @summary Suggest Follows\n         * @param {number} fid FID of the user whose following you want to fetch.\n         * @param {number} [viewerFid] Providing this will return a list of users that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)\n         *\n         */ fetchFollowSuggestions: async (fid, viewerFid, limit, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchFollowSuggestions\", \"fid\", fid);\n            const localVarPath = `/farcaster/following/suggested`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \\\"X, Y and Z follow this user\\\".\n         * @summary Relevant followers\n         * @param {number} targetFid User who\\&#39;s profile you are looking at\n         * @param {number} viewerFid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)\n         *\n         */ fetchRelevantFollowers: async (targetFid, viewerFid, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'targetFid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchRelevantFollowers\", \"targetFid\", targetFid);\n            // verify required parameter 'viewerFid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchRelevantFollowers\", \"viewerFid\", viewerFid);\n            const localVarPath = `/farcaster/followers/relevant`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (targetFid !== undefined) {\n                localVarQueryParameter[\"target_fid\"] = targetFid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of followers for a specific FID.\n         * @summary Followers\n         * @param {number} fid User who\\&#39;s profile you are looking at\n         * @param {number} [viewerFid] Providing this will return a list of followers that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {FollowSortType} [sortType] Sort type for fetch followers. Default is &#x60;desc_chron&#x60;\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n         *\n         */ fetchUserFollowers: async (fid, viewerFid, sortType, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserFollowers\", \"fid\", fid);\n            const localVarPath = `/farcaster/followers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (sortType !== undefined) {\n                localVarQueryParameter[\"sort_type\"] = sortType;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.\n         * @summary Following\n         * @param {number} fid FID of the user whose following you want to fetch.\n         * @param {number} [viewerFid] Providing this will return a list of users that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {FollowSortType} [sortType] Optional parameter to sort the users based on different criteria.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n         *\n         */ fetchUserFollowing: async (fid, viewerFid, sortType, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserFollowing\", \"fid\", fid);\n            const localVarPath = `/farcaster/following`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (sortType !== undefined) {\n                localVarQueryParameter[\"sort_type\"] = sortType;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.FollowsApiAxiosParamCreator = FollowsApiAxiosParamCreator;\n/**\n * FollowsApi - functional programming interface\n * @export\n */ const FollowsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.FollowsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch a list of suggested users to follow. Used to help users discover new users to follow\n         * @summary Suggest Follows\n         * @param {number} fid FID of the user whose following you want to fetch.\n         * @param {number} [viewerFid] Providing this will return a list of users that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)\n         *\n         */ async fetchFollowSuggestions (fid, viewerFid, limit, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFollowSuggestions(fid, viewerFid, limit, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FollowsApi.fetchFollowSuggestions\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \\\"X, Y and Z follow this user\\\".\n         * @summary Relevant followers\n         * @param {number} targetFid User who\\&#39;s profile you are looking at\n         * @param {number} viewerFid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)\n         *\n         */ async fetchRelevantFollowers (targetFid, viewerFid, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRelevantFollowers(targetFid, viewerFid, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FollowsApi.fetchRelevantFollowers\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of followers for a specific FID.\n         * @summary Followers\n         * @param {number} fid User who\\&#39;s profile you are looking at\n         * @param {number} [viewerFid] Providing this will return a list of followers that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {FollowSortType} [sortType] Sort type for fetch followers. Default is &#x60;desc_chron&#x60;\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n         *\n         */ async fetchUserFollowers (fid, viewerFid, sortType, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowers(fid, viewerFid, sortType, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FollowsApi.fetchUserFollowers\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.\n         * @summary Following\n         * @param {number} fid FID of the user whose following you want to fetch.\n         * @param {number} [viewerFid] Providing this will return a list of users that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {FollowSortType} [sortType] Optional parameter to sort the users based on different criteria.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n         *\n         */ async fetchUserFollowing (fid, viewerFid, sortType, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowing(fid, viewerFid, sortType, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FollowsApi.fetchUserFollowing\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.FollowsApiFp = FollowsApiFp;\n/**\n * FollowsApi - factory interface\n * @export\n */ const FollowsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.FollowsApiFp)(configuration);\n    return {\n        /**\n         * Fetch a list of suggested users to follow. Used to help users discover new users to follow\n         * @summary Suggest Follows\n         * @param {FollowsApiFetchFollowSuggestionsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)\n         *\n         */ fetchFollowSuggestions (requestParameters, options) {\n            return localVarFp.fetchFollowSuggestions(requestParameters.fid, requestParameters.viewerFid, requestParameters.limit, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \\\"X, Y and Z follow this user\\\".\n         * @summary Relevant followers\n         * @param {FollowsApiFetchRelevantFollowersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)\n         *\n         */ fetchRelevantFollowers (requestParameters, options) {\n            return localVarFp.fetchRelevantFollowers(requestParameters.targetFid, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of followers for a specific FID.\n         * @summary Followers\n         * @param {FollowsApiFetchUserFollowersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n         *\n         */ fetchUserFollowers (requestParameters, options) {\n            return localVarFp.fetchUserFollowers(requestParameters.fid, requestParameters.viewerFid, requestParameters.sortType, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.\n         * @summary Following\n         * @param {FollowsApiFetchUserFollowingRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n         *\n         */ fetchUserFollowing (requestParameters, options) {\n            return localVarFp.fetchUserFollowing(requestParameters.fid, requestParameters.viewerFid, requestParameters.sortType, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.FollowsApiFactory = FollowsApiFactory;\n/**\n * FollowsApi - object-oriented interface\n * @export\n * @class FollowsApi\n * @extends {BaseAPI}\n */ class FollowsApi extends base_1.BaseAPI {\n    /**\n     * Fetch a list of suggested users to follow. Used to help users discover new users to follow\n     * @summary Suggest Follows\n     * @param {FollowsApiFetchFollowSuggestionsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FollowsApi\n     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)\n     *\n     */ fetchFollowSuggestions(requestParameters, options) {\n        return (0, exports.FollowsApiFp)(this.configuration).fetchFollowSuggestions(requestParameters.fid, requestParameters.viewerFid, requestParameters.limit, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \\\"X, Y and Z follow this user\\\".\n     * @summary Relevant followers\n     * @param {FollowsApiFetchRelevantFollowersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FollowsApi\n     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)\n     *\n     */ fetchRelevantFollowers(requestParameters, options) {\n        return (0, exports.FollowsApiFp)(this.configuration).fetchRelevantFollowers(requestParameters.targetFid, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of followers for a specific FID.\n     * @summary Followers\n     * @param {FollowsApiFetchUserFollowersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FollowsApi\n     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n     *\n     */ fetchUserFollowers(requestParameters, options) {\n        return (0, exports.FollowsApiFp)(this.configuration).fetchUserFollowers(requestParameters.fid, requestParameters.viewerFid, requestParameters.sortType, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.\n     * @summary Following\n     * @param {FollowsApiFetchUserFollowingRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FollowsApi\n     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n     *\n     */ fetchUserFollowing(requestParameters, options) {\n        return (0, exports.FollowsApiFp)(this.configuration).fetchUserFollowing(requestParameters.fid, requestParameters.viewerFid, requestParameters.sortType, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.FollowsApi = FollowsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/follows-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/frame-api.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/frame-api.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FetchFrameCatalogCategoriesEnum = exports.FrameApi = exports.FrameApiFactory = exports.FrameApiFp = exports.FrameApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * FrameApi - axios parameter creator\n * @export\n */ const FrameApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Delete an existing mini app, if it was made by the developer (identified by API key)\n         * @summary Delete mini app\n         * @param {DeleteFrameReqBody} deleteFrameReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)\n         *\n         */ deleteNeynarFrame: async (deleteFrameReqBody, options = {})=>{\n            // verify required parameter 'deleteFrameReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"deleteNeynarFrame\", \"deleteFrameReqBody\", deleteFrameReqBody);\n            const localVarPath = `/farcaster/frame`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deleteFrameReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * A curated list of featured mini apps\n         * @summary Mini apps catalog\n         * @param {number} [limit] Number of results to fetch  (Default: 100, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor\n         * @param {MiniAppTimeWindow} [timeWindow] Time window used to calculate the change in trending score for each mini app, used to sort mini app results\n         * @param {Array<FetchFrameCatalogCategoriesEnum>} [categories] Comma separated list of categories to include in the results.  Includes all if left blank.  Example: &#x60;categories&#x3D;games,social&#x60; OR: &#x60;categories&#x3D;games&amp;categories&#x3D;social&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object\n         *\n         */ fetchFrameCatalog: async (limit, cursor, timeWindow, categories, options = {})=>{\n            const localVarPath = `/farcaster/frame/catalog`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (timeWindow !== undefined) {\n                localVarQueryParameter[\"time_window\"] = timeWindow;\n            }\n            if (categories) {\n                localVarQueryParameter[\"categories\"] = categories.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches the mini app meta tags from the URL\n         * @summary Meta tags from URL\n         * @param {string} url The mini app URL to crawl\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)\n         *\n         */ fetchFrameMetaTagsFromUrl: async (url, options = {})=>{\n            // verify required parameter 'url' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchFrameMetaTagsFromUrl\", \"url\", url);\n            const localVarPath = `/farcaster/frame/crawl`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (url !== undefined) {\n                localVarQueryParameter[\"url\"] = url;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of mini apps made by the developer (identified by API key)\n         * @summary List of mini apps\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)\n         *\n         */ fetchNeynarFrames: async (options = {})=>{\n            const localVarPath = `/farcaster/frame/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of notifications tokens related to a mini app\n         * @summary List of mini app notification tokens\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [fids] Comma separated list of FIDs, up to 100 at a time. If you pass in FIDs, you will get back the notification tokens for those FIDs. If you don\\&#39;t pass in FIDs, you will get back all the notification tokens for the mini app.\n         * @param {string} [cursor] Pagination cursor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)\n         *\n         */ fetchNotificationTokens: async (limit, fids, cursor, options = {})=>{\n            const localVarPath = `/farcaster/frame/notification_tokens`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (fids !== undefined) {\n                localVarQueryParameter[\"fids\"] = fids;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user\n         * @summary Relevant mini apps\n         * @param {number} viewerFid FID of the user to fetch relevant mini apps for\n         * @param {MiniAppTimeWindow} [timeWindow] Time window used to limit statistics used to calculate mini app relevance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)\n         *\n         */ fetchRelevantFrames: async (viewerFid, timeWindow, options = {})=>{\n            // verify required parameter 'viewerFid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchRelevantFrames\", \"viewerFid\", viewerFid);\n            const localVarPath = `/farcaster/frame/relevant`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (timeWindow !== undefined) {\n                localVarQueryParameter[\"time_window\"] = timeWindow;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.\n         * @summary Analytics for the mini app\n         * @param {string} frameUrl\n         * @param {ValidateFrameAnalyticsType} analyticsType\n         * @param {string} start\n         * @param {string} stop\n         * @param {ValidateFrameAggregateWindow} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)\n         *\n         */ fetchValidateFrameAnalytics: async (frameUrl, analyticsType, start, stop, aggregateWindow, options = {})=>{\n            // verify required parameter 'frameUrl' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchValidateFrameAnalytics\", \"frameUrl\", frameUrl);\n            // verify required parameter 'analyticsType' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchValidateFrameAnalytics\", \"analyticsType\", analyticsType);\n            // verify required parameter 'start' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchValidateFrameAnalytics\", \"start\", start);\n            // verify required parameter 'stop' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchValidateFrameAnalytics\", \"stop\", stop);\n            const localVarPath = `/farcaster/frame/validate/analytics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (frameUrl !== undefined) {\n                localVarQueryParameter[\"frame_url\"] = frameUrl;\n            }\n            if (analyticsType !== undefined) {\n                localVarQueryParameter[\"analytics_type\"] = analyticsType;\n            }\n            if (start !== undefined) {\n                localVarQueryParameter[\"start\"] = start instanceof Date ? start.toISOString() : start;\n            }\n            if (stop !== undefined) {\n                localVarQueryParameter[\"stop\"] = stop instanceof Date ? stop.toISOString() : stop;\n            }\n            if (aggregateWindow !== undefined) {\n                localVarQueryParameter[\"aggregate_window\"] = aggregateWindow;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of all the mini apps validated by a user\n         * @summary All mini apps validated by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)\n         *\n         */ fetchValidateFrameList: async (options = {})=>{\n            const localVarPath = `/farcaster/frame/validate/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Retrieves details about a transaction pay mini app by ID\n         * @summary Get transaction pay mini app\n         * @param {string} id ID of the transaction mini app to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object\n         *\n         */ getTransactionPayFrame: async (id, options = {})=>{\n            // verify required parameter 'id' is not null or undefined\n            (0, common_1.assertParamExists)(\"getTransactionPayFrame\", \"id\", id);\n            const localVarPath = `/farcaster/frame/transaction/pay`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (id !== undefined) {\n                localVarQueryParameter[\"id\"] = id;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a mini app either by UUID or Neynar URL\n         * @summary Mini app by UUID or URL\n         * @param {FrameType} type\n         * @param {string} [uuid] UUID of the mini app to fetch\n         * @param {string} [url] URL of the Neynar mini app to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)\n         *\n         */ lookupNeynarFrame: async (type, uuid, url, options = {})=>{\n            // verify required parameter 'type' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupNeynarFrame\", \"type\", type);\n            const localVarPath = `/farcaster/frame`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (type !== undefined) {\n                localVarQueryParameter[\"type\"] = type;\n            }\n            if (uuid !== undefined) {\n                localVarQueryParameter[\"uuid\"] = uuid;\n            }\n            if (url !== undefined) {\n                localVarQueryParameter[\"url\"] = url;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Post mini app actions, cast actions or cast composer actions to the server  \\\\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.\n         * @summary Post a mini app action, cast action or a cast composer action\n         * @param {FrameActionReqBody} frameActionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)\n         *\n         */ postFrameAction: async (frameActionReqBody, options = {})=>{\n            // verify required parameter 'frameActionReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"postFrameAction\", \"frameActionReqBody\", frameActionReqBody);\n            const localVarPath = `/farcaster/frame/action`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(frameActionReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.\n         * @summary Signature packet\n         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)\n         *\n         */ postFrameActionDeveloperManaged: async (frameDeveloperManagedActionReqBody, options = {})=>{\n            // verify required parameter 'frameDeveloperManagedActionReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"postFrameActionDeveloperManaged\", \"frameDeveloperManagedActionReqBody\", frameDeveloperManagedActionReqBody);\n            const localVarPath = `/farcaster/frame/developer_managed/action`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(frameDeveloperManagedActionReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Send notifications to interactors of a mini app\n         * @summary Send notifications\n         * @param {SendFrameNotificationsReqBody} sendFrameNotificationsReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)\n         *\n         */ publishFrameNotifications: async (sendFrameNotificationsReqBody, options = {})=>{\n            // verify required parameter 'sendFrameNotificationsReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishFrameNotifications\", \"sendFrameNotificationsReqBody\", sendFrameNotificationsReqBody);\n            const localVarPath = `/farcaster/frame/notifications`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sendFrameNotificationsReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Create a new mini app with a list of pages.\n         * @summary Create mini app\n         * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)\n         *\n         */ publishNeynarFrame: async (neynarFrameCreationReqBody, options = {})=>{\n            // verify required parameter 'neynarFrameCreationReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishNeynarFrame\", \"neynarFrameCreationReqBody\", neynarFrameCreationReqBody);\n            const localVarPath = `/farcaster/frame`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(neynarFrameCreationReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Search for mini apps based on a query string\n         * @summary Search mini apps\n         * @param {string} q Query string to search for mini apps\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-frames)\n         *\n         */ searchFrames: async (q, limit, cursor, options = {})=>{\n            // verify required parameter 'q' is not null or undefined\n            (0, common_1.assertParamExists)(\"searchFrames\", \"q\", q);\n            const localVarPath = `/farcaster/frame/search`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (q !== undefined) {\n                localVarQueryParameter[\"q\"] = q;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)\n         * @summary Update mini app\n         * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)\n         *\n         */ updateNeynarFrame: async (neynarFrameUpdateReqBody, options = {})=>{\n            // verify required parameter 'neynarFrameUpdateReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"updateNeynarFrame\", \"neynarFrameUpdateReqBody\", neynarFrameUpdateReqBody);\n            const localVarPath = `/farcaster/frame`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"PUT\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(neynarFrameUpdateReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Validates a mini app against by an interacting user against a Farcaster Hub \\\\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)\n         * @summary Validate mini app action\n         * @param {ValidateFrameActionReqBody} validateFrameActionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)\n         *\n         */ validateFrameAction: async (validateFrameActionReqBody, options = {})=>{\n            // verify required parameter 'validateFrameActionReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"validateFrameAction\", \"validateFrameActionReqBody\", validateFrameActionReqBody);\n            const localVarPath = `/farcaster/frame/validate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(validateFrameActionReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.FrameApiAxiosParamCreator = FrameApiAxiosParamCreator;\n/**\n * FrameApi - functional programming interface\n * @export\n */ const FrameApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.FrameApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Delete an existing mini app, if it was made by the developer (identified by API key)\n         * @summary Delete mini app\n         * @param {DeleteFrameReqBody} deleteFrameReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)\n         *\n         */ async deleteNeynarFrame (deleteFrameReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNeynarFrame(deleteFrameReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.deleteNeynarFrame\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * A curated list of featured mini apps\n         * @summary Mini apps catalog\n         * @param {number} [limit] Number of results to fetch  (Default: 100, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor\n         * @param {MiniAppTimeWindow} [timeWindow] Time window used to calculate the change in trending score for each mini app, used to sort mini app results\n         * @param {Array<FetchFrameCatalogCategoriesEnum>} [categories] Comma separated list of categories to include in the results.  Includes all if left blank.  Example: &#x60;categories&#x3D;games,social&#x60; OR: &#x60;categories&#x3D;games&amp;categories&#x3D;social&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object\n         *\n         */ async fetchFrameCatalog (limit, cursor, timeWindow, categories, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFrameCatalog(limit, cursor, timeWindow, categories, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.fetchFrameCatalog\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches the mini app meta tags from the URL\n         * @summary Meta tags from URL\n         * @param {string} url The mini app URL to crawl\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)\n         *\n         */ async fetchFrameMetaTagsFromUrl (url, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFrameMetaTagsFromUrl(url, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.fetchFrameMetaTagsFromUrl\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of mini apps made by the developer (identified by API key)\n         * @summary List of mini apps\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)\n         *\n         */ async fetchNeynarFrames (options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNeynarFrames(options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.fetchNeynarFrames\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of notifications tokens related to a mini app\n         * @summary List of mini app notification tokens\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [fids] Comma separated list of FIDs, up to 100 at a time. If you pass in FIDs, you will get back the notification tokens for those FIDs. If you don\\&#39;t pass in FIDs, you will get back all the notification tokens for the mini app.\n         * @param {string} [cursor] Pagination cursor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)\n         *\n         */ async fetchNotificationTokens (limit, fids, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNotificationTokens(limit, fids, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.fetchNotificationTokens\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user\n         * @summary Relevant mini apps\n         * @param {number} viewerFid FID of the user to fetch relevant mini apps for\n         * @param {MiniAppTimeWindow} [timeWindow] Time window used to limit statistics used to calculate mini app relevance\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)\n         *\n         */ async fetchRelevantFrames (viewerFid, timeWindow, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRelevantFrames(viewerFid, timeWindow, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.fetchRelevantFrames\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.\n         * @summary Analytics for the mini app\n         * @param {string} frameUrl\n         * @param {ValidateFrameAnalyticsType} analyticsType\n         * @param {string} start\n         * @param {string} stop\n         * @param {ValidateFrameAggregateWindow} [aggregateWindow] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)\n         *\n         */ async fetchValidateFrameAnalytics (frameUrl, analyticsType, start, stop, aggregateWindow, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchValidateFrameAnalytics(frameUrl, analyticsType, start, stop, aggregateWindow, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.fetchValidateFrameAnalytics\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of all the mini apps validated by a user\n         * @summary All mini apps validated by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)\n         *\n         */ async fetchValidateFrameList (options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchValidateFrameList(options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.fetchValidateFrameList\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Retrieves details about a transaction pay mini app by ID\n         * @summary Get transaction pay mini app\n         * @param {string} id ID of the transaction mini app to retrieve\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object\n         *\n         */ async getTransactionPayFrame (id, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionPayFrame(id, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.getTransactionPayFrame\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a mini app either by UUID or Neynar URL\n         * @summary Mini app by UUID or URL\n         * @param {FrameType} type\n         * @param {string} [uuid] UUID of the mini app to fetch\n         * @param {string} [url] URL of the Neynar mini app to fetch\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)\n         *\n         */ async lookupNeynarFrame (type, uuid, url, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupNeynarFrame(type, uuid, url, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.lookupNeynarFrame\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Post mini app actions, cast actions or cast composer actions to the server  \\\\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.\n         * @summary Post a mini app action, cast action or a cast composer action\n         * @param {FrameActionReqBody} frameActionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)\n         *\n         */ async postFrameAction (frameActionReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameAction(frameActionReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.postFrameAction\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.\n         * @summary Signature packet\n         * @param {FrameDeveloperManagedActionReqBody} frameDeveloperManagedActionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)\n         *\n         */ async postFrameActionDeveloperManaged (frameDeveloperManagedActionReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameActionDeveloperManaged(frameDeveloperManagedActionReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.postFrameActionDeveloperManaged\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Send notifications to interactors of a mini app\n         * @summary Send notifications\n         * @param {SendFrameNotificationsReqBody} sendFrameNotificationsReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)\n         *\n         */ async publishFrameNotifications (sendFrameNotificationsReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishFrameNotifications(sendFrameNotificationsReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.publishFrameNotifications\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a new mini app with a list of pages.\n         * @summary Create mini app\n         * @param {NeynarFrameCreationReqBody} neynarFrameCreationReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)\n         *\n         */ async publishNeynarFrame (neynarFrameCreationReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishNeynarFrame(neynarFrameCreationReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.publishNeynarFrame\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Search for mini apps based on a query string\n         * @summary Search mini apps\n         * @param {string} q Query string to search for mini apps\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-frames)\n         *\n         */ async searchFrames (q, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFrames(q, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.searchFrames\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)\n         * @summary Update mini app\n         * @param {NeynarFrameUpdateReqBody} neynarFrameUpdateReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)\n         *\n         */ async updateNeynarFrame (neynarFrameUpdateReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNeynarFrame(neynarFrameUpdateReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.updateNeynarFrame\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Validates a mini app against by an interacting user against a Farcaster Hub \\\\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)\n         * @summary Validate mini app action\n         * @param {ValidateFrameActionReqBody} validateFrameActionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)\n         *\n         */ async validateFrameAction (validateFrameActionReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrameAction(validateFrameActionReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FrameApi.validateFrameAction\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.FrameApiFp = FrameApiFp;\n/**\n * FrameApi - factory interface\n * @export\n */ const FrameApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.FrameApiFp)(configuration);\n    return {\n        /**\n         * Delete an existing mini app, if it was made by the developer (identified by API key)\n         * @summary Delete mini app\n         * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)\n         *\n         */ deleteNeynarFrame (requestParameters, options) {\n            return localVarFp.deleteNeynarFrame(requestParameters.deleteFrameReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * A curated list of featured mini apps\n         * @summary Mini apps catalog\n         * @param {FrameApiFetchFrameCatalogRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object\n         *\n         */ fetchFrameCatalog (requestParameters = {}, options) {\n            return localVarFp.fetchFrameCatalog(requestParameters.limit, requestParameters.cursor, requestParameters.timeWindow, requestParameters.categories, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches the mini app meta tags from the URL\n         * @summary Meta tags from URL\n         * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)\n         *\n         */ fetchFrameMetaTagsFromUrl (requestParameters, options) {\n            return localVarFp.fetchFrameMetaTagsFromUrl(requestParameters.url, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of mini apps made by the developer (identified by API key)\n         * @summary List of mini apps\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)\n         *\n         */ fetchNeynarFrames (options) {\n            return localVarFp.fetchNeynarFrames(options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of notifications tokens related to a mini app\n         * @summary List of mini app notification tokens\n         * @param {FrameApiFetchNotificationTokensRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)\n         *\n         */ fetchNotificationTokens (requestParameters = {}, options) {\n            return localVarFp.fetchNotificationTokens(requestParameters.limit, requestParameters.fids, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user\n         * @summary Relevant mini apps\n         * @param {FrameApiFetchRelevantFramesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)\n         *\n         */ fetchRelevantFrames (requestParameters, options) {\n            return localVarFp.fetchRelevantFrames(requestParameters.viewerFid, requestParameters.timeWindow, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.\n         * @summary Analytics for the mini app\n         * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)\n         *\n         */ fetchValidateFrameAnalytics (requestParameters, options) {\n            return localVarFp.fetchValidateFrameAnalytics(requestParameters.frameUrl, requestParameters.analyticsType, requestParameters.start, requestParameters.stop, requestParameters.aggregateWindow, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of all the mini apps validated by a user\n         * @summary All mini apps validated by user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)\n         *\n         */ fetchValidateFrameList (options) {\n            return localVarFp.fetchValidateFrameList(options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Retrieves details about a transaction pay mini app by ID\n         * @summary Get transaction pay mini app\n         * @param {FrameApiGetTransactionPayFrameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object\n         *\n         */ getTransactionPayFrame (requestParameters, options) {\n            return localVarFp.getTransactionPayFrame(requestParameters.id, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a mini app either by UUID or Neynar URL\n         * @summary Mini app by UUID or URL\n         * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)\n         *\n         */ lookupNeynarFrame (requestParameters, options) {\n            return localVarFp.lookupNeynarFrame(requestParameters.type, requestParameters.uuid, requestParameters.url, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Post mini app actions, cast actions or cast composer actions to the server  \\\\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.\n         * @summary Post a mini app action, cast action or a cast composer action\n         * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)\n         *\n         */ postFrameAction (requestParameters, options) {\n            return localVarFp.postFrameAction(requestParameters.frameActionReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.\n         * @summary Signature packet\n         * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)\n         *\n         */ postFrameActionDeveloperManaged (requestParameters, options) {\n            return localVarFp.postFrameActionDeveloperManaged(requestParameters.frameDeveloperManagedActionReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Send notifications to interactors of a mini app\n         * @summary Send notifications\n         * @param {FrameApiPublishFrameNotificationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)\n         *\n         */ publishFrameNotifications (requestParameters, options) {\n            return localVarFp.publishFrameNotifications(requestParameters.sendFrameNotificationsReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Create a new mini app with a list of pages.\n         * @summary Create mini app\n         * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)\n         *\n         */ publishNeynarFrame (requestParameters, options) {\n            return localVarFp.publishNeynarFrame(requestParameters.neynarFrameCreationReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Search for mini apps based on a query string\n         * @summary Search mini apps\n         * @param {FrameApiSearchFramesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-frames)\n         *\n         */ searchFrames (requestParameters, options) {\n            return localVarFp.searchFrames(requestParameters.q, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)\n         * @summary Update mini app\n         * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)\n         *\n         */ updateNeynarFrame (requestParameters, options) {\n            return localVarFp.updateNeynarFrame(requestParameters.neynarFrameUpdateReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Validates a mini app against by an interacting user against a Farcaster Hub \\\\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)\n         * @summary Validate mini app action\n         * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)\n         *\n         */ validateFrameAction (requestParameters, options) {\n            return localVarFp.validateFrameAction(requestParameters.validateFrameActionReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.FrameApiFactory = FrameApiFactory;\n/**\n * FrameApi - object-oriented interface\n * @export\n * @class FrameApi\n * @extends {BaseAPI}\n */ class FrameApi extends base_1.BaseAPI {\n    /**\n     * Delete an existing mini app, if it was made by the developer (identified by API key)\n     * @summary Delete mini app\n     * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)\n     *\n     */ deleteNeynarFrame(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).deleteNeynarFrame(requestParameters.deleteFrameReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * A curated list of featured mini apps\n     * @summary Mini apps catalog\n     * @param {FrameApiFetchFrameCatalogRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object\n     *\n     */ fetchFrameCatalog(requestParameters = {}, options) {\n        return (0, exports.FrameApiFp)(this.configuration).fetchFrameCatalog(requestParameters.limit, requestParameters.cursor, requestParameters.timeWindow, requestParameters.categories, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches the mini app meta tags from the URL\n     * @summary Meta tags from URL\n     * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)\n     *\n     */ fetchFrameMetaTagsFromUrl(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).fetchFrameMetaTagsFromUrl(requestParameters.url, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of mini apps made by the developer (identified by API key)\n     * @summary List of mini apps\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)\n     *\n     */ fetchNeynarFrames(options) {\n        return (0, exports.FrameApiFp)(this.configuration).fetchNeynarFrames(options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of notifications tokens related to a mini app\n     * @summary List of mini app notification tokens\n     * @param {FrameApiFetchNotificationTokensRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)\n     *\n     */ fetchNotificationTokens(requestParameters = {}, options) {\n        return (0, exports.FrameApiFp)(this.configuration).fetchNotificationTokens(requestParameters.limit, requestParameters.fids, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user\n     * @summary Relevant mini apps\n     * @param {FrameApiFetchRelevantFramesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)\n     *\n     */ fetchRelevantFrames(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).fetchRelevantFrames(requestParameters.viewerFid, requestParameters.timeWindow, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.\n     * @summary Analytics for the mini app\n     * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)\n     *\n     */ fetchValidateFrameAnalytics(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).fetchValidateFrameAnalytics(requestParameters.frameUrl, requestParameters.analyticsType, requestParameters.start, requestParameters.stop, requestParameters.aggregateWindow, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of all the mini apps validated by a user\n     * @summary All mini apps validated by user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)\n     *\n     */ fetchValidateFrameList(options) {\n        return (0, exports.FrameApiFp)(this.configuration).fetchValidateFrameList(options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Retrieves details about a transaction pay mini app by ID\n     * @summary Get transaction pay mini app\n     * @param {FrameApiGetTransactionPayFrameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object\n     *\n     */ getTransactionPayFrame(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).getTransactionPayFrame(requestParameters.id, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a mini app either by UUID or Neynar URL\n     * @summary Mini app by UUID or URL\n     * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)\n     *\n     */ lookupNeynarFrame(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).lookupNeynarFrame(requestParameters.type, requestParameters.uuid, requestParameters.url, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Post mini app actions, cast actions or cast composer actions to the server  \\\\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.\n     * @summary Post a mini app action, cast action or a cast composer action\n     * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)\n     *\n     */ postFrameAction(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).postFrameAction(requestParameters.frameActionReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.\n     * @summary Signature packet\n     * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)\n     *\n     */ postFrameActionDeveloperManaged(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).postFrameActionDeveloperManaged(requestParameters.frameDeveloperManagedActionReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Send notifications to interactors of a mini app\n     * @summary Send notifications\n     * @param {FrameApiPublishFrameNotificationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)\n     *\n     */ publishFrameNotifications(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).publishFrameNotifications(requestParameters.sendFrameNotificationsReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Create a new mini app with a list of pages.\n     * @summary Create mini app\n     * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)\n     *\n     */ publishNeynarFrame(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).publishNeynarFrame(requestParameters.neynarFrameCreationReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Search for mini apps based on a query string\n     * @summary Search mini apps\n     * @param {FrameApiSearchFramesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-frames)\n     *\n     */ searchFrames(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).searchFrames(requestParameters.q, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)\n     * @summary Update mini app\n     * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)\n     *\n     */ updateNeynarFrame(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).updateNeynarFrame(requestParameters.neynarFrameUpdateReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Validates a mini app against by an interacting user against a Farcaster Hub \\\\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)\n     * @summary Validate mini app action\n     * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FrameApi\n     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)\n     *\n     */ validateFrameAction(requestParameters, options) {\n        return (0, exports.FrameApiFp)(this.configuration).validateFrameAction(requestParameters.validateFrameActionReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.FrameApi = FrameApi;\n/**\n * @export\n */ exports.FetchFrameCatalogCategoriesEnum = {\n    Games: \"games\",\n    Social: \"social\",\n    Finance: \"finance\",\n    Utility: \"utility\",\n    Productivity: \"productivity\",\n    HealthFitness: \"health-fitness\",\n    NewsMedia: \"news-media\",\n    Music: \"music\",\n    Shopping: \"shopping\",\n    Education: \"education\",\n    DeveloperTools: \"developer-tools\",\n    Entertainment: \"entertainment\",\n    ArtCreativity: \"art-creativity\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/frame-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/login-api.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/login-api.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LoginApi = exports.LoginApiFactory = exports.LoginApiFp = exports.LoginApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * LoginApi - axios parameter creator\n * @export\n */ const LoginApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Nonce to sign a message\n         * @summary Fetch nonce\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NonceResponse>} A promise that resolves to a `NonceResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-nonce)\n         *\n         */ fetchNonce: async (options = {})=>{\n            const localVarPath = `/farcaster/login/nonce`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.LoginApiAxiosParamCreator = LoginApiAxiosParamCreator;\n/**\n * LoginApi - functional programming interface\n * @export\n */ const LoginApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.LoginApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Nonce to sign a message\n         * @summary Fetch nonce\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NonceResponse>} A promise that resolves to a `NonceResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-nonce)\n         *\n         */ async fetchNonce (options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNonce(options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"LoginApi.fetchNonce\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.LoginApiFp = LoginApiFp;\n/**\n * LoginApi - factory interface\n * @export\n */ const LoginApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.LoginApiFp)(configuration);\n    return {\n        /**\n         * Nonce to sign a message\n         * @summary Fetch nonce\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NonceResponse>} A promise that resolves to a `NonceResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-nonce)\n         *\n         */ fetchNonce (options) {\n            return localVarFp.fetchNonce(options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.LoginApiFactory = LoginApiFactory;\n/**\n * LoginApi - object-oriented interface\n * @export\n * @class LoginApi\n * @extends {BaseAPI}\n */ class LoginApi extends base_1.BaseAPI {\n    /**\n     * Nonce to sign a message\n     * @summary Fetch nonce\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LoginApi\n     * @returns {Promise<NonceResponse>} A promise that resolves to a `NonceResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-nonce)\n     *\n     */ fetchNonce(options) {\n        return (0, exports.LoginApiFp)(this.configuration).fetchNonce(options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.LoginApi = LoginApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/login-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/metrics-api.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/metrics-api.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FetchCastMetricsIntervalEnum = exports.MetricsApi = exports.MetricsApiFactory = exports.MetricsApiFp = exports.MetricsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * MetricsApi - axios parameter creator\n * @export\n */ const MetricsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetches metrics casts matching a query\n         * @summary Metrics for casts\n         * @param {string} q Query string to search for casts\n         * @param {FetchCastMetricsIntervalEnum} [interval] Interval of time for which to fetch metrics. Choices are &#x60;1d&#x60;, &#x60;7d&#x60;, &#x60;30d&#x60;\n         * @param {number} [authorFid] Fid of the user whose casts you want to search\n         * @param {string} [channelId] Channel ID of the casts you want to search\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsMetricsResponse>} A promise that resolves to a `CastsMetricsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-metrics)\n         *\n         */ fetchCastMetrics: async (q, interval, authorFid, channelId, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'q' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchCastMetrics\", \"q\", q);\n            const localVarPath = `/farcaster/cast/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (q !== undefined) {\n                localVarQueryParameter[\"q\"] = q;\n            }\n            if (interval !== undefined) {\n                localVarQueryParameter[\"interval\"] = interval;\n            }\n            if (authorFid !== undefined) {\n                localVarQueryParameter[\"author_fid\"] = authorFid;\n            }\n            if (channelId !== undefined) {\n                localVarQueryParameter[\"channel_id\"] = channelId;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.MetricsApiAxiosParamCreator = MetricsApiAxiosParamCreator;\n/**\n * MetricsApi - functional programming interface\n * @export\n */ const MetricsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.MetricsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetches metrics casts matching a query\n         * @summary Metrics for casts\n         * @param {string} q Query string to search for casts\n         * @param {FetchCastMetricsIntervalEnum} [interval] Interval of time for which to fetch metrics. Choices are &#x60;1d&#x60;, &#x60;7d&#x60;, &#x60;30d&#x60;\n         * @param {number} [authorFid] Fid of the user whose casts you want to search\n         * @param {string} [channelId] Channel ID of the casts you want to search\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsMetricsResponse>} A promise that resolves to a `CastsMetricsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-metrics)\n         *\n         */ async fetchCastMetrics (q, interval, authorFid, channelId, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastMetrics(q, interval, authorFid, channelId, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"MetricsApi.fetchCastMetrics\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.MetricsApiFp = MetricsApiFp;\n/**\n * MetricsApi - factory interface\n * @export\n */ const MetricsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.MetricsApiFp)(configuration);\n    return {\n        /**\n         * Fetches metrics casts matching a query\n         * @summary Metrics for casts\n         * @param {MetricsApiFetchCastMetricsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastsMetricsResponse>} A promise that resolves to a `CastsMetricsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-metrics)\n         *\n         */ fetchCastMetrics (requestParameters, options) {\n            return localVarFp.fetchCastMetrics(requestParameters.q, requestParameters.interval, requestParameters.authorFid, requestParameters.channelId, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.MetricsApiFactory = MetricsApiFactory;\n/**\n * MetricsApi - object-oriented interface\n * @export\n * @class MetricsApi\n * @extends {BaseAPI}\n */ class MetricsApi extends base_1.BaseAPI {\n    /**\n     * Fetches metrics casts matching a query\n     * @summary Metrics for casts\n     * @param {MetricsApiFetchCastMetricsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetricsApi\n     * @returns {Promise<CastsMetricsResponse>} A promise that resolves to a `CastsMetricsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-metrics)\n     *\n     */ fetchCastMetrics(requestParameters, options) {\n        return (0, exports.MetricsApiFp)(this.configuration).fetchCastMetrics(requestParameters.q, requestParameters.interval, requestParameters.authorFid, requestParameters.channelId, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.MetricsApi = MetricsApi;\n/**\n * @export\n */ exports.FetchCastMetricsIntervalEnum = {\n    _1d: \"1d\",\n    _7d: \"7d\",\n    _30d: \"30d\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/metrics-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/mute-api.js":
/*!********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/mute-api.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MuteApi = exports.MuteApiFactory = exports.MuteApiFp = exports.MuteApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * MuteApi - axios parameter creator\n * @export\n */ const MuteApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Deletes a mute for a given FID. This is an allowlisted API, reach out if you want access.\n         * @summary Unmute FID\n         * @param {MuteReqBody} muteReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-mute)\n         *\n         */ deleteMute: async (muteReqBody, options = {})=>{\n            // verify required parameter 'muteReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"deleteMute\", \"muteReqBody\", muteReqBody);\n            const localVarPath = `/farcaster/mute`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(muteReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches all FIDs that a user has muted.\n         * @summary Muted FIDs of user\n         * @param {number} fid The user\\&#39;s FID (identifier)\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteListResponse>} A promise that resolves to a `MuteListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-mute-list)\n         *\n         */ fetchMuteList: async (fid, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchMuteList\", \"fid\", fid);\n            const localVarPath = `/farcaster/mute/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Adds a mute for a given FID. This is an allowlisted API, reach out if you want access.\n         * @summary Mute FID\n         * @param {MuteReqBody} muteReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-mute)\n         *\n         */ publishMute: async (muteReqBody, options = {})=>{\n            // verify required parameter 'muteReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishMute\", \"muteReqBody\", muteReqBody);\n            const localVarPath = `/farcaster/mute`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(muteReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.MuteApiAxiosParamCreator = MuteApiAxiosParamCreator;\n/**\n * MuteApi - functional programming interface\n * @export\n */ const MuteApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.MuteApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Deletes a mute for a given FID. This is an allowlisted API, reach out if you want access.\n         * @summary Unmute FID\n         * @param {MuteReqBody} muteReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-mute)\n         *\n         */ async deleteMute (muteReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMute(muteReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"MuteApi.deleteMute\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches all FIDs that a user has muted.\n         * @summary Muted FIDs of user\n         * @param {number} fid The user\\&#39;s FID (identifier)\n         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteListResponse>} A promise that resolves to a `MuteListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-mute-list)\n         *\n         */ async fetchMuteList (fid, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMuteList(fid, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"MuteApi.fetchMuteList\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Adds a mute for a given FID. This is an allowlisted API, reach out if you want access.\n         * @summary Mute FID\n         * @param {MuteReqBody} muteReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-mute)\n         *\n         */ async publishMute (muteReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishMute(muteReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"MuteApi.publishMute\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.MuteApiFp = MuteApiFp;\n/**\n * MuteApi - factory interface\n * @export\n */ const MuteApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.MuteApiFp)(configuration);\n    return {\n        /**\n         * Deletes a mute for a given FID. This is an allowlisted API, reach out if you want access.\n         * @summary Unmute FID\n         * @param {MuteApiDeleteMuteRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-mute)\n         *\n         */ deleteMute (requestParameters, options) {\n            return localVarFp.deleteMute(requestParameters.muteReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches all FIDs that a user has muted.\n         * @summary Muted FIDs of user\n         * @param {MuteApiFetchMuteListRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteListResponse>} A promise that resolves to a `MuteListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-mute-list)\n         *\n         */ fetchMuteList (requestParameters, options) {\n            return localVarFp.fetchMuteList(requestParameters.fid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Adds a mute for a given FID. This is an allowlisted API, reach out if you want access.\n         * @summary Mute FID\n         * @param {MuteApiPublishMuteRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-mute)\n         *\n         */ publishMute (requestParameters, options) {\n            return localVarFp.publishMute(requestParameters.muteReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.MuteApiFactory = MuteApiFactory;\n/**\n * MuteApi - object-oriented interface\n * @export\n * @class MuteApi\n * @extends {BaseAPI}\n */ class MuteApi extends base_1.BaseAPI {\n    /**\n     * Deletes a mute for a given FID. This is an allowlisted API, reach out if you want access.\n     * @summary Unmute FID\n     * @param {MuteApiDeleteMuteRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MuteApi\n     * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-mute)\n     *\n     */ deleteMute(requestParameters, options) {\n        return (0, exports.MuteApiFp)(this.configuration).deleteMute(requestParameters.muteReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches all FIDs that a user has muted.\n     * @summary Muted FIDs of user\n     * @param {MuteApiFetchMuteListRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MuteApi\n     * @returns {Promise<MuteListResponse>} A promise that resolves to a `MuteListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-mute-list)\n     *\n     */ fetchMuteList(requestParameters, options) {\n        return (0, exports.MuteApiFp)(this.configuration).fetchMuteList(requestParameters.fid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Adds a mute for a given FID. This is an allowlisted API, reach out if you want access.\n     * @summary Mute FID\n     * @param {MuteApiPublishMuteRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MuteApi\n     * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-mute)\n     *\n     */ publishMute(requestParameters, options) {\n        return (0, exports.MuteApiFp)(this.configuration).publishMute(requestParameters.muteReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.MuteApi = MuteApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/mute-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/notifications-api.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/notifications-api.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NotificationsApi = exports.NotificationsApiFactory = exports.NotificationsApiFp = exports.NotificationsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * NotificationsApi - axios parameter creator\n * @export\n */ const NotificationsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Returns a list of notifications for a specific FID.\n         * @summary For user\n         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\\&#39;s mutes and blocks.\n         * @param {Array<NotificationType>} [type] Notification type to fetch. Comma separated values of follows, recasts, likes, mentions, replies.\n         * @param {boolean} [priorityMode] When true, only returns notifications from power badge users and users that the user follows.\n         * @param {number} [limit] Number of results to fetch  (Default: 15, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)\n         *\n         */ fetchAllNotifications: async (fid, type, priorityMode, limit, cursor, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchAllNotifications\", \"fid\", fid);\n            const localVarPath = `/farcaster/notifications`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (type) {\n                localVarQueryParameter[\"type\"] = type.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (priorityMode !== undefined) {\n                localVarQueryParameter[\"priority_mode\"] = priorityMode;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of notifications for a user in specific channels\n         * @summary For user by channel\n         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\\&#39;s mutes and blocks.\n         * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)\n         * @param {boolean} [priorityMode] When true, only returns notifications from power badge users and users that the user follows.\n         * @param {number} [limit] Number of results to fetch  (Default: 15, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)\n         *\n         */ fetchChannelNotificationsForUser: async (fid, channelIds, priorityMode, limit, cursor, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchChannelNotificationsForUser\", \"fid\", fid);\n            // verify required parameter 'channelIds' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchChannelNotificationsForUser\", \"channelIds\", channelIds);\n            const localVarPath = `/farcaster/notifications/channel`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (channelIds !== undefined) {\n                localVarQueryParameter[\"channel_ids\"] = channelIds;\n            }\n            if (priorityMode !== undefined) {\n                localVarQueryParameter[\"priority_mode\"] = priorityMode;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Returns a list of notifications for a user in specific parent_urls\n         * @summary For user by parent_urls\n         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\\&#39;s mutes and blocks.\n         * @param {string} parentUrls Comma separated parent_urls\n         * @param {boolean} [priorityMode] When true, only returns notifications from power badge users and users that the user follows.\n         * @param {number} [limit] Number of results to fetch  (Default: 15, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)\n         *\n         */ fetchNotificationsByParentUrlForUser: async (fid, parentUrls, priorityMode, limit, cursor, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchNotificationsByParentUrlForUser\", \"fid\", fid);\n            // verify required parameter 'parentUrls' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchNotificationsByParentUrlForUser\", \"parentUrls\", parentUrls);\n            const localVarPath = `/farcaster/notifications/parent_url`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (parentUrls !== undefined) {\n                localVarQueryParameter[\"parent_urls\"] = parentUrls;\n            }\n            if (priorityMode !== undefined) {\n                localVarQueryParameter[\"priority_mode\"] = priorityMode;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Mark notifications as seen. You can choose one of two authorization methods, either:   1. Provide a valid signer_uuid in the request body (Most common)   2. Provide a valid, signed \\\"Bearer\\\" token in the request\\'s `Authorization` header similar to the      approach described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication)\n         * @summary Mark as seen\n         * @param {MarkNotificationsAsSeenReqBody} markNotificationsAsSeenReqBody\n         * @param {string} [authorization] Optional Bearer token for certain endpoints. The token format is described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)\n         *\n         */ markNotificationsAsSeen: async (markNotificationsAsSeenReqBody, authorization, options = {})=>{\n            // verify required parameter 'markNotificationsAsSeenReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"markNotificationsAsSeen\", \"markNotificationsAsSeenReqBody\", markNotificationsAsSeenReqBody);\n            const localVarPath = `/farcaster/notifications/seen`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (authorization != null) {\n                localVarHeaderParameter[\"Authorization\"] = String(authorization);\n            }\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(markNotificationsAsSeenReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.NotificationsApiAxiosParamCreator = NotificationsApiAxiosParamCreator;\n/**\n * NotificationsApi - functional programming interface\n * @export\n */ const NotificationsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.NotificationsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Returns a list of notifications for a specific FID.\n         * @summary For user\n         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\\&#39;s mutes and blocks.\n         * @param {Array<NotificationType>} [type] Notification type to fetch. Comma separated values of follows, recasts, likes, mentions, replies.\n         * @param {boolean} [priorityMode] When true, only returns notifications from power badge users and users that the user follows.\n         * @param {number} [limit] Number of results to fetch  (Default: 15, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)\n         *\n         */ async fetchAllNotifications (fid, type, priorityMode, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAllNotifications(fid, type, priorityMode, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"NotificationsApi.fetchAllNotifications\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of notifications for a user in specific channels\n         * @summary For user by channel\n         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\\&#39;s mutes and blocks.\n         * @param {string} channelIds Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)\n         * @param {boolean} [priorityMode] When true, only returns notifications from power badge users and users that the user follows.\n         * @param {number} [limit] Number of results to fetch  (Default: 15, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)\n         *\n         */ async fetchChannelNotificationsForUser (fid, channelIds, priorityMode, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchChannelNotificationsForUser(fid, channelIds, priorityMode, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"NotificationsApi.fetchChannelNotificationsForUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Returns a list of notifications for a user in specific parent_urls\n         * @summary For user by parent_urls\n         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\\&#39;s mutes and blocks.\n         * @param {string} parentUrls Comma separated parent_urls\n         * @param {boolean} [priorityMode] When true, only returns notifications from power badge users and users that the user follows.\n         * @param {number} [limit] Number of results to fetch  (Default: 15, Maximum: 25)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)\n         *\n         */ async fetchNotificationsByParentUrlForUser (fid, parentUrls, priorityMode, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNotificationsByParentUrlForUser(fid, parentUrls, priorityMode, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"NotificationsApi.fetchNotificationsByParentUrlForUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Mark notifications as seen. You can choose one of two authorization methods, either:   1. Provide a valid signer_uuid in the request body (Most common)   2. Provide a valid, signed \\\"Bearer\\\" token in the request\\'s `Authorization` header similar to the      approach described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication)\n         * @summary Mark as seen\n         * @param {MarkNotificationsAsSeenReqBody} markNotificationsAsSeenReqBody\n         * @param {string} [authorization] Optional Bearer token for certain endpoints. The token format is described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)\n         *\n         */ async markNotificationsAsSeen (markNotificationsAsSeenReqBody, authorization, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.markNotificationsAsSeen(markNotificationsAsSeenReqBody, authorization, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"NotificationsApi.markNotificationsAsSeen\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.NotificationsApiFp = NotificationsApiFp;\n/**\n * NotificationsApi - factory interface\n * @export\n */ const NotificationsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.NotificationsApiFp)(configuration);\n    return {\n        /**\n         * Returns a list of notifications for a specific FID.\n         * @summary For user\n         * @param {NotificationsApiFetchAllNotificationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)\n         *\n         */ fetchAllNotifications (requestParameters, options) {\n            return localVarFp.fetchAllNotifications(requestParameters.fid, requestParameters.type, requestParameters.priorityMode, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of notifications for a user in specific channels\n         * @summary For user by channel\n         * @param {NotificationsApiFetchChannelNotificationsForUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)\n         *\n         */ fetchChannelNotificationsForUser (requestParameters, options) {\n            return localVarFp.fetchChannelNotificationsForUser(requestParameters.fid, requestParameters.channelIds, requestParameters.priorityMode, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Returns a list of notifications for a user in specific parent_urls\n         * @summary For user by parent_urls\n         * @param {NotificationsApiFetchNotificationsByParentUrlForUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)\n         *\n         */ fetchNotificationsByParentUrlForUser (requestParameters, options) {\n            return localVarFp.fetchNotificationsByParentUrlForUser(requestParameters.fid, requestParameters.parentUrls, requestParameters.priorityMode, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Mark notifications as seen. You can choose one of two authorization methods, either:   1. Provide a valid signer_uuid in the request body (Most common)   2. Provide a valid, signed \\\"Bearer\\\" token in the request\\'s `Authorization` header similar to the      approach described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication)\n         * @summary Mark as seen\n         * @param {NotificationsApiMarkNotificationsAsSeenRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)\n         *\n         */ markNotificationsAsSeen (requestParameters, options) {\n            return localVarFp.markNotificationsAsSeen(requestParameters.markNotificationsAsSeenReqBody, requestParameters.authorization, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.NotificationsApiFactory = NotificationsApiFactory;\n/**\n * NotificationsApi - object-oriented interface\n * @export\n * @class NotificationsApi\n * @extends {BaseAPI}\n */ class NotificationsApi extends base_1.BaseAPI {\n    /**\n     * Returns a list of notifications for a specific FID.\n     * @summary For user\n     * @param {NotificationsApiFetchAllNotificationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NotificationsApi\n     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)\n     *\n     */ fetchAllNotifications(requestParameters, options) {\n        return (0, exports.NotificationsApiFp)(this.configuration).fetchAllNotifications(requestParameters.fid, requestParameters.type, requestParameters.priorityMode, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of notifications for a user in specific channels\n     * @summary For user by channel\n     * @param {NotificationsApiFetchChannelNotificationsForUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NotificationsApi\n     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)\n     *\n     */ fetchChannelNotificationsForUser(requestParameters, options) {\n        return (0, exports.NotificationsApiFp)(this.configuration).fetchChannelNotificationsForUser(requestParameters.fid, requestParameters.channelIds, requestParameters.priorityMode, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Returns a list of notifications for a user in specific parent_urls\n     * @summary For user by parent_urls\n     * @param {NotificationsApiFetchNotificationsByParentUrlForUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NotificationsApi\n     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)\n     *\n     */ fetchNotificationsByParentUrlForUser(requestParameters, options) {\n        return (0, exports.NotificationsApiFp)(this.configuration).fetchNotificationsByParentUrlForUser(requestParameters.fid, requestParameters.parentUrls, requestParameters.priorityMode, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Mark notifications as seen. You can choose one of two authorization methods, either:   1. Provide a valid signer_uuid in the request body (Most common)   2. Provide a valid, signed \\\"Bearer\\\" token in the request\\'s `Authorization` header similar to the      approach described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication)\n     * @summary Mark as seen\n     * @param {NotificationsApiMarkNotificationsAsSeenRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NotificationsApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)\n     *\n     */ markNotificationsAsSeen(requestParameters, options) {\n        return (0, exports.NotificationsApiFp)(this.configuration).markNotificationsAsSeen(requestParameters.markNotificationsAsSeenReqBody, requestParameters.authorization, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.NotificationsApi = NotificationsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/notifications-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/onchain-api.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/onchain-api.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DeployFungibleFactoryEnum = exports.DeployFungibleNetworkEnum = exports.DeployFungibleMetadataNsfwEnum = exports.OnchainApi = exports.OnchainApiFactory = exports.OnchainApiFp = exports.OnchainApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * OnchainApi - axios parameter creator\n * @export\n */ const OnchainApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Creates a new token. This is an allowlisted API, reach out if you want access.\n         * @summary Deploy fungible\n         * @param {string} owner Ethereum address of the one who is creating the token\n         * @param {string} symbol Symbol/Ticker for the token\n         * @param {string} name Name of the token\n         * @param {File} [metadataMedia] Media file associated with the token.  Supported formats are image/jpeg, image/gif and image/png\n         * @param {string} [metadataDescription] Description of the token\n         * @param {DeployFungibleMetadataNsfwEnum} [metadataNsfw] Indicates if the token is NSFW (Not Safe For Work).\n         * @param {string} [metadataWebsiteLink] Website link related to the token\n         * @param {string} [metadataTwitter] Twitter profile link\n         * @param {string} [metadataDiscord] Discord server link\n         * @param {string} [metadataTelegram] Telegram link\n         * @param {DeployFungibleNetworkEnum} [network] Network/Chain name\n         * @param {DeployFungibleFactoryEnum} [factory] Factory name - wow -&gt; [wow.xyz](https://wow.xyz) - clanker -&gt; [clanker.world](https://www.clanker.world)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeployFungibleResponse>} A promise that resolves to a `DeployFungibleResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/deploy-fungible)\n         *\n         */ deployFungible: async (owner, symbol, name, metadataMedia, metadataDescription, metadataNsfw, metadataWebsiteLink, metadataTwitter, metadataDiscord, metadataTelegram, network, factory, options = {})=>{\n            // verify required parameter 'owner' is not null or undefined\n            (0, common_1.assertParamExists)(\"deployFungible\", \"owner\", owner);\n            // verify required parameter 'symbol' is not null or undefined\n            (0, common_1.assertParamExists)(\"deployFungible\", \"symbol\", symbol);\n            // verify required parameter 'name' is not null or undefined\n            (0, common_1.assertParamExists)(\"deployFungible\", \"name\", name);\n            const localVarPath = `/fungible`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (owner !== undefined) {\n                localVarFormParams.append(\"owner\", owner);\n            }\n            if (symbol !== undefined) {\n                localVarFormParams.append(\"symbol\", symbol);\n            }\n            if (name !== undefined) {\n                localVarFormParams.append(\"name\", name);\n            }\n            if (metadataMedia !== undefined) {\n                localVarFormParams.append(\"metadata[media]\", metadataMedia);\n            }\n            if (metadataDescription !== undefined) {\n                localVarFormParams.append(\"metadata[description]\", metadataDescription);\n            }\n            if (metadataNsfw !== undefined) {\n                localVarFormParams.append(\"metadata[nsfw]\", metadataNsfw);\n            }\n            if (metadataWebsiteLink !== undefined) {\n                localVarFormParams.append(\"metadata[website_link]\", metadataWebsiteLink);\n            }\n            if (metadataTwitter !== undefined) {\n                localVarFormParams.append(\"metadata[twitter]\", metadataTwitter);\n            }\n            if (metadataDiscord !== undefined) {\n                localVarFormParams.append(\"metadata[discord]\", metadataDiscord);\n            }\n            if (metadataTelegram !== undefined) {\n                localVarFormParams.append(\"metadata[telegram]\", metadataTelegram);\n            }\n            if (network !== undefined) {\n                localVarFormParams.append(\"network\", network);\n            }\n            if (factory !== undefined) {\n                localVarFormParams.append(\"factory\", factory);\n            }\n            localVarHeaderParameter[\"Content-Type\"] = \"multipart/form-data\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \\\"X, Y, Z and N others you know own this asset\\\".\n         * @summary Relevant owners\n         * @param {string} contractAddress Contract address of the fungible asset\n         * @param {FungibleOwnerRelevantNetwork} network Network of the fungible asset.\n         * @param {number} [viewerFid] If you provide a viewer_fid, the response will include token holders from the user\\&#39;s network, respecting their mutes and blocks and including viewer_context; if not provided, the response will show top token holders across the network—both sets can be combined to generate a longer list if desired.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)\n         *\n         */ fetchRelevantFungibleOwners: async (contractAddress, network, viewerFid, options = {})=>{\n            // verify required parameter 'contractAddress' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchRelevantFungibleOwners\", \"contractAddress\", contractAddress);\n            // verify required parameter 'network' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchRelevantFungibleOwners\", \"network\", network);\n            const localVarPath = `/farcaster/fungible/owner/relevant`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (contractAddress !== undefined) {\n                localVarQueryParameter[\"contract_address\"] = contractAddress;\n            }\n            if (network !== undefined) {\n                localVarQueryParameter[\"network\"] = network;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches the token balances of a user given their FID\n         * @summary Token balance\n         * @param {number} fid FID of the user to fetch\n         * @param {Array<Network>} networks Comma separated list of networks to fetch balances for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)\n         *\n         */ fetchUserBalance: async (fid, networks, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserBalance\", \"fid\", fid);\n            // verify required parameter 'networks' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserBalance\", \"networks\", networks);\n            const localVarPath = `/farcaster/user/balance`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (networks) {\n                localVarQueryParameter[\"networks\"] = networks.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Register a new farcaster account onchain. Optionally you can pass in signers along to register a new account and create multiple signers in a single transaction\n         * @summary Register Farcaster account onchain\n         * @param {RegisterUserOnChainReqBody} registerUserOnChainReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RegisterUserOnChainResponse>} A promise that resolves to a `RegisterUserOnChainResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account-onchain)\n         *\n         */ registerAccountOnchain: async (registerUserOnChainReqBody, options = {})=>{\n            // verify required parameter 'registerUserOnChainReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"registerAccountOnchain\", \"registerUserOnChainReqBody\", registerUserOnChainReqBody);\n            const localVarPath = `/farcaster/user/register`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(registerUserOnChainReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Send fungibles in bulk to several farcaster users. A funded wallet is to required use this API. React out to us on the Neynar channel on farcaster to get your wallet address.\n         * @summary Send fungibles\n         * @param {string} xWalletId Wallet ID to use for transactions\n         * @param {TransactionSendFungiblesRequest} transactionSendFungiblesRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionSendFungiblesResponse>} A promise that resolves to a `TransactionSendFungiblesResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/send-fungibles-to-users)\n         *\n         */ sendFungiblesToUsers: async (xWalletId, transactionSendFungiblesRequest, options = {})=>{\n            // verify required parameter 'xWalletId' is not null or undefined\n            (0, common_1.assertParamExists)(\"sendFungiblesToUsers\", \"xWalletId\", xWalletId);\n            // verify required parameter 'transactionSendFungiblesRequest' is not null or undefined\n            (0, common_1.assertParamExists)(\"sendFungiblesToUsers\", \"transactionSendFungiblesRequest\", transactionSendFungiblesRequest);\n            const localVarPath = `/farcaster/fungible/send`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (xWalletId != null) {\n                localVarHeaderParameter[\"x-wallet-id\"] = String(xWalletId);\n            }\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transactionSendFungiblesRequest, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.OnchainApiAxiosParamCreator = OnchainApiAxiosParamCreator;\n/**\n * OnchainApi - functional programming interface\n * @export\n */ const OnchainApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.OnchainApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Creates a new token. This is an allowlisted API, reach out if you want access.\n         * @summary Deploy fungible\n         * @param {string} owner Ethereum address of the one who is creating the token\n         * @param {string} symbol Symbol/Ticker for the token\n         * @param {string} name Name of the token\n         * @param {File} [metadataMedia] Media file associated with the token.  Supported formats are image/jpeg, image/gif and image/png\n         * @param {string} [metadataDescription] Description of the token\n         * @param {DeployFungibleMetadataNsfwEnum} [metadataNsfw] Indicates if the token is NSFW (Not Safe For Work).\n         * @param {string} [metadataWebsiteLink] Website link related to the token\n         * @param {string} [metadataTwitter] Twitter profile link\n         * @param {string} [metadataDiscord] Discord server link\n         * @param {string} [metadataTelegram] Telegram link\n         * @param {DeployFungibleNetworkEnum} [network] Network/Chain name\n         * @param {DeployFungibleFactoryEnum} [factory] Factory name - wow -&gt; [wow.xyz](https://wow.xyz) - clanker -&gt; [clanker.world](https://www.clanker.world)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeployFungibleResponse>} A promise that resolves to a `DeployFungibleResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/deploy-fungible)\n         *\n         */ async deployFungible (owner, symbol, name, metadataMedia, metadataDescription, metadataNsfw, metadataWebsiteLink, metadataTwitter, metadataDiscord, metadataTelegram, network, factory, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deployFungible(owner, symbol, name, metadataMedia, metadataDescription, metadataNsfw, metadataWebsiteLink, metadataTwitter, metadataDiscord, metadataTelegram, network, factory, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"OnchainApi.deployFungible\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \\\"X, Y, Z and N others you know own this asset\\\".\n         * @summary Relevant owners\n         * @param {string} contractAddress Contract address of the fungible asset\n         * @param {FungibleOwnerRelevantNetwork} network Network of the fungible asset.\n         * @param {number} [viewerFid] If you provide a viewer_fid, the response will include token holders from the user\\&#39;s network, respecting their mutes and blocks and including viewer_context; if not provided, the response will show top token holders across the network—both sets can be combined to generate a longer list if desired.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)\n         *\n         */ async fetchRelevantFungibleOwners (contractAddress, network, viewerFid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRelevantFungibleOwners(contractAddress, network, viewerFid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"OnchainApi.fetchRelevantFungibleOwners\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches the token balances of a user given their FID\n         * @summary Token balance\n         * @param {number} fid FID of the user to fetch\n         * @param {Array<Network>} networks Comma separated list of networks to fetch balances for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)\n         *\n         */ async fetchUserBalance (fid, networks, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserBalance(fid, networks, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"OnchainApi.fetchUserBalance\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Register a new farcaster account onchain. Optionally you can pass in signers along to register a new account and create multiple signers in a single transaction\n         * @summary Register Farcaster account onchain\n         * @param {RegisterUserOnChainReqBody} registerUserOnChainReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RegisterUserOnChainResponse>} A promise that resolves to a `RegisterUserOnChainResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account-onchain)\n         *\n         */ async registerAccountOnchain (registerUserOnChainReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAccountOnchain(registerUserOnChainReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"OnchainApi.registerAccountOnchain\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Send fungibles in bulk to several farcaster users. A funded wallet is to required use this API. React out to us on the Neynar channel on farcaster to get your wallet address.\n         * @summary Send fungibles\n         * @param {string} xWalletId Wallet ID to use for transactions\n         * @param {TransactionSendFungiblesRequest} transactionSendFungiblesRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionSendFungiblesResponse>} A promise that resolves to a `TransactionSendFungiblesResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/send-fungibles-to-users)\n         *\n         */ async sendFungiblesToUsers (xWalletId, transactionSendFungiblesRequest, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sendFungiblesToUsers(xWalletId, transactionSendFungiblesRequest, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"OnchainApi.sendFungiblesToUsers\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.OnchainApiFp = OnchainApiFp;\n/**\n * OnchainApi - factory interface\n * @export\n */ const OnchainApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.OnchainApiFp)(configuration);\n    return {\n        /**\n         * Creates a new token. This is an allowlisted API, reach out if you want access.\n         * @summary Deploy fungible\n         * @param {OnchainApiDeployFungibleRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeployFungibleResponse>} A promise that resolves to a `DeployFungibleResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/deploy-fungible)\n         *\n         */ deployFungible (requestParameters, options) {\n            return localVarFp.deployFungible(requestParameters.owner, requestParameters.symbol, requestParameters.name, requestParameters.metadataMedia, requestParameters.metadataDescription, requestParameters.metadataNsfw, requestParameters.metadataWebsiteLink, requestParameters.metadataTwitter, requestParameters.metadataDiscord, requestParameters.metadataTelegram, requestParameters.network, requestParameters.factory, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \\\"X, Y, Z and N others you know own this asset\\\".\n         * @summary Relevant owners\n         * @param {OnchainApiFetchRelevantFungibleOwnersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)\n         *\n         */ fetchRelevantFungibleOwners (requestParameters, options) {\n            return localVarFp.fetchRelevantFungibleOwners(requestParameters.contractAddress, requestParameters.network, requestParameters.viewerFid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches the token balances of a user given their FID\n         * @summary Token balance\n         * @param {OnchainApiFetchUserBalanceRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)\n         *\n         */ fetchUserBalance (requestParameters, options) {\n            return localVarFp.fetchUserBalance(requestParameters.fid, requestParameters.networks, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Register a new farcaster account onchain. Optionally you can pass in signers along to register a new account and create multiple signers in a single transaction\n         * @summary Register Farcaster account onchain\n         * @param {OnchainApiRegisterAccountOnchainRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RegisterUserOnChainResponse>} A promise that resolves to a `RegisterUserOnChainResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account-onchain)\n         *\n         */ registerAccountOnchain (requestParameters, options) {\n            return localVarFp.registerAccountOnchain(requestParameters.registerUserOnChainReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Send fungibles in bulk to several farcaster users. A funded wallet is to required use this API. React out to us on the Neynar channel on farcaster to get your wallet address.\n         * @summary Send fungibles\n         * @param {OnchainApiSendFungiblesToUsersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<TransactionSendFungiblesResponse>} A promise that resolves to a `TransactionSendFungiblesResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/send-fungibles-to-users)\n         *\n         */ sendFungiblesToUsers (requestParameters, options) {\n            return localVarFp.sendFungiblesToUsers(requestParameters.xWalletId, requestParameters.transactionSendFungiblesRequest, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.OnchainApiFactory = OnchainApiFactory;\n/**\n * OnchainApi - object-oriented interface\n * @export\n * @class OnchainApi\n * @extends {BaseAPI}\n */ class OnchainApi extends base_1.BaseAPI {\n    /**\n     * Creates a new token. This is an allowlisted API, reach out if you want access.\n     * @summary Deploy fungible\n     * @param {OnchainApiDeployFungibleRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnchainApi\n     * @returns {Promise<DeployFungibleResponse>} A promise that resolves to a `DeployFungibleResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/deploy-fungible)\n     *\n     */ deployFungible(requestParameters, options) {\n        return (0, exports.OnchainApiFp)(this.configuration).deployFungible(requestParameters.owner, requestParameters.symbol, requestParameters.name, requestParameters.metadataMedia, requestParameters.metadataDescription, requestParameters.metadataNsfw, requestParameters.metadataWebsiteLink, requestParameters.metadataTwitter, requestParameters.metadataDiscord, requestParameters.metadataTelegram, requestParameters.network, requestParameters.factory, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \\\"X, Y, Z and N others you know own this asset\\\".\n     * @summary Relevant owners\n     * @param {OnchainApiFetchRelevantFungibleOwnersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnchainApi\n     * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)\n     *\n     */ fetchRelevantFungibleOwners(requestParameters, options) {\n        return (0, exports.OnchainApiFp)(this.configuration).fetchRelevantFungibleOwners(requestParameters.contractAddress, requestParameters.network, requestParameters.viewerFid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches the token balances of a user given their FID\n     * @summary Token balance\n     * @param {OnchainApiFetchUserBalanceRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnchainApi\n     * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)\n     *\n     */ fetchUserBalance(requestParameters, options) {\n        return (0, exports.OnchainApiFp)(this.configuration).fetchUserBalance(requestParameters.fid, requestParameters.networks, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Register a new farcaster account onchain. Optionally you can pass in signers along to register a new account and create multiple signers in a single transaction\n     * @summary Register Farcaster account onchain\n     * @param {OnchainApiRegisterAccountOnchainRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnchainApi\n     * @returns {Promise<RegisterUserOnChainResponse>} A promise that resolves to a `RegisterUserOnChainResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account-onchain)\n     *\n     */ registerAccountOnchain(requestParameters, options) {\n        return (0, exports.OnchainApiFp)(this.configuration).registerAccountOnchain(requestParameters.registerUserOnChainReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Send fungibles in bulk to several farcaster users. A funded wallet is to required use this API. React out to us on the Neynar channel on farcaster to get your wallet address.\n     * @summary Send fungibles\n     * @param {OnchainApiSendFungiblesToUsersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnchainApi\n     * @returns {Promise<TransactionSendFungiblesResponse>} A promise that resolves to a `TransactionSendFungiblesResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/send-fungibles-to-users)\n     *\n     */ sendFungiblesToUsers(requestParameters, options) {\n        return (0, exports.OnchainApiFp)(this.configuration).sendFungiblesToUsers(requestParameters.xWalletId, requestParameters.transactionSendFungiblesRequest, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.OnchainApi = OnchainApi;\n/**\n * @export\n */ exports.DeployFungibleMetadataNsfwEnum = {\n    True: \"true\",\n    False: \"false\"\n};\n/**\n * @export\n */ exports.DeployFungibleNetworkEnum = {\n    Base: \"base\"\n};\n/**\n * @export\n */ exports.DeployFungibleFactoryEnum = {\n    Wow: \"wow\",\n    Clanker: \"clanker\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/onchain-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/reaction-api.js":
/*!************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/reaction-api.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ReactionApi = exports.ReactionApiFactory = exports.ReactionApiFp = exports.ReactionApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * ReactionApi - axios parameter creator\n * @export\n */ const ReactionApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Delete a reaction (like or recast) to a cast \\\\ (In order to delete a reaction `signer_uuid` must be approved)\n         * @summary Delete reaction\n         * @param {ReactionReqBody} reactionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-reaction)\n         *\n         */ deleteReaction: async (reactionReqBody, options = {})=>{\n            // verify required parameter 'reactionReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"deleteReaction\", \"reactionReqBody\", reactionReqBody);\n            const localVarPath = `/farcaster/reaction`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(reactionReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches reactions for a given cast\n         * @summary Reactions for cast\n         * @param {string} hash\n         * @param {Array<ReactionsType>} types Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: \\&#39;likes\\&#39; and \\&#39;recasts\\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.\n         * @param {number} [viewerFid] Providing this will return a list of reactions that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ReactionsCastResponse>} A promise that resolves to a `ReactionsCastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n         *\n         */ fetchCastReactions: async (hash, types, viewerFid, limit, cursor, options = {})=>{\n            // verify required parameter 'hash' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchCastReactions\", \"hash\", hash);\n            // verify required parameter 'types' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchCastReactions\", \"types\", types);\n            const localVarPath = `/farcaster/reactions/cast`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (hash !== undefined) {\n                localVarQueryParameter[\"hash\"] = hash;\n            }\n            if (types) {\n                localVarQueryParameter[\"types\"] = types.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches reactions for a given user\n         * @summary Reactions for user\n         * @param {number} fid\n         * @param {ReactionsType} type Type of reaction to fetch (likes or recasts or all)\n         * @param {number} [viewerFid] Providing this will return a list of reactions that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ReactionsResponse>} A promise that resolves to a `ReactionsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n         *\n         */ fetchUserReactions: async (fid, type, viewerFid, limit, cursor, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserReactions\", \"fid\", fid);\n            // verify required parameter 'type' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserReactions\", \"type\", type);\n            const localVarPath = `/farcaster/reactions/user`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (type !== undefined) {\n                localVarQueryParameter[\"type\"] = type;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Post a reaction (like or recast) to a given cast \\\\ (In order to post a reaction `signer_uuid` must be approved)\n         * @summary Post a reaction\n         * @param {ReactionReqBody} reactionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-reaction)\n         *\n         */ publishReaction: async (reactionReqBody, options = {})=>{\n            // verify required parameter 'reactionReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishReaction\", \"reactionReqBody\", reactionReqBody);\n            const localVarPath = `/farcaster/reaction`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(reactionReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.ReactionApiAxiosParamCreator = ReactionApiAxiosParamCreator;\n/**\n * ReactionApi - functional programming interface\n * @export\n */ const ReactionApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.ReactionApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Delete a reaction (like or recast) to a cast \\\\ (In order to delete a reaction `signer_uuid` must be approved)\n         * @summary Delete reaction\n         * @param {ReactionReqBody} reactionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-reaction)\n         *\n         */ async deleteReaction (reactionReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReaction(reactionReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ReactionApi.deleteReaction\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches reactions for a given cast\n         * @summary Reactions for cast\n         * @param {string} hash\n         * @param {Array<ReactionsType>} types Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: \\&#39;likes\\&#39; and \\&#39;recasts\\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.\n         * @param {number} [viewerFid] Providing this will return a list of reactions that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ReactionsCastResponse>} A promise that resolves to a `ReactionsCastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n         *\n         */ async fetchCastReactions (hash, types, viewerFid, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastReactions(hash, types, viewerFid, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ReactionApi.fetchCastReactions\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches reactions for a given user\n         * @summary Reactions for user\n         * @param {number} fid\n         * @param {ReactionsType} type Type of reaction to fetch (likes or recasts or all)\n         * @param {number} [viewerFid] Providing this will return a list of reactions that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ReactionsResponse>} A promise that resolves to a `ReactionsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n         *\n         */ async fetchUserReactions (fid, type, viewerFid, limit, cursor, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserReactions(fid, type, viewerFid, limit, cursor, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ReactionApi.fetchUserReactions\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Post a reaction (like or recast) to a given cast \\\\ (In order to post a reaction `signer_uuid` must be approved)\n         * @summary Post a reaction\n         * @param {ReactionReqBody} reactionReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-reaction)\n         *\n         */ async publishReaction (reactionReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishReaction(reactionReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ReactionApi.publishReaction\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.ReactionApiFp = ReactionApiFp;\n/**\n * ReactionApi - factory interface\n * @export\n */ const ReactionApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.ReactionApiFp)(configuration);\n    return {\n        /**\n         * Delete a reaction (like or recast) to a cast \\\\ (In order to delete a reaction `signer_uuid` must be approved)\n         * @summary Delete reaction\n         * @param {ReactionApiDeleteReactionRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-reaction)\n         *\n         */ deleteReaction (requestParameters, options) {\n            return localVarFp.deleteReaction(requestParameters.reactionReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches reactions for a given cast\n         * @summary Reactions for cast\n         * @param {ReactionApiFetchCastReactionsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ReactionsCastResponse>} A promise that resolves to a `ReactionsCastResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n         *\n         */ fetchCastReactions (requestParameters, options) {\n            return localVarFp.fetchCastReactions(requestParameters.hash, requestParameters.types, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches reactions for a given user\n         * @summary Reactions for user\n         * @param {ReactionApiFetchUserReactionsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ReactionsResponse>} A promise that resolves to a `ReactionsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n         *\n         */ fetchUserReactions (requestParameters, options) {\n            return localVarFp.fetchUserReactions(requestParameters.fid, requestParameters.type, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Post a reaction (like or recast) to a given cast \\\\ (In order to post a reaction `signer_uuid` must be approved)\n         * @summary Post a reaction\n         * @param {ReactionApiPublishReactionRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-reaction)\n         *\n         */ publishReaction (requestParameters, options) {\n            return localVarFp.publishReaction(requestParameters.reactionReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.ReactionApiFactory = ReactionApiFactory;\n/**\n * ReactionApi - object-oriented interface\n * @export\n * @class ReactionApi\n * @extends {BaseAPI}\n */ class ReactionApi extends base_1.BaseAPI {\n    /**\n     * Delete a reaction (like or recast) to a cast \\\\ (In order to delete a reaction `signer_uuid` must be approved)\n     * @summary Delete reaction\n     * @param {ReactionApiDeleteReactionRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReactionApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-reaction)\n     *\n     */ deleteReaction(requestParameters, options) {\n        return (0, exports.ReactionApiFp)(this.configuration).deleteReaction(requestParameters.reactionReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches reactions for a given cast\n     * @summary Reactions for cast\n     * @param {ReactionApiFetchCastReactionsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReactionApi\n     * @returns {Promise<ReactionsCastResponse>} A promise that resolves to a `ReactionsCastResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n     *\n     */ fetchCastReactions(requestParameters, options) {\n        return (0, exports.ReactionApiFp)(this.configuration).fetchCastReactions(requestParameters.hash, requestParameters.types, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches reactions for a given user\n     * @summary Reactions for user\n     * @param {ReactionApiFetchUserReactionsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReactionApi\n     * @returns {Promise<ReactionsResponse>} A promise that resolves to a `ReactionsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n     *\n     */ fetchUserReactions(requestParameters, options) {\n        return (0, exports.ReactionApiFp)(this.configuration).fetchUserReactions(requestParameters.fid, requestParameters.type, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Post a reaction (like or recast) to a given cast \\\\ (In order to post a reaction `signer_uuid` must be approved)\n     * @summary Post a reaction\n     * @param {ReactionApiPublishReactionRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReactionApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-reaction)\n     *\n     */ publishReaction(requestParameters, options) {\n        return (0, exports.ReactionApiFp)(this.configuration).publishReaction(requestParameters.reactionReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.ReactionApi = ReactionApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/reaction-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/signer-api.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/signer-api.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SignerApi = exports.SignerApiFactory = exports.SignerApiFp = exports.SignerApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * SignerApi - axios parameter creator\n * @export\n */ const SignerApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Creates a signer and returns the signer status. \\\\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.\n         * @summary Create signer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)\n         *\n         */ createSigner: async (options = {})=>{\n            const localVarPath = `/farcaster/signer`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)\n         * @summary Fetch authorization url\n         * @param {string} clientId\n         * @param {AuthorizationUrlResponseType} responseType\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)\n         *\n         */ fetchAuthorizationUrl: async (clientId, responseType, options = {})=>{\n            // verify required parameter 'clientId' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchAuthorizationUrl\", \"clientId\", clientId);\n            // verify required parameter 'responseType' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchAuthorizationUrl\", \"responseType\", responseType);\n            const localVarPath = `/farcaster/login/authorize`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (clientId !== undefined) {\n                localVarQueryParameter[\"client_id\"] = clientId;\n            }\n            if (responseType !== undefined) {\n                localVarQueryParameter[\"response_type\"] = responseType;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches a list of signers for a custody address\n         * @summary List signers\n         * @param {string} message A Sign-In with Ethereum (SIWE) message that the user\\&#39;s Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.  example:  example.com wants you to sign in with your Ethereum account:\\\\\\\\n0x23A...F232\\\\\\\\n\\\\\\\\nSign in to continue.\\\\\\\\n\\\\\\\\nURI: example.com\\\\\\\\nVersion: 1\\\\\\\\nChain ID: 1\\\\\\\\nNonce: xyz123\\\\\\\\nIssued At: 2021-09-01T14:52:07Z  Note: This is just an example message (So, message is invalid, since we don\\&#39;t want any signers related to NEYNAR_API_DOCS to be exposed).   [Checkout fetch-signers API documentation for more details.](https://docs.neynar.com/docs/fetch-signers-1)\n         * @param {string} signature The digital signature produced by signing the provided SIWE message with the user\\&#39;s Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)\n         *\n         */ fetchSigners: async (message, signature, options = {})=>{\n            // verify required parameter 'message' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSigners\", \"message\", message);\n            // verify required parameter 'signature' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSigners\", \"signature\", signature);\n            const localVarPath = `/farcaster/signer/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (message !== undefined) {\n                localVarQueryParameter[\"message\"] = message;\n            }\n            if (signature !== undefined) {\n                localVarQueryParameter[\"signature\"] = signature;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches the status of a developer managed signer by public key\n         * @summary Status by public key\n         * @param {string} publicKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)\n         *\n         */ lookupDeveloperManagedSigner: async (publicKey, options = {})=>{\n            // verify required parameter 'publicKey' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupDeveloperManagedSigner\", \"publicKey\", publicKey);\n            const localVarPath = `/farcaster/signer/developer_managed`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (publicKey !== undefined) {\n                localVarQueryParameter[\"public_key\"] = publicKey;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)\n         * @summary Status\n         * @param {string} signerUuid\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)\n         *\n         */ lookupSigner: async (signerUuid, options = {})=>{\n            // verify required parameter 'signerUuid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupSigner\", \"signerUuid\", signerUuid);\n            const localVarPath = `/farcaster/signer`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (signerUuid !== undefined) {\n                localVarQueryParameter[\"signer_uuid\"] = signerUuid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.\n         * @summary Publish message\n         * @param {object} body\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<object>} A promise that resolves to a `object` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)\n         *\n         */ publishMessageToFarcaster: async (body, options = {})=>{\n            // verify required parameter 'body' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishMessageToFarcaster\", \"body\", body);\n            const localVarPath = `/farcaster/message`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.\n         * @summary Register Signed Key\n         * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)\n         *\n         */ registerSignedKey: async (registerSignerKeyReqBody, options = {})=>{\n            // verify required parameter 'registerSignerKeyReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"registerSignedKey\", \"registerSignerKeyReqBody\", registerSignerKeyReqBody);\n            const localVarPath = `/farcaster/signer/signed_key`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(registerSignerKeyReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Registers an signed key and returns the developer managed signer status with an approval url.\n         * @summary Register Signed Key\n         * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)\n         *\n         */ registerSignedKeyForDeveloperManagedSigner: async (registerDeveloperManagedSignedKeyReqBody, options = {})=>{\n            // verify required parameter 'registerDeveloperManagedSignedKeyReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"registerSignedKeyForDeveloperManagedSigner\", \"registerDeveloperManagedSignedKeyReqBody\", registerDeveloperManagedSignedKeyReqBody);\n            const localVarPath = `/farcaster/signer/developer_managed/signed_key`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(registerDeveloperManagedSignedKeyReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.SignerApiAxiosParamCreator = SignerApiAxiosParamCreator;\n/**\n * SignerApi - functional programming interface\n * @export\n */ const SignerApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.SignerApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Creates a signer and returns the signer status. \\\\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.\n         * @summary Create signer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)\n         *\n         */ async createSigner (options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSigner(options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SignerApi.createSigner\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)\n         * @summary Fetch authorization url\n         * @param {string} clientId\n         * @param {AuthorizationUrlResponseType} responseType\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)\n         *\n         */ async fetchAuthorizationUrl (clientId, responseType, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAuthorizationUrl(clientId, responseType, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SignerApi.fetchAuthorizationUrl\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches a list of signers for a custody address\n         * @summary List signers\n         * @param {string} message A Sign-In with Ethereum (SIWE) message that the user\\&#39;s Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.  example:  example.com wants you to sign in with your Ethereum account:\\\\\\\\n0x23A...F232\\\\\\\\n\\\\\\\\nSign in to continue.\\\\\\\\n\\\\\\\\nURI: example.com\\\\\\\\nVersion: 1\\\\\\\\nChain ID: 1\\\\\\\\nNonce: xyz123\\\\\\\\nIssued At: 2021-09-01T14:52:07Z  Note: This is just an example message (So, message is invalid, since we don\\&#39;t want any signers related to NEYNAR_API_DOCS to be exposed).   [Checkout fetch-signers API documentation for more details.](https://docs.neynar.com/docs/fetch-signers-1)\n         * @param {string} signature The digital signature produced by signing the provided SIWE message with the user\\&#39;s Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)\n         *\n         */ async fetchSigners (message, signature, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSigners(message, signature, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SignerApi.fetchSigners\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches the status of a developer managed signer by public key\n         * @summary Status by public key\n         * @param {string} publicKey\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)\n         *\n         */ async lookupDeveloperManagedSigner (publicKey, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupDeveloperManagedSigner(publicKey, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SignerApi.lookupDeveloperManagedSigner\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)\n         * @summary Status\n         * @param {string} signerUuid\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)\n         *\n         */ async lookupSigner (signerUuid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupSigner(signerUuid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SignerApi.lookupSigner\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.\n         * @summary Publish message\n         * @param {object} body\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<object>} A promise that resolves to a `object` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)\n         *\n         */ async publishMessageToFarcaster (body, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishMessageToFarcaster(body, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SignerApi.publishMessageToFarcaster\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.\n         * @summary Register Signed Key\n         * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)\n         *\n         */ async registerSignedKey (registerSignerKeyReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSignedKey(registerSignerKeyReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SignerApi.registerSignedKey\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Registers an signed key and returns the developer managed signer status with an approval url.\n         * @summary Register Signed Key\n         * @param {RegisterDeveloperManagedSignedKeyReqBody} registerDeveloperManagedSignedKeyReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)\n         *\n         */ async registerSignedKeyForDeveloperManagedSigner (registerDeveloperManagedSignedKeyReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSignedKeyForDeveloperManagedSigner(registerDeveloperManagedSignedKeyReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SignerApi.registerSignedKeyForDeveloperManagedSigner\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.SignerApiFp = SignerApiFp;\n/**\n * SignerApi - factory interface\n * @export\n */ const SignerApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.SignerApiFp)(configuration);\n    return {\n        /**\n         * Creates a signer and returns the signer status. \\\\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.\n         * @summary Create signer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)\n         *\n         */ createSigner (options) {\n            return localVarFp.createSigner(options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch authorization url (Fetched authorized url useful for SIWN login operation)\n         * @summary Fetch authorization url\n         * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)\n         *\n         */ fetchAuthorizationUrl (requestParameters, options) {\n            return localVarFp.fetchAuthorizationUrl(requestParameters.clientId, requestParameters.responseType, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches a list of signers for a custody address\n         * @summary List signers\n         * @param {SignerApiFetchSignersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)\n         *\n         */ fetchSigners (requestParameters, options) {\n            return localVarFp.fetchSigners(requestParameters.message, requestParameters.signature, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches the status of a developer managed signer by public key\n         * @summary Status by public key\n         * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)\n         *\n         */ lookupDeveloperManagedSigner (requestParameters, options) {\n            return localVarFp.lookupDeveloperManagedSigner(requestParameters.publicKey, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)\n         * @summary Status\n         * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)\n         *\n         */ lookupSigner (requestParameters, options) {\n            return localVarFp.lookupSigner(requestParameters.signerUuid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.\n         * @summary Publish message\n         * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<object>} A promise that resolves to a `object` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)\n         *\n         */ publishMessageToFarcaster (requestParameters, options) {\n            return localVarFp.publishMessageToFarcaster(requestParameters.body, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.\n         * @summary Register Signed Key\n         * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)\n         *\n         */ registerSignedKey (requestParameters, options) {\n            return localVarFp.registerSignedKey(requestParameters.registerSignerKeyReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Registers an signed key and returns the developer managed signer status with an approval url.\n         * @summary Register Signed Key\n         * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)\n         *\n         */ registerSignedKeyForDeveloperManagedSigner (requestParameters, options) {\n            return localVarFp.registerSignedKeyForDeveloperManagedSigner(requestParameters.registerDeveloperManagedSignedKeyReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.SignerApiFactory = SignerApiFactory;\n/**\n * SignerApi - object-oriented interface\n * @export\n * @class SignerApi\n * @extends {BaseAPI}\n */ class SignerApi extends base_1.BaseAPI {\n    /**\n     * Creates a signer and returns the signer status. \\\\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.\n     * @summary Create signer\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SignerApi\n     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)\n     *\n     */ createSigner(options) {\n        return (0, exports.SignerApiFp)(this.configuration).createSigner(options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)\n     * @summary Fetch authorization url\n     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SignerApi\n     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)\n     *\n     */ fetchAuthorizationUrl(requestParameters, options) {\n        return (0, exports.SignerApiFp)(this.configuration).fetchAuthorizationUrl(requestParameters.clientId, requestParameters.responseType, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches a list of signers for a custody address\n     * @summary List signers\n     * @param {SignerApiFetchSignersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SignerApi\n     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)\n     *\n     */ fetchSigners(requestParameters, options) {\n        return (0, exports.SignerApiFp)(this.configuration).fetchSigners(requestParameters.message, requestParameters.signature, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches the status of a developer managed signer by public key\n     * @summary Status by public key\n     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SignerApi\n     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)\n     *\n     */ lookupDeveloperManagedSigner(requestParameters, options) {\n        return (0, exports.SignerApiFp)(this.configuration).lookupDeveloperManagedSigner(requestParameters.publicKey, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)\n     * @summary Status\n     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SignerApi\n     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)\n     *\n     */ lookupSigner(requestParameters, options) {\n        return (0, exports.SignerApiFp)(this.configuration).lookupSigner(requestParameters.signerUuid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.\n     * @summary Publish message\n     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SignerApi\n     * @returns {Promise<object>} A promise that resolves to a `object` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)\n     *\n     */ publishMessageToFarcaster(requestParameters, options) {\n        return (0, exports.SignerApiFp)(this.configuration).publishMessageToFarcaster(requestParameters.body, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.\n     * @summary Register Signed Key\n     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SignerApi\n     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)\n     *\n     */ registerSignedKey(requestParameters, options) {\n        return (0, exports.SignerApiFp)(this.configuration).registerSignedKey(requestParameters.registerSignerKeyReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Registers an signed key and returns the developer managed signer status with an approval url.\n     * @summary Register Signed Key\n     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SignerApi\n     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)\n     *\n     */ registerSignedKeyForDeveloperManagedSigner(requestParameters, options) {\n        return (0, exports.SignerApiFp)(this.configuration).registerSignedKeyForDeveloperManagedSigner(requestParameters.registerDeveloperManagedSignedKeyReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.SignerApi = SignerApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/signer-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/storage-api.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/storage-api.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StorageApi = exports.StorageApiFactory = exports.StorageApiFp = exports.StorageApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * StorageApi - axios parameter creator\n * @export\n */ const StorageApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * This api will help you rent units of storage for an year for a specific FID. A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.\n         * @summary Buy storage\n         * @param {BuyStorageReqBody} buyStorageReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/buy-storage)\n         *\n         */ buyStorage: async (buyStorageReqBody, options = {})=>{\n            // verify required parameter 'buyStorageReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"buyStorage\", \"buyStorageReqBody\", buyStorageReqBody);\n            const localVarPath = `/farcaster/storage/buy`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(buyStorageReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches storage allocations for a given user\n         * @summary Allocation of user\n         * @param {number} fid\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-allocations)\n         *\n         */ lookupUserStorageAllocations: async (fid, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUserStorageAllocations\", \"fid\", fid);\n            const localVarPath = `/farcaster/storage/allocations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches storage usage for a given user\n         * @summary Usage of user\n         * @param {number} fid\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageUsageResponse>} A promise that resolves to a `StorageUsageResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-usage)\n         *\n         */ lookupUserStorageUsage: async (fid, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUserStorageUsage\", \"fid\", fid);\n            const localVarPath = `/farcaster/storage/usage`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.StorageApiAxiosParamCreator = StorageApiAxiosParamCreator;\n/**\n * StorageApi - functional programming interface\n * @export\n */ const StorageApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.StorageApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * This api will help you rent units of storage for an year for a specific FID. A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.\n         * @summary Buy storage\n         * @param {BuyStorageReqBody} buyStorageReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/buy-storage)\n         *\n         */ async buyStorage (buyStorageReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.buyStorage(buyStorageReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"StorageApi.buyStorage\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches storage allocations for a given user\n         * @summary Allocation of user\n         * @param {number} fid\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-allocations)\n         *\n         */ async lookupUserStorageAllocations (fid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupUserStorageAllocations(fid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"StorageApi.lookupUserStorageAllocations\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches storage usage for a given user\n         * @summary Usage of user\n         * @param {number} fid\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageUsageResponse>} A promise that resolves to a `StorageUsageResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-usage)\n         *\n         */ async lookupUserStorageUsage (fid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupUserStorageUsage(fid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"StorageApi.lookupUserStorageUsage\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.StorageApiFp = StorageApiFp;\n/**\n * StorageApi - factory interface\n * @export\n */ const StorageApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.StorageApiFp)(configuration);\n    return {\n        /**\n         * This api will help you rent units of storage for an year for a specific FID. A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.\n         * @summary Buy storage\n         * @param {StorageApiBuyStorageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/buy-storage)\n         *\n         */ buyStorage (requestParameters, options) {\n            return localVarFp.buyStorage(requestParameters.buyStorageReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches storage allocations for a given user\n         * @summary Allocation of user\n         * @param {StorageApiLookupUserStorageAllocationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-allocations)\n         *\n         */ lookupUserStorageAllocations (requestParameters, options) {\n            return localVarFp.lookupUserStorageAllocations(requestParameters.fid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches storage usage for a given user\n         * @summary Usage of user\n         * @param {StorageApiLookupUserStorageUsageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageUsageResponse>} A promise that resolves to a `StorageUsageResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-usage)\n         *\n         */ lookupUserStorageUsage (requestParameters, options) {\n            return localVarFp.lookupUserStorageUsage(requestParameters.fid, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.StorageApiFactory = StorageApiFactory;\n/**\n * StorageApi - object-oriented interface\n * @export\n * @class StorageApi\n * @extends {BaseAPI}\n */ class StorageApi extends base_1.BaseAPI {\n    /**\n     * This api will help you rent units of storage for an year for a specific FID. A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.\n     * @summary Buy storage\n     * @param {StorageApiBuyStorageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StorageApi\n     * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/buy-storage)\n     *\n     */ buyStorage(requestParameters, options) {\n        return (0, exports.StorageApiFp)(this.configuration).buyStorage(requestParameters.buyStorageReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches storage allocations for a given user\n     * @summary Allocation of user\n     * @param {StorageApiLookupUserStorageAllocationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StorageApi\n     * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-allocations)\n     *\n     */ lookupUserStorageAllocations(requestParameters, options) {\n        return (0, exports.StorageApiFp)(this.configuration).lookupUserStorageAllocations(requestParameters.fid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches storage usage for a given user\n     * @summary Usage of user\n     * @param {StorageApiLookupUserStorageUsageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StorageApi\n     * @returns {Promise<StorageUsageResponse>} A promise that resolves to a `StorageUsageResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-usage)\n     *\n     */ lookupUserStorageUsage(requestParameters, options) {\n        return (0, exports.StorageApiFp)(this.configuration).lookupUserStorageUsage(requestParameters.fid, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.StorageApi = StorageApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2FwaS9hcGlzL3N0b3JhZ2UtYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2Isa0JBQWtCLEdBQ2xCLGtCQUFrQixHQUNsQjs7Ozs7Ozs7OztDQVVDLEdBQ0QsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBR0EseUJBQXlCLEdBQUdBLG9CQUFvQixHQUFHQSxtQ0FBbUMsR0FBRyxLQUFLO0FBQ25ILE1BQU1NLFVBQVVYLGdCQUFnQlksbUJBQU9BLENBQUMsNkRBQU87QUFDL0MseURBQXlEO0FBQ3pELGFBQWE7QUFDYixNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyw4RUFBVztBQUNwQyxhQUFhO0FBQ2IsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUMsMEVBQVM7QUFDaEM7OztDQUdDLEdBQ0QsTUFBTUYsOEJBQThCLFNBQVVLLGFBQWE7SUFDdkQsT0FBTztRQUNIOzs7Ozs7Ozs7O1NBVUMsR0FDREMsWUFBWSxPQUFPQyxtQkFBbUJDLFVBQVUsQ0FBQyxDQUFDO1lBQzlDLHlFQUF5RTtZQUN4RSxJQUFHTCxTQUFTTSxpQkFBaUIsRUFBRSxjQUFjLHFCQUFxQkY7WUFDbkUsTUFBTUcsZUFBZSxDQUFDLHNCQUFzQixDQUFDO1lBQzdDLG9GQUFvRjtZQUNwRixNQUFNQyxpQkFBaUIsSUFBSUMsSUFBSUYsY0FBY1AsU0FBU1UsY0FBYztZQUNwRSxJQUFJQztZQUNKLElBQUlULGVBQWU7Z0JBQ2ZTLGNBQWNULGNBQWNTLFdBQVc7WUFDM0M7WUFDQSxNQUFNQyx5QkFBeUJ0QixPQUFPdUIsTUFBTSxDQUFDdkIsT0FBT3VCLE1BQU0sQ0FBQztnQkFBRUMsUUFBUTtZQUFPLEdBQUdILGNBQWNOO1lBQzdGLE1BQU1VLDBCQUEwQixDQUFDO1lBQ2pDLE1BQU1DLHlCQUF5QixDQUFDO1lBQ2hDLHFDQUFxQztZQUNyQyxNQUFNLENBQUMsR0FBR2hCLFNBQVNpQixpQkFBaUIsRUFBRUYseUJBQXlCLGFBQWFiO1lBQzVFYSx1QkFBdUIsQ0FBQyxlQUFlLEdBQUc7WUFDekMsSUFBR2YsU0FBU2tCLGVBQWUsRUFBRVYsZ0JBQWdCUTtZQUM5QyxJQUFJRyx5QkFBeUJSLGVBQWVBLFlBQVlTLE9BQU8sR0FBR1QsWUFBWVMsT0FBTyxHQUFHLENBQUM7WUFDekZSLHVCQUF1QlEsT0FBTyxHQUFHOUIsT0FBT3VCLE1BQU0sQ0FBQ3ZCLE9BQU91QixNQUFNLENBQUN2QixPQUFPdUIsTUFBTSxDQUFDLENBQUMsR0FBR0UsMEJBQTBCSSx5QkFBeUJkLFFBQVFlLE9BQU87WUFDakpSLHVCQUF1QlMsSUFBSSxHQUFHLENBQUMsR0FBR3JCLFNBQVNzQixxQkFBcUIsRUFBRWxCLG1CQUFtQlEsd0JBQXdCVjtZQUM3RyxPQUFPO2dCQUNIcUIsS0FBSyxDQUFDLEdBQUd2QixTQUFTd0IsWUFBWSxFQUFFaEI7Z0JBQ2hDSCxTQUFTTztZQUNiO1FBQ0o7UUFDQTs7Ozs7Ozs7OztTQVVDLEdBQ0RhLDhCQUE4QixPQUFPQyxLQUFLckIsVUFBVSxDQUFDLENBQUM7WUFDbEQsMkRBQTJEO1lBQzFELElBQUdMLFNBQVNNLGlCQUFpQixFQUFFLGdDQUFnQyxPQUFPb0I7WUFDdkUsTUFBTW5CLGVBQWUsQ0FBQyw4QkFBOEIsQ0FBQztZQUNyRCxvRkFBb0Y7WUFDcEYsTUFBTUMsaUJBQWlCLElBQUlDLElBQUlGLGNBQWNQLFNBQVNVLGNBQWM7WUFDcEUsSUFBSUM7WUFDSixJQUFJVCxlQUFlO2dCQUNmUyxjQUFjVCxjQUFjUyxXQUFXO1lBQzNDO1lBQ0EsTUFBTUMseUJBQXlCdEIsT0FBT3VCLE1BQU0sQ0FBQ3ZCLE9BQU91QixNQUFNLENBQUM7Z0JBQUVDLFFBQVE7WUFBTSxHQUFHSCxjQUFjTjtZQUM1RixNQUFNVSwwQkFBMEIsQ0FBQztZQUNqQyxNQUFNQyx5QkFBeUIsQ0FBQztZQUNoQyxxQ0FBcUM7WUFDckMsTUFBTSxDQUFDLEdBQUdoQixTQUFTaUIsaUJBQWlCLEVBQUVGLHlCQUF5QixhQUFhYjtZQUM1RSxJQUFJd0IsUUFBUUMsV0FBVztnQkFDbkJYLHNCQUFzQixDQUFDLE1BQU0sR0FBR1U7WUFDcEM7WUFDQyxJQUFHMUIsU0FBU2tCLGVBQWUsRUFBRVYsZ0JBQWdCUTtZQUM5QyxJQUFJRyx5QkFBeUJSLGVBQWVBLFlBQVlTLE9BQU8sR0FBR1QsWUFBWVMsT0FBTyxHQUFHLENBQUM7WUFDekZSLHVCQUF1QlEsT0FBTyxHQUFHOUIsT0FBT3VCLE1BQU0sQ0FBQ3ZCLE9BQU91QixNQUFNLENBQUN2QixPQUFPdUIsTUFBTSxDQUFDLENBQUMsR0FBR0UsMEJBQTBCSSx5QkFBeUJkLFFBQVFlLE9BQU87WUFDakosT0FBTztnQkFDSEcsS0FBSyxDQUFDLEdBQUd2QixTQUFTd0IsWUFBWSxFQUFFaEI7Z0JBQ2hDSCxTQUFTTztZQUNiO1FBQ0o7UUFDQTs7Ozs7Ozs7OztTQVVDLEdBQ0RnQix3QkFBd0IsT0FBT0YsS0FBS3JCLFVBQVUsQ0FBQyxDQUFDO1lBQzVDLDJEQUEyRDtZQUMxRCxJQUFHTCxTQUFTTSxpQkFBaUIsRUFBRSwwQkFBMEIsT0FBT29CO1lBQ2pFLE1BQU1uQixlQUFlLENBQUMsd0JBQXdCLENBQUM7WUFDL0Msb0ZBQW9GO1lBQ3BGLE1BQU1DLGlCQUFpQixJQUFJQyxJQUFJRixjQUFjUCxTQUFTVSxjQUFjO1lBQ3BFLElBQUlDO1lBQ0osSUFBSVQsZUFBZTtnQkFDZlMsY0FBY1QsY0FBY1MsV0FBVztZQUMzQztZQUNBLE1BQU1DLHlCQUF5QnRCLE9BQU91QixNQUFNLENBQUN2QixPQUFPdUIsTUFBTSxDQUFDO2dCQUFFQyxRQUFRO1lBQU0sR0FBR0gsY0FBY047WUFDNUYsTUFBTVUsMEJBQTBCLENBQUM7WUFDakMsTUFBTUMseUJBQXlCLENBQUM7WUFDaEMscUNBQXFDO1lBQ3JDLE1BQU0sQ0FBQyxHQUFHaEIsU0FBU2lCLGlCQUFpQixFQUFFRix5QkFBeUIsYUFBYWI7WUFDNUUsSUFBSXdCLFFBQVFDLFdBQVc7Z0JBQ25CWCxzQkFBc0IsQ0FBQyxNQUFNLEdBQUdVO1lBQ3BDO1lBQ0MsSUFBRzFCLFNBQVNrQixlQUFlLEVBQUVWLGdCQUFnQlE7WUFDOUMsSUFBSUcseUJBQXlCUixlQUFlQSxZQUFZUyxPQUFPLEdBQUdULFlBQVlTLE9BQU8sR0FBRyxDQUFDO1lBQ3pGUix1QkFBdUJRLE9BQU8sR0FBRzlCLE9BQU91QixNQUFNLENBQUN2QixPQUFPdUIsTUFBTSxDQUFDdkIsT0FBT3VCLE1BQU0sQ0FBQyxDQUFDLEdBQUdFLDBCQUEwQkkseUJBQXlCZCxRQUFRZSxPQUFPO1lBQ2pKLE9BQU87Z0JBQ0hHLEtBQUssQ0FBQyxHQUFHdkIsU0FBU3dCLFlBQVksRUFBRWhCO2dCQUNoQ0gsU0FBU087WUFDYjtRQUNKO0lBQ0o7QUFDSjtBQUNBcEIsbUNBQW1DLEdBQUdLO0FBQ3RDOzs7Q0FHQyxHQUNELE1BQU1ELGVBQWUsU0FBVU0sYUFBYTtJQUN4QyxNQUFNMkIsNEJBQTRCLENBQUMsR0FBR3JDLFFBQVFLLDJCQUEyQixFQUFFSztJQUMzRSxPQUFPO1FBQ0g7Ozs7Ozs7Ozs7U0FVQyxHQUNELE1BQU1DLFlBQVdDLGlCQUFpQixFQUFFQyxPQUFPO1lBQ3ZDLElBQUl5QixJQUFJQyxJQUFJQztZQUNaLE1BQU1DLG9CQUFvQixNQUFNSiwwQkFBMEIxQixVQUFVLENBQUNDLG1CQUFtQkM7WUFDeEYsTUFBTTZCLCtCQUErQixDQUFDSixLQUFLNUIsa0JBQWtCLFFBQVFBLGtCQUFrQixLQUFLLElBQUksS0FBSyxJQUFJQSxjQUFjaUMsV0FBVyxNQUFNLFFBQVFMLE9BQU8sS0FBSyxJQUFJQSxLQUFLO1lBQ3JLLE1BQU1NLGtDQUFrQyxDQUFDSixLQUFLLENBQUNELEtBQUs5QixPQUFPb0Msa0JBQWtCLENBQUMsd0JBQXdCLE1BQU0sUUFBUU4sT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFLENBQUNHLDZCQUE2QixNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1QsR0FBRztZQUMxTixPQUFPLENBQUNlLE9BQU9DLFdBQWEsQ0FBQyxHQUFHdkMsU0FBU3dDLHFCQUFxQixFQUFFUCxtQkFBbUJuQyxRQUFRMkMsT0FBTyxFQUFFeEMsT0FBT3lDLFNBQVMsRUFBRXhDLGVBQWVvQyxPQUFPRixtQ0FBbUNHO1FBQ25MO1FBQ0E7Ozs7Ozs7Ozs7U0FVQyxHQUNELE1BQU1kLDhCQUE2QkMsR0FBRyxFQUFFckIsT0FBTztZQUMzQyxJQUFJeUIsSUFBSUMsSUFBSUM7WUFDWixNQUFNQyxvQkFBb0IsTUFBTUosMEJBQTBCSiw0QkFBNEIsQ0FBQ0MsS0FBS3JCO1lBQzVGLE1BQU02QiwrQkFBK0IsQ0FBQ0osS0FBSzVCLGtCQUFrQixRQUFRQSxrQkFBa0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsY0FBY2lDLFdBQVcsTUFBTSxRQUFRTCxPQUFPLEtBQUssSUFBSUEsS0FBSztZQUNySyxNQUFNTSxrQ0FBa0MsQ0FBQ0osS0FBSyxDQUFDRCxLQUFLOUIsT0FBT29DLGtCQUFrQixDQUFDLDBDQUEwQyxNQUFNLFFBQVFOLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsRUFBRSxDQUFDRyw2QkFBNkIsTUFBTSxRQUFRRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdULEdBQUc7WUFDNU8sT0FBTyxDQUFDZSxPQUFPQyxXQUFhLENBQUMsR0FBR3ZDLFNBQVN3QyxxQkFBcUIsRUFBRVAsbUJBQW1CbkMsUUFBUTJDLE9BQU8sRUFBRXhDLE9BQU95QyxTQUFTLEVBQUV4QyxlQUFlb0MsT0FBT0YsbUNBQW1DRztRQUNuTDtRQUNBOzs7Ozs7Ozs7O1NBVUMsR0FDRCxNQUFNWCx3QkFBdUJGLEdBQUcsRUFBRXJCLE9BQU87WUFDckMsSUFBSXlCLElBQUlDLElBQUlDO1lBQ1osTUFBTUMsb0JBQW9CLE1BQU1KLDBCQUEwQkQsc0JBQXNCLENBQUNGLEtBQUtyQjtZQUN0RixNQUFNNkIsK0JBQStCLENBQUNKLEtBQUs1QixrQkFBa0IsUUFBUUEsa0JBQWtCLEtBQUssSUFBSSxLQUFLLElBQUlBLGNBQWNpQyxXQUFXLE1BQU0sUUFBUUwsT0FBTyxLQUFLLElBQUlBLEtBQUs7WUFDckssTUFBTU0sa0NBQWtDLENBQUNKLEtBQUssQ0FBQ0QsS0FBSzlCLE9BQU9vQyxrQkFBa0IsQ0FBQyxvQ0FBb0MsTUFBTSxRQUFRTixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEVBQUUsQ0FBQ0csNkJBQTZCLE1BQU0sUUFBUUYsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHVCxHQUFHO1lBQ3RPLE9BQU8sQ0FBQ2UsT0FBT0MsV0FBYSxDQUFDLEdBQUd2QyxTQUFTd0MscUJBQXFCLEVBQUVQLG1CQUFtQm5DLFFBQVEyQyxPQUFPLEVBQUV4QyxPQUFPeUMsU0FBUyxFQUFFeEMsZUFBZW9DLE9BQU9GLG1DQUFtQ0c7UUFDbkw7SUFDSjtBQUNKO0FBQ0EvQyxvQkFBb0IsR0FBR0k7QUFDdkI7OztDQUdDLEdBQ0QsTUFBTUQsb0JBQW9CLFNBQVVPLGFBQWEsRUFBRXFDLFFBQVEsRUFBRUQsS0FBSztJQUM5RCxNQUFNSyxhQUFhLENBQUMsR0FBR25ELFFBQVFJLFlBQVksRUFBRU07SUFDN0MsT0FBTztRQUNIOzs7Ozs7Ozs7O1NBVUMsR0FDREMsWUFBV3lDLGlCQUFpQixFQUFFdkMsT0FBTztZQUNqQyxPQUFPc0MsV0FBV3hDLFVBQVUsQ0FBQ3lDLGtCQUFrQnhDLGlCQUFpQixFQUFFQyxTQUFTd0MsSUFBSSxDQUFDLENBQUNDLFVBQVlBLFFBQVFSLE9BQU9DO1FBQ2hIO1FBQ0E7Ozs7Ozs7Ozs7U0FVQyxHQUNEZCw4QkFBNkJtQixpQkFBaUIsRUFBRXZDLE9BQU87WUFDbkQsT0FBT3NDLFdBQVdsQiw0QkFBNEIsQ0FBQ21CLGtCQUFrQmxCLEdBQUcsRUFBRXJCLFNBQVN3QyxJQUFJLENBQUMsQ0FBQ0MsVUFBWUEsUUFBUVIsT0FBT0M7UUFDcEg7UUFDQTs7Ozs7Ozs7OztTQVVDLEdBQ0RYLHdCQUF1QmdCLGlCQUFpQixFQUFFdkMsT0FBTztZQUM3QyxPQUFPc0MsV0FBV2Ysc0JBQXNCLENBQUNnQixrQkFBa0JsQixHQUFHLEVBQUVyQixTQUFTd0MsSUFBSSxDQUFDLENBQUNDLFVBQVlBLFFBQVFSLE9BQU9DO1FBQzlHO0lBQ0o7QUFDSjtBQUNBL0MseUJBQXlCLEdBQUdHO0FBQzVCOzs7OztDQUtDLEdBQ0QsTUFBTUQsbUJBQW1CTyxPQUFPOEMsT0FBTztJQUNuQzs7Ozs7Ozs7Ozs7S0FXQyxHQUNENUMsV0FBV3lDLGlCQUFpQixFQUFFdkMsT0FBTyxFQUFFO1FBQ25DLE9BQU8sQ0FBQyxHQUFHYixRQUFRSSxZQUFZLEVBQUUsSUFBSSxDQUFDTSxhQUFhLEVBQUVDLFVBQVUsQ0FBQ3lDLGtCQUFrQnhDLGlCQUFpQixFQUFFQyxTQUFTd0MsSUFBSSxDQUFDLENBQUNDLFVBQVlBLFFBQVEsSUFBSSxDQUFDUixLQUFLLEVBQUUsSUFBSSxDQUFDQyxRQUFRO0lBQ3JLO0lBQ0E7Ozs7Ozs7Ozs7O0tBV0MsR0FDRGQsNkJBQTZCbUIsaUJBQWlCLEVBQUV2QyxPQUFPLEVBQUU7UUFDckQsT0FBTyxDQUFDLEdBQUdiLFFBQVFJLFlBQVksRUFBRSxJQUFJLENBQUNNLGFBQWEsRUFBRXVCLDRCQUE0QixDQUFDbUIsa0JBQWtCbEIsR0FBRyxFQUFFckIsU0FBU3dDLElBQUksQ0FBQyxDQUFDQyxVQUFZQSxRQUFRLElBQUksQ0FBQ1IsS0FBSyxFQUFFLElBQUksQ0FBQ0MsUUFBUTtJQUN6SztJQUNBOzs7Ozs7Ozs7OztLQVdDLEdBQ0RYLHVCQUF1QmdCLGlCQUFpQixFQUFFdkMsT0FBTyxFQUFFO1FBQy9DLE9BQU8sQ0FBQyxHQUFHYixRQUFRSSxZQUFZLEVBQUUsSUFBSSxDQUFDTSxhQUFhLEVBQUUwQixzQkFBc0IsQ0FBQ2dCLGtCQUFrQmxCLEdBQUcsRUFBRXJCLFNBQVN3QyxJQUFJLENBQUMsQ0FBQ0MsVUFBWUEsUUFBUSxJQUFJLENBQUNSLEtBQUssRUFBRSxJQUFJLENBQUNDLFFBQVE7SUFDbks7QUFDSjtBQUNBL0Msa0JBQWtCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFyY2FzdGVyc3RhdHMvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2FwaS9hcGlzL3N0b3JhZ2UtYXBpLmpzPzIxMDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogRmFyY2FzdGVyIEFQSSBWMlxuICogVGhlIEZhcmNhc3RlciBBUEkgYWxsb3dzIHlvdSB0byBpbnRlcmFjdCB3aXRoIHRoZSBGYXJjYXN0ZXIgcHJvdG9jb2wuIFNlZSB0aGUgW05leW5hciBkb2NzXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDIuNDQuMFxuICogQ29udGFjdDogdGVhbUBuZXluYXIuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0b3JhZ2VBcGkgPSBleHBvcnRzLlN0b3JhZ2VBcGlGYWN0b3J5ID0gZXhwb3J0cy5TdG9yYWdlQXBpRnAgPSBleHBvcnRzLlN0b3JhZ2VBcGlBeGlvc1BhcmFtQ3JlYXRvciA9IHZvaWQgMDtcbmNvbnN0IGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcbi8vIFNvbWUgaW1wb3J0cyBub3QgdXNlZCBkZXBlbmRpbmcgb24gdGVtcGxhdGUgY29uZGl0aW9uc1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uXCIpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYmFzZV8xID0gcmVxdWlyZShcIi4uL2Jhc2VcIik7XG4vKipcbiAqIFN0b3JhZ2VBcGkgLSBheGlvcyBwYXJhbWV0ZXIgY3JlYXRvclxuICogQGV4cG9ydFxuICovXG5jb25zdCBTdG9yYWdlQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGFwaSB3aWxsIGhlbHAgeW91IHJlbnQgdW5pdHMgb2Ygc3RvcmFnZSBmb3IgYW4geWVhciBmb3IgYSBzcGVjaWZpYyBGSUQuIEEgc3RvcmFnZSB1bml0IGxldHMgeW91IHN0b3JlIDUwMDAgY2FzdHMsIDI1MDAgcmVhY3Rpb25zIGFuZCAyNTAwIGxpbmtzLlxuICAgICAgICAgKiBAc3VtbWFyeSBCdXkgc3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge0J1eVN0b3JhZ2VSZXFCb2R5fSBidXlTdG9yYWdlUmVxQm9keVxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdG9yYWdlQWxsb2NhdGlvbnNSZXNwb25zZT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYFN0b3JhZ2VBbGxvY2F0aW9uc1Jlc3BvbnNlYCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9idXktc3RvcmFnZSlcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGJ1eVN0b3JhZ2U6IGFzeW5jIChidXlTdG9yYWdlUmVxQm9keSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdidXlTdG9yYWdlUmVxQm9keScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICAoMCwgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMpKCdidXlTdG9yYWdlJywgJ2J1eVN0b3JhZ2VSZXFCb2R5JywgYnV5U3RvcmFnZVJlcUJvZHkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9mYXJjYXN0ZXIvc3RvcmFnZS9idXlgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEFwaUtleUF1dGggcmVxdWlyZWRcbiAgICAgICAgICAgIGF3YWl0ICgwLCBjb21tb25fMS5zZXRBcGlLZXlUb09iamVjdCkobG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIFwieC1hcGkta2V5XCIsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcykobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAoMCwgY29tbW9uXzEuc2VyaWFsaXplRGF0YUlmTmVlZGVkKShidXlTdG9yYWdlUmVxQm9keSwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogKDAsIGNvbW1vbl8xLnRvUGF0aFN0cmluZykobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogRmV0Y2hlcyBzdG9yYWdlIGFsbG9jYXRpb25zIGZvciBhIGdpdmVuIHVzZXJcbiAgICAgICAgICogQHN1bW1hcnkgQWxsb2NhdGlvbiBvZiB1c2VyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmaWRcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8U3RvcmFnZUFsbG9jYXRpb25zUmVzcG9uc2U+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIGBTdG9yYWdlQWxsb2NhdGlvbnNSZXNwb25zZWAgb2JqZWN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCByZWZlciB0byB0aGUgW0FQSSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UvbG9va3VwLXVzZXItc3RvcmFnZS1hbGxvY2F0aW9ucylcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGxvb2t1cFVzZXJTdG9yYWdlQWxsb2NhdGlvbnM6IGFzeW5jIChmaWQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmlkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgICgwLCBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cykoJ2xvb2t1cFVzZXJTdG9yYWdlQWxsb2NhdGlvbnMnLCAnZmlkJywgZmlkKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmFyY2FzdGVyL3N0b3JhZ2UvYWxsb2NhdGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdHRVQnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQXBpS2V5QXV0aCByZXF1aXJlZFxuICAgICAgICAgICAgYXdhaXQgKDAsIGNvbW1vbl8xLnNldEFwaUtleVRvT2JqZWN0KShsb2NhbFZhckhlYWRlclBhcmFtZXRlciwgXCJ4LWFwaS1rZXlcIiwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICBpZiAoZmlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydmaWQnXSA9IGZpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMpKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6ICgwLCBjb21tb25fMS50b1BhdGhTdHJpbmcpKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoZXMgc3RvcmFnZSB1c2FnZSBmb3IgYSBnaXZlbiB1c2VyXG4gICAgICAgICAqIEBzdW1tYXJ5IFVzYWdlIG9mIHVzZXJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGZpZFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdG9yYWdlVXNhZ2VSZXNwb25zZT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYFN0b3JhZ2VVc2FnZVJlc3BvbnNlYCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9sb29rdXAtdXNlci1zdG9yYWdlLXVzYWdlKVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgbG9va3VwVXNlclN0b3JhZ2VVc2FnZTogYXN5bmMgKGZpZCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdmaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKSgnbG9va3VwVXNlclN0b3JhZ2VVc2FnZScsICdmaWQnLCBmaWQpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9mYXJjYXN0ZXIvc3RvcmFnZS91c2FnZWA7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBBcGlLZXlBdXRoIHJlcXVpcmVkXG4gICAgICAgICAgICBhd2FpdCAoMCwgY29tbW9uXzEuc2V0QXBpS2V5VG9PYmplY3QpKGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCBcIngtYXBpLWtleVwiLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChmaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ2ZpZCddID0gZmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcykobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogKDAsIGNvbW1vbl8xLnRvUGF0aFN0cmluZykobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0cy5TdG9yYWdlQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBTdG9yYWdlQXBpQXhpb3NQYXJhbUNyZWF0b3I7XG4vKipcbiAqIFN0b3JhZ2VBcGkgLSBmdW5jdGlvbmFsIHByb2dyYW1taW5nIGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5jb25zdCBTdG9yYWdlQXBpRnAgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IgPSAoMCwgZXhwb3J0cy5TdG9yYWdlQXBpQXhpb3NQYXJhbUNyZWF0b3IpKGNvbmZpZ3VyYXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGFwaSB3aWxsIGhlbHAgeW91IHJlbnQgdW5pdHMgb2Ygc3RvcmFnZSBmb3IgYW4geWVhciBmb3IgYSBzcGVjaWZpYyBGSUQuIEEgc3RvcmFnZSB1bml0IGxldHMgeW91IHN0b3JlIDUwMDAgY2FzdHMsIDI1MDAgcmVhY3Rpb25zIGFuZCAyNTAwIGxpbmtzLlxuICAgICAgICAgKiBAc3VtbWFyeSBCdXkgc3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge0J1eVN0b3JhZ2VSZXFCb2R5fSBidXlTdG9yYWdlUmVxQm9keVxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdG9yYWdlQWxsb2NhdGlvbnNSZXNwb25zZT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYFN0b3JhZ2VBbGxvY2F0aW9uc1Jlc3BvbnNlYCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9idXktc3RvcmFnZSlcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGFzeW5jIGJ1eVN0b3JhZ2UoYnV5U3RvcmFnZVJlcUJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBhd2FpdCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmJ1eVN0b3JhZ2UoYnV5U3RvcmFnZVJlcUJvZHksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJPcGVyYXRpb25TZXJ2ZXJJbmRleCA9IChfYSA9IGNvbmZpZ3VyYXRpb24gPT09IG51bGwgfHwgY29uZmlndXJhdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlndXJhdGlvbi5zZXJ2ZXJJbmRleCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyT3BlcmF0aW9uU2VydmVyQmFzZVBhdGggPSAoX2MgPSAoX2IgPSBiYXNlXzEub3BlcmF0aW9uU2VydmVyTWFwWydTdG9yYWdlQXBpLmJ1eVN0b3JhZ2UnXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW2xvY2FsVmFyT3BlcmF0aW9uU2VydmVySW5kZXhdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudXJsO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvcywgYmFzZVBhdGgpID0+ICgwLCBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24pKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pKGF4aW9zLCBsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoIHx8IGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoZXMgc3RvcmFnZSBhbGxvY2F0aW9ucyBmb3IgYSBnaXZlbiB1c2VyXG4gICAgICAgICAqIEBzdW1tYXJ5IEFsbG9jYXRpb24gb2YgdXNlclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gZmlkXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFN0b3JhZ2VBbGxvY2F0aW9uc1Jlc3BvbnNlPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBgU3RvcmFnZUFsbG9jYXRpb25zUmVzcG9uc2VgIG9iamVjdFxuICAgICAgICAgKlxuICAgICAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcmVmZXIgdG8gdGhlIFtBUEkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm5leW5hci5jb20vcmVmZXJlbmNlL2xvb2t1cC11c2VyLXN0b3JhZ2UtYWxsb2NhdGlvbnMpXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBhc3luYyBsb29rdXBVc2VyU3RvcmFnZUFsbG9jYXRpb25zKGZpZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IGF3YWl0IGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IubG9va3VwVXNlclN0b3JhZ2VBbGxvY2F0aW9ucyhmaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJPcGVyYXRpb25TZXJ2ZXJJbmRleCA9IChfYSA9IGNvbmZpZ3VyYXRpb24gPT09IG51bGwgfHwgY29uZmlndXJhdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlndXJhdGlvbi5zZXJ2ZXJJbmRleCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyT3BlcmF0aW9uU2VydmVyQmFzZVBhdGggPSAoX2MgPSAoX2IgPSBiYXNlXzEub3BlcmF0aW9uU2VydmVyTWFwWydTdG9yYWdlQXBpLmxvb2t1cFVzZXJTdG9yYWdlQWxsb2NhdGlvbnMnXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW2xvY2FsVmFyT3BlcmF0aW9uU2VydmVySW5kZXhdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudXJsO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvcywgYmFzZVBhdGgpID0+ICgwLCBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24pKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pKGF4aW9zLCBsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoIHx8IGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoZXMgc3RvcmFnZSB1c2FnZSBmb3IgYSBnaXZlbiB1c2VyXG4gICAgICAgICAqIEBzdW1tYXJ5IFVzYWdlIG9mIHVzZXJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGZpZFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdG9yYWdlVXNhZ2VSZXNwb25zZT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYFN0b3JhZ2VVc2FnZVJlc3BvbnNlYCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9sb29rdXAtdXNlci1zdG9yYWdlLXVzYWdlKVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgYXN5bmMgbG9va3VwVXNlclN0b3JhZ2VVc2FnZShmaWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBhd2FpdCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmxvb2t1cFVzZXJTdG9yYWdlVXNhZ2UoZmlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyT3BlcmF0aW9uU2VydmVySW5kZXggPSAoX2EgPSBjb25maWd1cmF0aW9uID09PSBudWxsIHx8IGNvbmZpZ3VyYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZ3VyYXRpb24uc2VydmVySW5kZXgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoID0gKF9jID0gKF9iID0gYmFzZV8xLm9wZXJhdGlvblNlcnZlck1hcFsnU3RvcmFnZUFwaS5sb29rdXBVc2VyU3RvcmFnZVVzYWdlJ10pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYltsb2NhbFZhck9wZXJhdGlvblNlcnZlckluZGV4XSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnVybDtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3MsIGJhc2VQYXRoKSA9PiAoMCwgY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKShsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKShheGlvcywgbG9jYWxWYXJPcGVyYXRpb25TZXJ2ZXJCYXNlUGF0aCB8fCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnRzLlN0b3JhZ2VBcGlGcCA9IFN0b3JhZ2VBcGlGcDtcbi8qKlxuICogU3RvcmFnZUFwaSAtIGZhY3RvcnkgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmNvbnN0IFN0b3JhZ2VBcGlGYWN0b3J5ID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24sIGJhc2VQYXRoLCBheGlvcykge1xuICAgIGNvbnN0IGxvY2FsVmFyRnAgPSAoMCwgZXhwb3J0cy5TdG9yYWdlQXBpRnApKGNvbmZpZ3VyYXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGFwaSB3aWxsIGhlbHAgeW91IHJlbnQgdW5pdHMgb2Ygc3RvcmFnZSBmb3IgYW4geWVhciBmb3IgYSBzcGVjaWZpYyBGSUQuIEEgc3RvcmFnZSB1bml0IGxldHMgeW91IHN0b3JlIDUwMDAgY2FzdHMsIDI1MDAgcmVhY3Rpb25zIGFuZCAyNTAwIGxpbmtzLlxuICAgICAgICAgKiBAc3VtbWFyeSBCdXkgc3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge1N0b3JhZ2VBcGlCdXlTdG9yYWdlUmVxdWVzdH0gcmVxdWVzdFBhcmFtZXRlcnMgUmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdG9yYWdlQWxsb2NhdGlvbnNSZXNwb25zZT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYFN0b3JhZ2VBbGxvY2F0aW9uc1Jlc3BvbnNlYCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9idXktc3RvcmFnZSlcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGJ1eVN0b3JhZ2UocmVxdWVzdFBhcmFtZXRlcnMsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmJ1eVN0b3JhZ2UocmVxdWVzdFBhcmFtZXRlcnMuYnV5U3RvcmFnZVJlcUJvZHksIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGZXRjaGVzIHN0b3JhZ2UgYWxsb2NhdGlvbnMgZm9yIGEgZ2l2ZW4gdXNlclxuICAgICAgICAgKiBAc3VtbWFyeSBBbGxvY2F0aW9uIG9mIHVzZXJcbiAgICAgICAgICogQHBhcmFtIHtTdG9yYWdlQXBpTG9va3VwVXNlclN0b3JhZ2VBbGxvY2F0aW9uc1JlcXVlc3R9IHJlcXVlc3RQYXJhbWV0ZXJzIFJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8U3RvcmFnZUFsbG9jYXRpb25zUmVzcG9uc2U+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIGBTdG9yYWdlQWxsb2NhdGlvbnNSZXNwb25zZWAgb2JqZWN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCByZWZlciB0byB0aGUgW0FQSSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UvbG9va3VwLXVzZXItc3RvcmFnZS1hbGxvY2F0aW9ucylcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGxvb2t1cFVzZXJTdG9yYWdlQWxsb2NhdGlvbnMocmVxdWVzdFBhcmFtZXRlcnMsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmxvb2t1cFVzZXJTdG9yYWdlQWxsb2NhdGlvbnMocmVxdWVzdFBhcmFtZXRlcnMuZmlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogRmV0Y2hlcyBzdG9yYWdlIHVzYWdlIGZvciBhIGdpdmVuIHVzZXJcbiAgICAgICAgICogQHN1bW1hcnkgVXNhZ2Ugb2YgdXNlclxuICAgICAgICAgKiBAcGFyYW0ge1N0b3JhZ2VBcGlMb29rdXBVc2VyU3RvcmFnZVVzYWdlUmVxdWVzdH0gcmVxdWVzdFBhcmFtZXRlcnMgUmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdG9yYWdlVXNhZ2VSZXNwb25zZT59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYFN0b3JhZ2VVc2FnZVJlc3BvbnNlYCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9sb29rdXAtdXNlci1zdG9yYWdlLXVzYWdlKVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgbG9va3VwVXNlclN0b3JhZ2VVc2FnZShyZXF1ZXN0UGFyYW1ldGVycywgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAubG9va3VwVXNlclN0b3JhZ2VVc2FnZShyZXF1ZXN0UGFyYW1ldGVycy5maWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnRzLlN0b3JhZ2VBcGlGYWN0b3J5ID0gU3RvcmFnZUFwaUZhY3Rvcnk7XG4vKipcbiAqIFN0b3JhZ2VBcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgU3RvcmFnZUFwaVxuICogQGV4dGVuZHMge0Jhc2VBUEl9XG4gKi9cbmNsYXNzIFN0b3JhZ2VBcGkgZXh0ZW5kcyBiYXNlXzEuQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBhcGkgd2lsbCBoZWxwIHlvdSByZW50IHVuaXRzIG9mIHN0b3JhZ2UgZm9yIGFuIHllYXIgZm9yIGEgc3BlY2lmaWMgRklELiBBIHN0b3JhZ2UgdW5pdCBsZXRzIHlvdSBzdG9yZSA1MDAwIGNhc3RzLCAyNTAwIHJlYWN0aW9ucyBhbmQgMjUwMCBsaW5rcy5cbiAgICAgKiBAc3VtbWFyeSBCdXkgc3RvcmFnZVxuICAgICAqIEBwYXJhbSB7U3RvcmFnZUFwaUJ1eVN0b3JhZ2VSZXF1ZXN0fSByZXF1ZXN0UGFyYW1ldGVycyBSZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBTdG9yYWdlQXBpXG4gICAgICogQHJldHVybnMge1Byb21pc2U8U3RvcmFnZUFsbG9jYXRpb25zUmVzcG9uc2U+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIGBTdG9yYWdlQWxsb2NhdGlvbnNSZXNwb25zZWAgb2JqZWN0XG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcmVmZXIgdG8gdGhlIFtBUEkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm5leW5hci5jb20vcmVmZXJlbmNlL2J1eS1zdG9yYWdlKVxuICAgICAqXG4gICAgICovXG4gICAgYnV5U3RvcmFnZShyZXF1ZXN0UGFyYW1ldGVycywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIGV4cG9ydHMuU3RvcmFnZUFwaUZwKSh0aGlzLmNvbmZpZ3VyYXRpb24pLmJ1eVN0b3JhZ2UocmVxdWVzdFBhcmFtZXRlcnMuYnV5U3RvcmFnZVJlcUJvZHksIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHN0b3JhZ2UgYWxsb2NhdGlvbnMgZm9yIGEgZ2l2ZW4gdXNlclxuICAgICAqIEBzdW1tYXJ5IEFsbG9jYXRpb24gb2YgdXNlclxuICAgICAqIEBwYXJhbSB7U3RvcmFnZUFwaUxvb2t1cFVzZXJTdG9yYWdlQWxsb2NhdGlvbnNSZXF1ZXN0fSByZXF1ZXN0UGFyYW1ldGVycyBSZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBTdG9yYWdlQXBpXG4gICAgICogQHJldHVybnMge1Byb21pc2U8U3RvcmFnZUFsbG9jYXRpb25zUmVzcG9uc2U+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIGBTdG9yYWdlQWxsb2NhdGlvbnNSZXNwb25zZWAgb2JqZWN0XG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcmVmZXIgdG8gdGhlIFtBUEkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm5leW5hci5jb20vcmVmZXJlbmNlL2xvb2t1cC11c2VyLXN0b3JhZ2UtYWxsb2NhdGlvbnMpXG4gICAgICpcbiAgICAgKi9cbiAgICBsb29rdXBVc2VyU3RvcmFnZUFsbG9jYXRpb25zKHJlcXVlc3RQYXJhbWV0ZXJzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5TdG9yYWdlQXBpRnApKHRoaXMuY29uZmlndXJhdGlvbikubG9va3VwVXNlclN0b3JhZ2VBbGxvY2F0aW9ucyhyZXF1ZXN0UGFyYW1ldGVycy5maWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHN0b3JhZ2UgdXNhZ2UgZm9yIGEgZ2l2ZW4gdXNlclxuICAgICAqIEBzdW1tYXJ5IFVzYWdlIG9mIHVzZXJcbiAgICAgKiBAcGFyYW0ge1N0b3JhZ2VBcGlMb29rdXBVc2VyU3RvcmFnZVVzYWdlUmVxdWVzdH0gcmVxdWVzdFBhcmFtZXRlcnMgUmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgU3RvcmFnZUFwaVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFN0b3JhZ2VVc2FnZVJlc3BvbnNlPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBgU3RvcmFnZVVzYWdlUmVzcG9uc2VgIG9iamVjdFxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9sb29rdXAtdXNlci1zdG9yYWdlLXVzYWdlKVxuICAgICAqXG4gICAgICovXG4gICAgbG9va3VwVXNlclN0b3JhZ2VVc2FnZShyZXF1ZXN0UGFyYW1ldGVycywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIGV4cG9ydHMuU3RvcmFnZUFwaUZwKSh0aGlzLmNvbmZpZ3VyYXRpb24pLmxvb2t1cFVzZXJTdG9yYWdlVXNhZ2UocmVxdWVzdFBhcmFtZXRlcnMuZmlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG59XG5leHBvcnRzLlN0b3JhZ2VBcGkgPSBTdG9yYWdlQXBpO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN0b3JhZ2VBcGkiLCJTdG9yYWdlQXBpRmFjdG9yeSIsIlN0b3JhZ2VBcGlGcCIsIlN0b3JhZ2VBcGlBeGlvc1BhcmFtQ3JlYXRvciIsImF4aW9zXzEiLCJyZXF1aXJlIiwiY29tbW9uXzEiLCJiYXNlXzEiLCJjb25maWd1cmF0aW9uIiwiYnV5U3RvcmFnZSIsImJ1eVN0b3JhZ2VSZXFCb2R5Iiwib3B0aW9ucyIsImFzc2VydFBhcmFtRXhpc3RzIiwibG9jYWxWYXJQYXRoIiwibG9jYWxWYXJVcmxPYmoiLCJVUkwiLCJEVU1NWV9CQVNFX1VSTCIsImJhc2VPcHRpb25zIiwibG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyIsImFzc2lnbiIsIm1ldGhvZCIsImxvY2FsVmFySGVhZGVyUGFyYW1ldGVyIiwibG9jYWxWYXJRdWVyeVBhcmFtZXRlciIsInNldEFwaUtleVRvT2JqZWN0Iiwic2V0U2VhcmNoUGFyYW1zIiwiaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyIsImhlYWRlcnMiLCJkYXRhIiwic2VyaWFsaXplRGF0YUlmTmVlZGVkIiwidXJsIiwidG9QYXRoU3RyaW5nIiwibG9va3VwVXNlclN0b3JhZ2VBbGxvY2F0aW9ucyIsImZpZCIsInVuZGVmaW5lZCIsImxvb2t1cFVzZXJTdG9yYWdlVXNhZ2UiLCJsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yIiwiX2EiLCJfYiIsIl9jIiwibG9jYWxWYXJBeGlvc0FyZ3MiLCJsb2NhbFZhck9wZXJhdGlvblNlcnZlckluZGV4Iiwic2VydmVySW5kZXgiLCJsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoIiwib3BlcmF0aW9uU2VydmVyTWFwIiwiYXhpb3MiLCJiYXNlUGF0aCIsImNyZWF0ZVJlcXVlc3RGdW5jdGlvbiIsImRlZmF1bHQiLCJCQVNFX1BBVEgiLCJsb2NhbFZhckZwIiwicmVxdWVzdFBhcmFtZXRlcnMiLCJ0aGVuIiwicmVxdWVzdCIsIkJhc2VBUEkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/storage-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/subscribers-api.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/subscribers-api.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SubscribersApi = exports.SubscribersApiFactory = exports.SubscribersApiFp = exports.SubscribersApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * SubscribersApi - axios parameter creator\n * @export\n */ const SubscribersApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch what FIDs and contracts a FID is subscribed to.\n         * @summary Subscribed to\n         * @param {number} fid\n         * @param {SubscriptionProvider} subscriptionProvider\n         * @param {number} [viewerFid]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)\n         *\n         */ fetchSubscribedToForFid: async (fid, subscriptionProvider, viewerFid, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscribedToForFid\", \"fid\", fid);\n            // verify required parameter 'subscriptionProvider' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscribedToForFid\", \"subscriptionProvider\", subscriptionProvider);\n            const localVarPath = `/farcaster/user/subscribed_to`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (subscriptionProvider !== undefined) {\n                localVarQueryParameter[\"subscription_provider\"] = subscriptionProvider;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch subscribers for a given FID\\'s contracts. Doesn\\'t return addresses that don\\'t have an FID.\n         * @summary Subscribers of a user\n         * @param {number} fid\n         * @param {SubscriptionProviders} subscriptionProvider\n         * @param {number} [viewerFid]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)\n         *\n         */ fetchSubscribersForFid: async (fid, subscriptionProvider, viewerFid, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscribersForFid\", \"fid\", fid);\n            // verify required parameter 'subscriptionProvider' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscribersForFid\", \"subscriptionProvider\", subscriptionProvider);\n            const localVarPath = `/farcaster/user/subscribers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (subscriptionProvider !== undefined) {\n                localVarQueryParameter[\"subscription_provider\"] = subscriptionProvider;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Check if a wallet address is subscribed to a given STP (Hypersub) contract.\n         * @summary Hypersub subscription check\n         * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time\n         * @param {string} contractAddress Ethereum address of the STP contract\n         * @param {string} chainId Chain ID of the STP contract\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)\n         *\n         */ fetchSubscriptionCheck: async (addresses, contractAddress, chainId, options = {})=>{\n            // verify required parameter 'addresses' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscriptionCheck\", \"addresses\", addresses);\n            // verify required parameter 'contractAddress' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscriptionCheck\", \"contractAddress\", contractAddress);\n            // verify required parameter 'chainId' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscriptionCheck\", \"chainId\", chainId);\n            const localVarPath = `/stp/subscription_check`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (addresses !== undefined) {\n                localVarQueryParameter[\"addresses\"] = addresses;\n            }\n            if (contractAddress !== undefined) {\n                localVarQueryParameter[\"contract_address\"] = contractAddress;\n            }\n            if (chainId !== undefined) {\n                localVarQueryParameter[\"chain_id\"] = chainId;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch created subscriptions for a given FID\\'s.\n         * @summary Subscriptions created by FID\n         * @param {number} fid\n         * @param {SubscriptionProvider} subscriptionProvider\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)\n         *\n         */ fetchSubscriptionsForFid: async (fid, subscriptionProvider, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscriptionsForFid\", \"fid\", fid);\n            // verify required parameter 'subscriptionProvider' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchSubscriptionsForFid\", \"subscriptionProvider\", subscriptionProvider);\n            const localVarPath = `/farcaster/user/subscriptions_created`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (subscriptionProvider !== undefined) {\n                localVarQueryParameter[\"subscription_provider\"] = subscriptionProvider;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.SubscribersApiAxiosParamCreator = SubscribersApiAxiosParamCreator;\n/**\n * SubscribersApi - functional programming interface\n * @export\n */ const SubscribersApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.SubscribersApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch what FIDs and contracts a FID is subscribed to.\n         * @summary Subscribed to\n         * @param {number} fid\n         * @param {SubscriptionProvider} subscriptionProvider\n         * @param {number} [viewerFid]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)\n         *\n         */ async fetchSubscribedToForFid (fid, subscriptionProvider, viewerFid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscribedToForFid(fid, subscriptionProvider, viewerFid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SubscribersApi.fetchSubscribedToForFid\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch subscribers for a given FID\\'s contracts. Doesn\\'t return addresses that don\\'t have an FID.\n         * @summary Subscribers of a user\n         * @param {number} fid\n         * @param {SubscriptionProviders} subscriptionProvider\n         * @param {number} [viewerFid]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)\n         *\n         */ async fetchSubscribersForFid (fid, subscriptionProvider, viewerFid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscribersForFid(fid, subscriptionProvider, viewerFid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SubscribersApi.fetchSubscribersForFid\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Check if a wallet address is subscribed to a given STP (Hypersub) contract.\n         * @summary Hypersub subscription check\n         * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time\n         * @param {string} contractAddress Ethereum address of the STP contract\n         * @param {string} chainId Chain ID of the STP contract\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)\n         *\n         */ async fetchSubscriptionCheck (addresses, contractAddress, chainId, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscriptionCheck(addresses, contractAddress, chainId, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SubscribersApi.fetchSubscriptionCheck\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch created subscriptions for a given FID\\'s.\n         * @summary Subscriptions created by FID\n         * @param {number} fid\n         * @param {SubscriptionProvider} subscriptionProvider\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)\n         *\n         */ async fetchSubscriptionsForFid (fid, subscriptionProvider, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscriptionsForFid(fid, subscriptionProvider, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"SubscribersApi.fetchSubscriptionsForFid\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.SubscribersApiFp = SubscribersApiFp;\n/**\n * SubscribersApi - factory interface\n * @export\n */ const SubscribersApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.SubscribersApiFp)(configuration);\n    return {\n        /**\n         * Fetch what FIDs and contracts a FID is subscribed to.\n         * @summary Subscribed to\n         * @param {SubscribersApiFetchSubscribedToForFidRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)\n         *\n         */ fetchSubscribedToForFid (requestParameters, options) {\n            return localVarFp.fetchSubscribedToForFid(requestParameters.fid, requestParameters.subscriptionProvider, requestParameters.viewerFid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch subscribers for a given FID\\'s contracts. Doesn\\'t return addresses that don\\'t have an FID.\n         * @summary Subscribers of a user\n         * @param {SubscribersApiFetchSubscribersForFidRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)\n         *\n         */ fetchSubscribersForFid (requestParameters, options) {\n            return localVarFp.fetchSubscribersForFid(requestParameters.fid, requestParameters.subscriptionProvider, requestParameters.viewerFid, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Check if a wallet address is subscribed to a given STP (Hypersub) contract.\n         * @summary Hypersub subscription check\n         * @param {SubscribersApiFetchSubscriptionCheckRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)\n         *\n         */ fetchSubscriptionCheck (requestParameters, options) {\n            return localVarFp.fetchSubscriptionCheck(requestParameters.addresses, requestParameters.contractAddress, requestParameters.chainId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch created subscriptions for a given FID\\'s.\n         * @summary Subscriptions created by FID\n         * @param {SubscribersApiFetchSubscriptionsForFidRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)\n         *\n         */ fetchSubscriptionsForFid (requestParameters, options) {\n            return localVarFp.fetchSubscriptionsForFid(requestParameters.fid, requestParameters.subscriptionProvider, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.SubscribersApiFactory = SubscribersApiFactory;\n/**\n * SubscribersApi - object-oriented interface\n * @export\n * @class SubscribersApi\n * @extends {BaseAPI}\n */ class SubscribersApi extends base_1.BaseAPI {\n    /**\n     * Fetch what FIDs and contracts a FID is subscribed to.\n     * @summary Subscribed to\n     * @param {SubscribersApiFetchSubscribedToForFidRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscribersApi\n     * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)\n     *\n     */ fetchSubscribedToForFid(requestParameters, options) {\n        return (0, exports.SubscribersApiFp)(this.configuration).fetchSubscribedToForFid(requestParameters.fid, requestParameters.subscriptionProvider, requestParameters.viewerFid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch subscribers for a given FID\\'s contracts. Doesn\\'t return addresses that don\\'t have an FID.\n     * @summary Subscribers of a user\n     * @param {SubscribersApiFetchSubscribersForFidRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscribersApi\n     * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)\n     *\n     */ fetchSubscribersForFid(requestParameters, options) {\n        return (0, exports.SubscribersApiFp)(this.configuration).fetchSubscribersForFid(requestParameters.fid, requestParameters.subscriptionProvider, requestParameters.viewerFid, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Check if a wallet address is subscribed to a given STP (Hypersub) contract.\n     * @summary Hypersub subscription check\n     * @param {SubscribersApiFetchSubscriptionCheckRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscribersApi\n     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)\n     *\n     */ fetchSubscriptionCheck(requestParameters, options) {\n        return (0, exports.SubscribersApiFp)(this.configuration).fetchSubscriptionCheck(requestParameters.addresses, requestParameters.contractAddress, requestParameters.chainId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch created subscriptions for a given FID\\'s.\n     * @summary Subscriptions created by FID\n     * @param {SubscribersApiFetchSubscriptionsForFidRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SubscribersApi\n     * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)\n     *\n     */ fetchSubscriptionsForFid(requestParameters, options) {\n        return (0, exports.SubscribersApiFp)(this.configuration).fetchSubscriptionsForFid(requestParameters.fid, requestParameters.subscriptionProvider, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.SubscribersApi = SubscribersApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/subscribers-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/user-api.js":
/*!********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/user-api.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * UserApi - axios parameter creator\n * @export\n */ const UserApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Removes verification for an eth address for the user \\\\ (In order to delete verification `signer_uuid` must be approved)\n         * @summary Delete verification\n         * @param {RemoveVerificationReqBody} removeVerificationReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-verification)\n         *\n         */ deleteVerification: async (removeVerificationReqBody, options = {})=>{\n            // verify required parameter 'removeVerificationReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"deleteVerification\", \"removeVerificationReqBody\", removeVerificationReqBody);\n            const localVarPath = `/farcaster/user/verification`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(removeVerificationReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches information about multiple users based on FIDs\n         * @summary By FIDs\n         * @param {string} fids Comma separated list of FIDs, up to 100 at a time\n         * @param {number} [viewerFid]\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users)\n         *\n         */ fetchBulkUsers: async (fids, viewerFid, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'fids' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchBulkUsers\", \"fids\", fids);\n            const localVarPath = `/farcaster/user/bulk`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fids !== undefined) {\n                localVarQueryParameter[\"fids\"] = fids;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.\n         * @summary By Eth or Sol addresses\n         * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time\n         * @param {Array<BulkUserAddressType>} [addressTypes] Customize which address types the request should search for. This is a comma-separated string that can include the following values: \\&#39;custody_address\\&#39; and \\&#39;verified_address\\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.\n         * @param {number} [viewerFid]\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersByAddressResponse>} A promise that resolves to a `BulkUsersByAddressResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users-by-eth-or-sol-address)\n         *\n         */ fetchBulkUsersByEthOrSolAddress: async (addresses, addressTypes, viewerFid, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'addresses' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchBulkUsersByEthOrSolAddress\", \"addresses\", addresses);\n            const localVarPath = `/farcaster/user/bulk-by-address`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (addresses !== undefined) {\n                localVarQueryParameter[\"addresses\"] = addresses;\n            }\n            if (addressTypes) {\n                localVarQueryParameter[\"address_types\"] = addressTypes.join(base_1.COLLECTION_FORMATS.csv);\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches power users based on Warpcast power badges. Information is updated once a day.\n         * @summary Power users\n         * @param {number} [viewerFid]\n         * @param {number} [limit] Number of power users to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users)\n         *\n         */ fetchPowerUsers: async (viewerFid, limit, cursor, xNeynarExperimental, options = {})=>{\n            const localVarPath = `/farcaster/user/power`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches power users and respond in a backwards compatible format to Warpcast\\'s deprecated power badge endpoint.\n         * @summary Power user FIDs\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserPowerLiteResponse>} A promise that resolves to a `UserPowerLiteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users-lite)\n         *\n         */ fetchPowerUsersLite: async (xNeynarExperimental, options = {})=>{\n            const localVarPath = `/farcaster/user/power_lite`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches a list of users given a location\n         * @summary By location\n         * @param {number} latitude Latitude of the location\n         * @param {number} longitude Longitude of the location\n         * @param {number} [viewerFid] FID of the user viewing the feed. Providing this will return a list of users that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-by-location)\n         *\n         */ fetchUsersByLocation: async (latitude, longitude, viewerFid, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'latitude' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUsersByLocation\", \"latitude\", latitude);\n            // verify required parameter 'longitude' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUsersByLocation\", \"longitude\", longitude);\n            const localVarPath = `/farcaster/user/by_location`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (latitude !== undefined) {\n                localVarQueryParameter[\"latitude\"] = latitude;\n            }\n            if (longitude !== undefined) {\n                localVarQueryParameter[\"longitude\"] = longitude;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Follow a user \\\\ (In order to follow a user `signer_uuid` must be approved)\n         * @summary Follow user\n         * @param {FollowReqBody} followReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-user)\n         *\n         */ followUser: async (followReqBody, options = {})=>{\n            // verify required parameter 'followReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"followUser\", \"followReqBody\", followReqBody);\n            const localVarPath = `/farcaster/user/follow`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(followReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches FID to [assign it to new user](https://docs.neynar.com/reference/register-account)\n         * @summary Fetch fresh FID\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserFIDResponse>} A promise that resolves to a `UserFIDResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/get-fresh-account-fid)\n         *\n         */ getFreshAccountFID: async (xNeynarExperimental, options = {})=>{\n            const localVarPath = `/farcaster/user/fid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Lookup a user by custody-address\n         * @summary By custody-address\n         * @param {string} custodyAddress Custody Address associated with mnemonic\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-custody-address)\n         *\n         */ lookupUserByCustodyAddress: async (custodyAddress, options = {})=>{\n            // verify required parameter 'custodyAddress' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUserByCustodyAddress\", \"custodyAddress\", custodyAddress);\n            const localVarPath = `/farcaster/user/custody-address`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (custodyAddress !== undefined) {\n                localVarQueryParameter[\"custody_address\"] = custodyAddress;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches a single hydrated user object given a username\n         * @summary By username\n         * @param {string} username Username of the user to fetch\n         * @param {number} [viewerFid]\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-username)\n         *\n         */ lookupUserByUsername: async (username, viewerFid, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'username' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUserByUsername\", \"username\", username);\n            const localVarPath = `/farcaster/user/by_username`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (username !== undefined) {\n                localVarQueryParameter[\"username\"] = username;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetches the users who have verified the specified X (Twitter) username\n         * @summary By X username\n         * @param {string} xUsername X (Twitter) username to search for, without the @ symbol\n         * @param {number} [viewerFid] FID of the viewer for contextual information like follows and blocks\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-users-by-x-username)\n         *\n         */ lookupUsersByXUsername: async (xUsername, viewerFid, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'xUsername' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUsersByXUsername\", \"xUsername\", xUsername);\n            const localVarPath = `/farcaster/user/by_x_username`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (xUsername !== undefined) {\n                localVarQueryParameter[\"x_username\"] = xUsername;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Adds verification for an eth address or contract for the user \\\\ (In order to add verification `signer_uuid` must be approved)\n         * @summary Add verification\n         * @param {AddVerificationReqBody} addVerificationReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-verification)\n         *\n         */ publishVerification: async (addVerificationReqBody, options = {})=>{\n            // verify required parameter 'addVerificationReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishVerification\", \"addVerificationReqBody\", addVerificationReqBody);\n            const localVarPath = `/farcaster/user/verification`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addVerificationReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Register account on farcaster.  **Note:** This API must be called within 10 minutes of the fetch FID API call (i.e., /v2/farcaster/user/fid). Otherwise, Neynar will assign this FID to another available user.\n         * @summary Register new account\n         * @param {RegisterUserReqBody} registerUserReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RegisterUserResponse>} A promise that resolves to a `RegisterUserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account)\n         *\n         */ registerAccount: async (registerUserReqBody, options = {})=>{\n            // verify required parameter 'registerUserReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"registerAccount\", \"registerUserReqBody\", registerUserReqBody);\n            const localVarPath = `/farcaster/user`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(registerUserReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Search for Usernames\n         * @summary Search for Usernames\n         * @param {string} q\n         * @param {number} [viewerFid] Providing this will return search results that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of users to fetch  (Default: 5, Maximum: 10)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserSearchResponse>} A promise that resolves to a `UserSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-user)\n         *\n         */ searchUser: async (q, viewerFid, limit, cursor, xNeynarExperimental, options = {})=>{\n            // verify required parameter 'q' is not null or undefined\n            (0, common_1.assertParamExists)(\"searchUser\", \"q\", q);\n            const localVarPath = `/farcaster/user/search`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (q !== undefined) {\n                localVarQueryParameter[\"q\"] = q;\n            }\n            if (viewerFid !== undefined) {\n                localVarQueryParameter[\"viewer_fid\"] = viewerFid;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (cursor !== undefined) {\n                localVarQueryParameter[\"cursor\"] = cursor;\n            }\n            if (xNeynarExperimental != null) {\n                localVarHeaderParameter[\"x-neynar-experimental\"] = typeof xNeynarExperimental === \"string\" ? xNeynarExperimental : JSON.stringify(xNeynarExperimental);\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Unfollow a user \\\\ (In order to unfollow a user `signer_uuid` must be approved)\n         * @summary Unfollow user\n         * @param {FollowReqBody} followReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-user)\n         *\n         */ unfollowUser: async (followReqBody, options = {})=>{\n            // verify required parameter 'followReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"unfollowUser\", \"followReqBody\", followReqBody);\n            const localVarPath = `/farcaster/user/follow`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(followReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Update user profile \\\\ (In order to update user\\'s profile `signer_uuid` must be approved)\n         * @summary Update user profile\n         * @param {UpdateUserReqBody} updateUserReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-user)\n         *\n         */ updateUser: async (updateUserReqBody, options = {})=>{\n            // verify required parameter 'updateUserReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"updateUser\", \"updateUserReqBody\", updateUserReqBody);\n            const localVarPath = `/farcaster/user`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"PATCH\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateUserReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;\n/**\n * UserApi - functional programming interface\n * @export\n */ const UserApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.UserApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Removes verification for an eth address for the user \\\\ (In order to delete verification `signer_uuid` must be approved)\n         * @summary Delete verification\n         * @param {RemoveVerificationReqBody} removeVerificationReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-verification)\n         *\n         */ async deleteVerification (removeVerificationReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVerification(removeVerificationReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.deleteVerification\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches information about multiple users based on FIDs\n         * @summary By FIDs\n         * @param {string} fids Comma separated list of FIDs, up to 100 at a time\n         * @param {number} [viewerFid]\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users)\n         *\n         */ async fetchBulkUsers (fids, viewerFid, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBulkUsers(fids, viewerFid, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.fetchBulkUsers\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.\n         * @summary By Eth or Sol addresses\n         * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time\n         * @param {Array<BulkUserAddressType>} [addressTypes] Customize which address types the request should search for. This is a comma-separated string that can include the following values: \\&#39;custody_address\\&#39; and \\&#39;verified_address\\&#39;. By default api returns both. To select multiple types, use a comma-separated list of these values.\n         * @param {number} [viewerFid]\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersByAddressResponse>} A promise that resolves to a `BulkUsersByAddressResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users-by-eth-or-sol-address)\n         *\n         */ async fetchBulkUsersByEthOrSolAddress (addresses, addressTypes, viewerFid, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBulkUsersByEthOrSolAddress(addresses, addressTypes, viewerFid, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.fetchBulkUsersByEthOrSolAddress\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches power users based on Warpcast power badges. Information is updated once a day.\n         * @summary Power users\n         * @param {number} [viewerFid]\n         * @param {number} [limit] Number of power users to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users)\n         *\n         */ async fetchPowerUsers (viewerFid, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPowerUsers(viewerFid, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.fetchPowerUsers\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches power users and respond in a backwards compatible format to Warpcast\\'s deprecated power badge endpoint.\n         * @summary Power user FIDs\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserPowerLiteResponse>} A promise that resolves to a `UserPowerLiteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users-lite)\n         *\n         */ async fetchPowerUsersLite (xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPowerUsersLite(xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.fetchPowerUsersLite\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches a list of users given a location\n         * @summary By location\n         * @param {number} latitude Latitude of the location\n         * @param {number} longitude Longitude of the location\n         * @param {number} [viewerFid] FID of the user viewing the feed. Providing this will return a list of users that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)\n         * @param {string} [cursor] Pagination cursor\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-by-location)\n         *\n         */ async fetchUsersByLocation (latitude, longitude, viewerFid, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsersByLocation(latitude, longitude, viewerFid, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.fetchUsersByLocation\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Follow a user \\\\ (In order to follow a user `signer_uuid` must be approved)\n         * @summary Follow user\n         * @param {FollowReqBody} followReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-user)\n         *\n         */ async followUser (followReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.followUser(followReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.followUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches FID to [assign it to new user](https://docs.neynar.com/reference/register-account)\n         * @summary Fetch fresh FID\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserFIDResponse>} A promise that resolves to a `UserFIDResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/get-fresh-account-fid)\n         *\n         */ async getFreshAccountFID (xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getFreshAccountFID(xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.getFreshAccountFID\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Lookup a user by custody-address\n         * @summary By custody-address\n         * @param {string} custodyAddress Custody Address associated with mnemonic\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-custody-address)\n         *\n         */ async lookupUserByCustodyAddress (custodyAddress, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupUserByCustodyAddress(custodyAddress, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.lookupUserByCustodyAddress\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches a single hydrated user object given a username\n         * @summary By username\n         * @param {string} username Username of the user to fetch\n         * @param {number} [viewerFid]\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-username)\n         *\n         */ async lookupUserByUsername (username, viewerFid, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupUserByUsername(username, viewerFid, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.lookupUserByUsername\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetches the users who have verified the specified X (Twitter) username\n         * @summary By X username\n         * @param {string} xUsername X (Twitter) username to search for, without the @ symbol\n         * @param {number} [viewerFid] FID of the viewer for contextual information like follows and blocks\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-users-by-x-username)\n         *\n         */ async lookupUsersByXUsername (xUsername, viewerFid, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupUsersByXUsername(xUsername, viewerFid, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.lookupUsersByXUsername\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Adds verification for an eth address or contract for the user \\\\ (In order to add verification `signer_uuid` must be approved)\n         * @summary Add verification\n         * @param {AddVerificationReqBody} addVerificationReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-verification)\n         *\n         */ async publishVerification (addVerificationReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishVerification(addVerificationReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.publishVerification\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Register account on farcaster.  **Note:** This API must be called within 10 minutes of the fetch FID API call (i.e., /v2/farcaster/user/fid). Otherwise, Neynar will assign this FID to another available user.\n         * @summary Register new account\n         * @param {RegisterUserReqBody} registerUserReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RegisterUserResponse>} A promise that resolves to a `RegisterUserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account)\n         *\n         */ async registerAccount (registerUserReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAccount(registerUserReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.registerAccount\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Search for Usernames\n         * @summary Search for Usernames\n         * @param {string} q\n         * @param {number} [viewerFid] Providing this will return search results that respects this user\\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.\n         * @param {number} [limit] Number of users to fetch  (Default: 5, Maximum: 10)\n         * @param {string} [cursor] Pagination cursor.\n         * @param {boolean} [xNeynarExperimental] Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserSearchResponse>} A promise that resolves to a `UserSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-user)\n         *\n         */ async searchUser (q, viewerFid, limit, cursor, xNeynarExperimental, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUser(q, viewerFid, limit, cursor, xNeynarExperimental, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.searchUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Unfollow a user \\\\ (In order to unfollow a user `signer_uuid` must be approved)\n         * @summary Unfollow user\n         * @param {FollowReqBody} followReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-user)\n         *\n         */ async unfollowUser (followReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowUser(followReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.unfollowUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update user profile \\\\ (In order to update user\\'s profile `signer_uuid` must be approved)\n         * @summary Update user profile\n         * @param {UpdateUserReqBody} updateUserReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-user)\n         *\n         */ async updateUser (updateUserReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(updateUserReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserApi.updateUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.UserApiFp = UserApiFp;\n/**\n * UserApi - factory interface\n * @export\n */ const UserApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.UserApiFp)(configuration);\n    return {\n        /**\n         * Removes verification for an eth address for the user \\\\ (In order to delete verification `signer_uuid` must be approved)\n         * @summary Delete verification\n         * @param {UserApiDeleteVerificationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-verification)\n         *\n         */ deleteVerification (requestParameters, options) {\n            return localVarFp.deleteVerification(requestParameters.removeVerificationReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches information about multiple users based on FIDs\n         * @summary By FIDs\n         * @param {UserApiFetchBulkUsersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users)\n         *\n         */ fetchBulkUsers (requestParameters, options) {\n            return localVarFp.fetchBulkUsers(requestParameters.fids, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.\n         * @summary By Eth or Sol addresses\n         * @param {UserApiFetchBulkUsersByEthOrSolAddressRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersByAddressResponse>} A promise that resolves to a `BulkUsersByAddressResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users-by-eth-or-sol-address)\n         *\n         */ fetchBulkUsersByEthOrSolAddress (requestParameters, options) {\n            return localVarFp.fetchBulkUsersByEthOrSolAddress(requestParameters.addresses, requestParameters.addressTypes, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches power users based on Warpcast power badges. Information is updated once a day.\n         * @summary Power users\n         * @param {UserApiFetchPowerUsersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users)\n         *\n         */ fetchPowerUsers (requestParameters = {}, options) {\n            return localVarFp.fetchPowerUsers(requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches power users and respond in a backwards compatible format to Warpcast\\'s deprecated power badge endpoint.\n         * @summary Power user FIDs\n         * @param {UserApiFetchPowerUsersLiteRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserPowerLiteResponse>} A promise that resolves to a `UserPowerLiteResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users-lite)\n         *\n         */ fetchPowerUsersLite (requestParameters = {}, options) {\n            return localVarFp.fetchPowerUsersLite(requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches a list of users given a location\n         * @summary By location\n         * @param {UserApiFetchUsersByLocationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-by-location)\n         *\n         */ fetchUsersByLocation (requestParameters, options) {\n            return localVarFp.fetchUsersByLocation(requestParameters.latitude, requestParameters.longitude, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Follow a user \\\\ (In order to follow a user `signer_uuid` must be approved)\n         * @summary Follow user\n         * @param {UserApiFollowUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-user)\n         *\n         */ followUser (requestParameters, options) {\n            return localVarFp.followUser(requestParameters.followReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches FID to [assign it to new user](https://docs.neynar.com/reference/register-account)\n         * @summary Fetch fresh FID\n         * @param {UserApiGetFreshAccountFIDRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserFIDResponse>} A promise that resolves to a `UserFIDResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/get-fresh-account-fid)\n         *\n         */ getFreshAccountFID (requestParameters = {}, options) {\n            return localVarFp.getFreshAccountFID(requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Lookup a user by custody-address\n         * @summary By custody-address\n         * @param {UserApiLookupUserByCustodyAddressRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-custody-address)\n         *\n         */ lookupUserByCustodyAddress (requestParameters, options) {\n            return localVarFp.lookupUserByCustodyAddress(requestParameters.custodyAddress, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches a single hydrated user object given a username\n         * @summary By username\n         * @param {UserApiLookupUserByUsernameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-username)\n         *\n         */ lookupUserByUsername (requestParameters, options) {\n            return localVarFp.lookupUserByUsername(requestParameters.username, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetches the users who have verified the specified X (Twitter) username\n         * @summary By X username\n         * @param {UserApiLookupUsersByXUsernameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-users-by-x-username)\n         *\n         */ lookupUsersByXUsername (requestParameters, options) {\n            return localVarFp.lookupUsersByXUsername(requestParameters.xUsername, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Adds verification for an eth address or contract for the user \\\\ (In order to add verification `signer_uuid` must be approved)\n         * @summary Add verification\n         * @param {UserApiPublishVerificationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-verification)\n         *\n         */ publishVerification (requestParameters, options) {\n            return localVarFp.publishVerification(requestParameters.addVerificationReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Register account on farcaster.  **Note:** This API must be called within 10 minutes of the fetch FID API call (i.e., /v2/farcaster/user/fid). Otherwise, Neynar will assign this FID to another available user.\n         * @summary Register new account\n         * @param {UserApiRegisterAccountRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<RegisterUserResponse>} A promise that resolves to a `RegisterUserResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account)\n         *\n         */ registerAccount (requestParameters, options) {\n            return localVarFp.registerAccount(requestParameters.registerUserReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Search for Usernames\n         * @summary Search for Usernames\n         * @param {UserApiSearchUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserSearchResponse>} A promise that resolves to a `UserSearchResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-user)\n         *\n         */ searchUser (requestParameters, options) {\n            return localVarFp.searchUser(requestParameters.q, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Unfollow a user \\\\ (In order to unfollow a user `signer_uuid` must be approved)\n         * @summary Unfollow user\n         * @param {UserApiUnfollowUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-user)\n         *\n         */ unfollowUser (requestParameters, options) {\n            return localVarFp.unfollowUser(requestParameters.followReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Update user profile \\\\ (In order to update user\\'s profile `signer_uuid` must be approved)\n         * @summary Update user profile\n         * @param {UserApiUpdateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-user)\n         *\n         */ updateUser (requestParameters, options) {\n            return localVarFp.updateUser(requestParameters.updateUserReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.UserApiFactory = UserApiFactory;\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */ class UserApi extends base_1.BaseAPI {\n    /**\n     * Removes verification for an eth address for the user \\\\ (In order to delete verification `signer_uuid` must be approved)\n     * @summary Delete verification\n     * @param {UserApiDeleteVerificationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-verification)\n     *\n     */ deleteVerification(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).deleteVerification(requestParameters.removeVerificationReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches information about multiple users based on FIDs\n     * @summary By FIDs\n     * @param {UserApiFetchBulkUsersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users)\n     *\n     */ fetchBulkUsers(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).fetchBulkUsers(requestParameters.fids, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.\n     * @summary By Eth or Sol addresses\n     * @param {UserApiFetchBulkUsersByEthOrSolAddressRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<BulkUsersByAddressResponse>} A promise that resolves to a `BulkUsersByAddressResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users-by-eth-or-sol-address)\n     *\n     */ fetchBulkUsersByEthOrSolAddress(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).fetchBulkUsersByEthOrSolAddress(requestParameters.addresses, requestParameters.addressTypes, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches power users based on Warpcast power badges. Information is updated once a day.\n     * @summary Power users\n     * @param {UserApiFetchPowerUsersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users)\n     *\n     */ fetchPowerUsers(requestParameters = {}, options) {\n        return (0, exports.UserApiFp)(this.configuration).fetchPowerUsers(requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches power users and respond in a backwards compatible format to Warpcast\\'s deprecated power badge endpoint.\n     * @summary Power user FIDs\n     * @param {UserApiFetchPowerUsersLiteRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<UserPowerLiteResponse>} A promise that resolves to a `UserPowerLiteResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users-lite)\n     *\n     */ fetchPowerUsersLite(requestParameters = {}, options) {\n        return (0, exports.UserApiFp)(this.configuration).fetchPowerUsersLite(requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches a list of users given a location\n     * @summary By location\n     * @param {UserApiFetchUsersByLocationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-by-location)\n     *\n     */ fetchUsersByLocation(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).fetchUsersByLocation(requestParameters.latitude, requestParameters.longitude, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Follow a user \\\\ (In order to follow a user `signer_uuid` must be approved)\n     * @summary Follow user\n     * @param {UserApiFollowUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-user)\n     *\n     */ followUser(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).followUser(requestParameters.followReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches FID to [assign it to new user](https://docs.neynar.com/reference/register-account)\n     * @summary Fetch fresh FID\n     * @param {UserApiGetFreshAccountFIDRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<UserFIDResponse>} A promise that resolves to a `UserFIDResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/get-fresh-account-fid)\n     *\n     */ getFreshAccountFID(requestParameters = {}, options) {\n        return (0, exports.UserApiFp)(this.configuration).getFreshAccountFID(requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Lookup a user by custody-address\n     * @summary By custody-address\n     * @param {UserApiLookupUserByCustodyAddressRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-custody-address)\n     *\n     */ lookupUserByCustodyAddress(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).lookupUserByCustodyAddress(requestParameters.custodyAddress, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches a single hydrated user object given a username\n     * @summary By username\n     * @param {UserApiLookupUserByUsernameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-username)\n     *\n     */ lookupUserByUsername(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).lookupUserByUsername(requestParameters.username, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetches the users who have verified the specified X (Twitter) username\n     * @summary By X username\n     * @param {UserApiLookupUsersByXUsernameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-users-by-x-username)\n     *\n     */ lookupUsersByXUsername(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).lookupUsersByXUsername(requestParameters.xUsername, requestParameters.viewerFid, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Adds verification for an eth address or contract for the user \\\\ (In order to add verification `signer_uuid` must be approved)\n     * @summary Add verification\n     * @param {UserApiPublishVerificationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-verification)\n     *\n     */ publishVerification(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).publishVerification(requestParameters.addVerificationReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Register account on farcaster.  **Note:** This API must be called within 10 minutes of the fetch FID API call (i.e., /v2/farcaster/user/fid). Otherwise, Neynar will assign this FID to another available user.\n     * @summary Register new account\n     * @param {UserApiRegisterAccountRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<RegisterUserResponse>} A promise that resolves to a `RegisterUserResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account)\n     *\n     */ registerAccount(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).registerAccount(requestParameters.registerUserReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Search for Usernames\n     * @summary Search for Usernames\n     * @param {UserApiSearchUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<UserSearchResponse>} A promise that resolves to a `UserSearchResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-user)\n     *\n     */ searchUser(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).searchUser(requestParameters.q, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, requestParameters.xNeynarExperimental, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Unfollow a user \\\\ (In order to unfollow a user `signer_uuid` must be approved)\n     * @summary Unfollow user\n     * @param {UserApiUnfollowUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-user)\n     *\n     */ unfollowUser(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).unfollowUser(requestParameters.followReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Update user profile \\\\ (In order to update user\\'s profile `signer_uuid` must be approved)\n     * @summary Update user profile\n     * @param {UserApiUpdateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-user)\n     *\n     */ updateUser(requestParameters, options) {\n        return (0, exports.UserApiFp)(this.configuration).updateUser(requestParameters.updateUserReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.UserApi = UserApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/user-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/webhook-api.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/apis/webhook-api.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebhookApi = exports.WebhookApiFactory = exports.WebhookApiFp = exports.WebhookApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n * WebhookApi - axios parameter creator\n * @export\n */ const WebhookApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {WebhookDeleteReqBody} webhookDeleteReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-webhook)\n         *\n         */ deleteWebhook: async (webhookDeleteReqBody, options = {})=>{\n            // verify required parameter 'webhookDeleteReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"deleteWebhook\", \"webhookDeleteReqBody\", webhookDeleteReqBody);\n            const localVarPath = `/farcaster/webhook`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"DELETE\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(webhookDeleteReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of webhooks associated to a user\n         * @summary Associated webhooks of user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookListResponse>} A promise that resolves to a `WebhookListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-webhooks)\n         *\n         */ fetchWebhooks: async (options = {})=>{\n            const localVarPath = `/farcaster/webhook/list`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a webhook\n         * @summary Fetch a webhook\n         * @param {string} webhookId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-webhook)\n         *\n         */ lookupWebhook: async (webhookId, options = {})=>{\n            // verify required parameter 'webhookId' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupWebhook\", \"webhookId\", webhookId);\n            const localVarPath = `/farcaster/webhook`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (webhookId !== undefined) {\n                localVarQueryParameter[\"webhook_id\"] = webhookId;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Create a webhook\n         * @summary Create a webhook\n         * @param {WebhookPostReqBody} webhookPostReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-webhook)\n         *\n         */ publishWebhook: async (webhookPostReqBody, options = {})=>{\n            // verify required parameter 'webhookPostReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishWebhook\", \"webhookPostReqBody\", webhookPostReqBody);\n            const localVarPath = `/farcaster/webhook`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(webhookPostReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {WebhookPutReqBody} webhookPutReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook)\n         *\n         */ updateWebhook: async (webhookPutReqBody, options = {})=>{\n            // verify required parameter 'webhookPutReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"updateWebhook\", \"webhookPutReqBody\", webhookPutReqBody);\n            const localVarPath = `/farcaster/webhook`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"PUT\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(webhookPutReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Update webhook active status\n         * @summary Update webhook status\n         * @param {WebhookPatchReqBody} webhookPatchReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook-active-status)\n         *\n         */ updateWebhookActiveStatus: async (webhookPatchReqBody, options = {})=>{\n            // verify required parameter 'webhookPatchReqBody' is not null or undefined\n            (0, common_1.assertParamExists)(\"updateWebhookActiveStatus\", \"webhookPatchReqBody\", webhookPatchReqBody);\n            const localVarPath = `/farcaster/webhook`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"PATCH\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(webhookPatchReqBody, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.WebhookApiAxiosParamCreator = WebhookApiAxiosParamCreator;\n/**\n * WebhookApi - functional programming interface\n * @export\n */ const WebhookApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.WebhookApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {WebhookDeleteReqBody} webhookDeleteReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-webhook)\n         *\n         */ async deleteWebhook (webhookDeleteReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(webhookDeleteReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"WebhookApi.deleteWebhook\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of webhooks associated to a user\n         * @summary Associated webhooks of user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookListResponse>} A promise that resolves to a `WebhookListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-webhooks)\n         *\n         */ async fetchWebhooks (options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchWebhooks(options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"WebhookApi.fetchWebhooks\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a webhook\n         * @summary Fetch a webhook\n         * @param {string} webhookId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-webhook)\n         *\n         */ async lookupWebhook (webhookId, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupWebhook(webhookId, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"WebhookApi.lookupWebhook\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Create a webhook\n         * @summary Create a webhook\n         * @param {WebhookPostReqBody} webhookPostReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-webhook)\n         *\n         */ async publishWebhook (webhookPostReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishWebhook(webhookPostReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"WebhookApi.publishWebhook\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {WebhookPutReqBody} webhookPutReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook)\n         *\n         */ async updateWebhook (webhookPutReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhook(webhookPutReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"WebhookApi.updateWebhook\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Update webhook active status\n         * @summary Update webhook status\n         * @param {WebhookPatchReqBody} webhookPatchReqBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook-active-status)\n         *\n         */ async updateWebhookActiveStatus (webhookPatchReqBody, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhookActiveStatus(webhookPatchReqBody, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"WebhookApi.updateWebhookActiveStatus\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.WebhookApiFp = WebhookApiFp;\n/**\n * WebhookApi - factory interface\n * @export\n */ const WebhookApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.WebhookApiFp)(configuration);\n    return {\n        /**\n         * Delete a webhook\n         * @summary Delete a webhook\n         * @param {WebhookApiDeleteWebhookRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-webhook)\n         *\n         */ deleteWebhook (requestParameters, options) {\n            return localVarFp.deleteWebhook(requestParameters.webhookDeleteReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of webhooks associated to a user\n         * @summary Associated webhooks of user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookListResponse>} A promise that resolves to a `WebhookListResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-webhooks)\n         *\n         */ fetchWebhooks (options) {\n            return localVarFp.fetchWebhooks(options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a webhook\n         * @summary Fetch a webhook\n         * @param {WebhookApiLookupWebhookRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-webhook)\n         *\n         */ lookupWebhook (requestParameters, options) {\n            return localVarFp.lookupWebhook(requestParameters.webhookId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Create a webhook\n         * @summary Create a webhook\n         * @param {WebhookApiPublishWebhookRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-webhook)\n         *\n         */ publishWebhook (requestParameters, options) {\n            return localVarFp.publishWebhook(requestParameters.webhookPostReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Update a webhook\n         * @summary Update a webhook\n         * @param {WebhookApiUpdateWebhookRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook)\n         *\n         */ updateWebhook (requestParameters, options) {\n            return localVarFp.updateWebhook(requestParameters.webhookPutReqBody, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Update webhook active status\n         * @summary Update webhook status\n         * @param {WebhookApiUpdateWebhookActiveStatusRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook-active-status)\n         *\n         */ updateWebhookActiveStatus (requestParameters, options) {\n            return localVarFp.updateWebhookActiveStatus(requestParameters.webhookPatchReqBody, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.WebhookApiFactory = WebhookApiFactory;\n/**\n * WebhookApi - object-oriented interface\n * @export\n * @class WebhookApi\n * @extends {BaseAPI}\n */ class WebhookApi extends base_1.BaseAPI {\n    /**\n     * Delete a webhook\n     * @summary Delete a webhook\n     * @param {WebhookApiDeleteWebhookRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhookApi\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-webhook)\n     *\n     */ deleteWebhook(requestParameters, options) {\n        return (0, exports.WebhookApiFp)(this.configuration).deleteWebhook(requestParameters.webhookDeleteReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of webhooks associated to a user\n     * @summary Associated webhooks of user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhookApi\n     * @returns {Promise<WebhookListResponse>} A promise that resolves to a `WebhookListResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-webhooks)\n     *\n     */ fetchWebhooks(options) {\n        return (0, exports.WebhookApiFp)(this.configuration).fetchWebhooks(options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a webhook\n     * @summary Fetch a webhook\n     * @param {WebhookApiLookupWebhookRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhookApi\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-webhook)\n     *\n     */ lookupWebhook(requestParameters, options) {\n        return (0, exports.WebhookApiFp)(this.configuration).lookupWebhook(requestParameters.webhookId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Create a webhook\n     * @summary Create a webhook\n     * @param {WebhookApiPublishWebhookRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhookApi\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-webhook)\n     *\n     */ publishWebhook(requestParameters, options) {\n        return (0, exports.WebhookApiFp)(this.configuration).publishWebhook(requestParameters.webhookPostReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Update a webhook\n     * @summary Update a webhook\n     * @param {WebhookApiUpdateWebhookRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhookApi\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook)\n     *\n     */ updateWebhook(requestParameters, options) {\n        return (0, exports.WebhookApiFp)(this.configuration).updateWebhook(requestParameters.webhookPutReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Update webhook active status\n     * @summary Update webhook status\n     * @param {WebhookApiUpdateWebhookActiveStatusRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof WebhookApi\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook-active-status)\n     *\n     */ updateWebhookActiveStatus(requestParameters, options) {\n        return (0, exports.WebhookApiFp)(this.configuration).updateWebhookActiveStatus(requestParameters.webhookPatchReqBody, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.WebhookApi = WebhookApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/webhook-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js":
/*!***********************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.operationServerMap = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\nexports.BASE_PATH = \"https://api.neynar.com/v2\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */ exports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\t\",\n    pipes: \"|\"\n};\n/**\n *\n * @export\n * @class BaseAPI\n */ class BaseAPI {\n    constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default){\n        var _a;\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = (_a = configuration.basePath) !== null && _a !== void 0 ? _a : basePath;\n        }\n    }\n}\nexports.BaseAPI = BaseAPI;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */ class RequiredError extends Error {\n    constructor(field, msg){\n        super(msg);\n        this.field = field;\n        this.name = \"RequiredError\";\n    }\n}\nexports.RequiredError = RequiredError;\n/**\n *\n * @export\n */ exports.operationServerMap = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2FwaS9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2Isa0JBQWtCLEdBQ2xCLGtCQUFrQixHQUNsQjs7Ozs7Ozs7OztDQVVDLEdBQ0QsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0EscUJBQXFCLEdBQUdBLGVBQWUsR0FBR0EsMEJBQTBCLEdBQUdBLGlCQUFpQixHQUFHLEtBQUs7QUFDN0gsTUFBTU8sVUFBVVosZ0JBQWdCYSxtQkFBT0EsQ0FBQyw2REFBTztBQUMvQ1IsaUJBQWlCLEdBQUcsNEJBQTRCUyxPQUFPLENBQUMsUUFBUTtBQUNoRTs7O0NBR0MsR0FDRFQsMEJBQTBCLEdBQUc7SUFDekJVLEtBQUs7SUFDTEMsS0FBSztJQUNMQyxLQUFLO0lBQ0xDLE9BQU87QUFDWDtBQUNBOzs7O0NBSUMsR0FDRCxNQUFNVDtJQUNGVSxZQUFZQyxhQUFhLEVBQUVDLFdBQVdoQixRQUFRTSxTQUFTLEVBQUVXLFFBQVFWLFFBQVFXLE9BQU8sQ0FBRTtRQUM5RSxJQUFJQztRQUNKLElBQUksQ0FBQ0gsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJRixlQUFlO1lBQ2YsSUFBSSxDQUFDQSxhQUFhLEdBQUdBO1lBQ3JCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLENBQUNHLEtBQUtKLGNBQWNDLFFBQVEsTUFBTSxRQUFRRyxPQUFPLEtBQUssSUFBSUEsS0FBS0g7UUFDbkY7SUFDSjtBQUNKO0FBQ0FoQixlQUFlLEdBQUdJO0FBRWxCOzs7OztDQUtDLEdBQ0QsTUFBTUQsc0JBQXNCaUI7SUFDeEJOLFlBQVlPLEtBQUssRUFBRUMsR0FBRyxDQUFFO1FBQ3BCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNELEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNFLElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0F2QixxQkFBcUIsR0FBR0c7QUFDeEI7OztDQUdDLEdBQ0RILDBCQUEwQixHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYXJjYXN0ZXJzdGF0cy8uL25vZGVfbW9kdWxlcy9AbmV5bmFyL25vZGVqcy1zZGsvYnVpbGQvYXBpL2Jhc2UuanM/N2QyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBGYXJjYXN0ZXIgQVBJIFYyXG4gKiBUaGUgRmFyY2FzdGVyIEFQSSBhbGxvd3MgeW91IHRvIGludGVyYWN0IHdpdGggdGhlIEZhcmNhc3RlciBwcm90b2NvbC4gU2VlIHRoZSBbTmV5bmFyIGRvY3NdKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZSkgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMi40NC4wXG4gKiBDb250YWN0OiB0ZWFtQG5leW5hci5jb21cbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3BlcmF0aW9uU2VydmVyTWFwID0gZXhwb3J0cy5SZXF1aXJlZEVycm9yID0gZXhwb3J0cy5CYXNlQVBJID0gZXhwb3J0cy5DT0xMRUNUSU9OX0ZPUk1BVFMgPSBleHBvcnRzLkJBU0VfUEFUSCA9IHZvaWQgMDtcbmNvbnN0IGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcbmV4cG9ydHMuQkFTRV9QQVRIID0gXCJodHRwczovL2FwaS5uZXluYXIuY29tL3YyXCIucmVwbGFjZSgvXFwvKyQvLCBcIlwiKTtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5DT0xMRUNUSU9OX0ZPUk1BVFMgPSB7XG4gICAgY3N2OiBcIixcIixcbiAgICBzc3Y6IFwiIFwiLFxuICAgIHRzdjogXCJcXHRcIixcbiAgICBwaXBlczogXCJ8XCIsXG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIEJhc2VBUElcbiAqL1xuY2xhc3MgQmFzZUFQSSB7XG4gICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbiwgYmFzZVBhdGggPSBleHBvcnRzLkJBU0VfUEFUSCwgYXhpb3MgPSBheGlvc18xLmRlZmF1bHQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuYXhpb3MgPSBheGlvcztcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB0aGlzLmJhc2VQYXRoID0gKF9hID0gY29uZmlndXJhdGlvbi5iYXNlUGF0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYmFzZVBhdGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkJhc2VBUEkgPSBCYXNlQVBJO1xuO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIFJlcXVpcmVkRXJyb3JcbiAqIEBleHRlbmRzIHtFcnJvcn1cbiAqL1xuY2xhc3MgUmVxdWlyZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZCwgbXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSZXF1aXJlZEVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1aXJlZEVycm9yID0gUmVxdWlyZWRFcnJvcjtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5vcGVyYXRpb25TZXJ2ZXJNYXAgPSB7fTtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJvcGVyYXRpb25TZXJ2ZXJNYXAiLCJSZXF1aXJlZEVycm9yIiwiQmFzZUFQSSIsIkNPTExFQ1RJT05fRk9STUFUUyIsIkJBU0VfUEFUSCIsImF4aW9zXzEiLCJyZXF1aXJlIiwicmVwbGFjZSIsImNzdiIsInNzdiIsInRzdiIsInBpcGVzIiwiY29uc3RydWN0b3IiLCJjb25maWd1cmF0aW9uIiwiYmFzZVBhdGgiLCJheGlvcyIsImRlZmF1bHQiLCJfYSIsIkVycm9yIiwiZmllbGQiLCJtc2ciLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js":
/*!*************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/common.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;\nconst base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/base.js\");\n/**\n *\n * @export\n */ exports.DUMMY_BASE_URL = \"https://example.com\";\n/**\n *\n * @throws {RequiredError}\n * @export\n */ const assertParamExists = function(functionName, paramName, paramValue) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n};\nexports.assertParamExists = assertParamExists;\n/**\n *\n * @export\n */ const setApiKeyToObject = async function(object, keyParamName, configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === \"function\" ? await configuration.apiKey(keyParamName) : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n};\nexports.setApiKeyToObject = setApiKeyToObject;\n/**\n *\n * @export\n */ const setBasicAuthToObject = function(object, configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = {\n            username: configuration.username,\n            password: configuration.password\n        };\n    }\n};\nexports.setBasicAuthToObject = setBasicAuthToObject;\n/**\n *\n * @export\n */ const setBearerAuthToObject = async function(object, configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === \"function\" ? await configuration.accessToken() : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n};\nexports.setBearerAuthToObject = setBearerAuthToObject;\n/**\n *\n * @export\n */ const setOAuthToObject = async function(object, name, scopes, configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === \"function\" ? await configuration.accessToken(name, scopes) : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n};\nexports.setOAuthToObject = setOAuthToObject;\nfunction setFlattenedQueryParams(urlSearchParams, parameter, key = \"\") {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            parameter.forEach((item)=>setFlattenedQueryParams(urlSearchParams, item, key));\n        } else {\n            Object.keys(parameter).forEach((currentKey)=>setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== \"\" ? \".\" : \"\"}${currentKey}`));\n        }\n    } else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n/**\n *\n * @export\n */ const setSearchParams = function(url, ...objects) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n};\nexports.setSearchParams = setSearchParams;\n/**\n *\n * @export\n */ const serializeDataIfNeeded = function(value, requestOptions, configuration) {\n    const nonString = typeof value !== \"string\";\n    const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers[\"Content-Type\"]) : nonString;\n    return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || \"\";\n};\nexports.serializeDataIfNeeded = serializeDataIfNeeded;\n/**\n *\n * @export\n */ const toPathString = function(url) {\n    return url.pathname + url.search + url.hash;\n};\nexports.toPathString = toPathString;\n/**\n *\n * @export\n */ const createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration) {\n    return (axios = globalAxios, basePath = BASE_PATH)=>{\n        var _a;\n        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), {\n            url: (axios.defaults.baseURL ? \"\" : (_a = configuration === null || configuration === void 0 ? void 0 : configuration.basePath) !== null && _a !== void 0 ? _a : basePath) + axiosArgs.url\n        });\n        return axios.request(axiosRequestArgs);\n    };\n};\nexports.createRequestFunction = createRequestFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/configuration.js":
/*!********************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/api/configuration.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster API V2\n * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.44.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Configuration = void 0;\nclass Configuration {\n    constructor(param){\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.serverIndex = param.serverIndex;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */ isJsonMime(mime) {\n        const jsonMime = new RegExp(\"^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$\", \"i\");\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === \"application/json-patch+json\");\n    }\n}\nexports.Configuration = Configuration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2FwaS9jb25maWd1cmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2Isa0JBQWtCLEdBQ2xCLGtCQUFrQixHQUNsQjs7Ozs7Ozs7OztDQVVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1FO0lBQ0ZDLFlBQVlDLEtBQUssQ0FBRTtRQUNmLElBQUksQ0FBQ0MsTUFBTSxHQUFHRCxNQUFNQyxNQUFNO1FBQzFCLElBQUksQ0FBQ0MsUUFBUSxHQUFHRixNQUFNRSxRQUFRO1FBQzlCLElBQUksQ0FBQ0MsUUFBUSxHQUFHSCxNQUFNRyxRQUFRO1FBQzlCLElBQUksQ0FBQ0MsV0FBVyxHQUFHSixNQUFNSSxXQUFXO1FBQ3BDLElBQUksQ0FBQ0MsUUFBUSxHQUFHTCxNQUFNSyxRQUFRO1FBQzlCLElBQUksQ0FBQ0MsV0FBVyxHQUFHTixNQUFNTSxXQUFXO1FBQ3BDLElBQUksQ0FBQ0MsV0FBVyxHQUFHUCxNQUFNTyxXQUFXO1FBQ3BDLElBQUksQ0FBQ0MsWUFBWSxHQUFHUixNQUFNUSxZQUFZO0lBQzFDO0lBQ0E7Ozs7Ozs7OztLQVNDLEdBQ0RDLFdBQVdDLElBQUksRUFBRTtRQUNiLE1BQU1DLFdBQVcsSUFBSUMsT0FBTyw0REFBaUU7UUFDN0YsT0FBT0YsU0FBUyxRQUFTQyxDQUFBQSxTQUFTRSxJQUFJLENBQUNILFNBQVNBLEtBQUtJLFdBQVcsT0FBTyw2QkFBNEI7SUFDdkc7QUFDSjtBQUNBbEIscUJBQXFCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFyY2FzdGVyc3RhdHMvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2FwaS9jb25maWd1cmF0aW9uLmpzP2RiNDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogRmFyY2FzdGVyIEFQSSBWMlxuICogVGhlIEZhcmNhc3RlciBBUEkgYWxsb3dzIHlvdSB0byBpbnRlcmFjdCB3aXRoIHRoZSBGYXJjYXN0ZXIgcHJvdG9jb2wuIFNlZSB0aGUgW05leW5hciBkb2NzXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDIuNDQuMFxuICogQ29udGFjdDogdGVhbUBuZXluYXIuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbmZpZ3VyYXRpb24gPSB2b2lkIDA7XG5jbGFzcyBDb25maWd1cmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbSkge1xuICAgICAgICB0aGlzLmFwaUtleSA9IHBhcmFtLmFwaUtleTtcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHBhcmFtLnVzZXJuYW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gcGFyYW0ucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBwYXJhbS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IHBhcmFtLmJhc2VQYXRoO1xuICAgICAgICB0aGlzLnNlcnZlckluZGV4ID0gcGFyYW0uc2VydmVySW5kZXg7XG4gICAgICAgIHRoaXMuYmFzZU9wdGlvbnMgPSBwYXJhbS5iYXNlT3B0aW9ucztcbiAgICAgICAgdGhpcy5mb3JtRGF0YUN0b3IgPSBwYXJhbS5mb3JtRGF0YUN0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBnaXZlbiBNSU1FIGlzIGEgSlNPTiBNSU1FLlxuICAgICAqIEpTT04gTUlNRSBleGFtcGxlczpcbiAgICAgKiAgIGFwcGxpY2F0aW9uL2pzb25cbiAgICAgKiAgIGFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGOFxuICAgICAqICAgQVBQTElDQVRJT04vSlNPTlxuICAgICAqICAgYXBwbGljYXRpb24vdm5kLmNvbXBhbnkranNvblxuICAgICAqIEBwYXJhbSBtaW1lIC0gTUlNRSAoTXVsdGlwdXJwb3NlIEludGVybmV0IE1haWwgRXh0ZW5zaW9ucylcbiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIGdpdmVuIE1JTUUgaXMgSlNPTiwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGlzSnNvbk1pbWUobWltZSkge1xuICAgICAgICBjb25zdCBqc29uTWltZSA9IG5ldyBSZWdFeHAoJ14oYXBwbGljYXRpb25cXC9qc29ufFteOy8gXFx0XStcXC9bXjsvIFxcdF0rWytdanNvbilbIFxcdF0qKDsuKik/JCcsICdpJyk7XG4gICAgICAgIHJldHVybiBtaW1lICE9PSBudWxsICYmIChqc29uTWltZS50ZXN0KG1pbWUpIHx8IG1pbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24tcGF0Y2granNvbicpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IENvbmZpZ3VyYXRpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDb25maWd1cmF0aW9uIiwiY29uc3RydWN0b3IiLCJwYXJhbSIsImFwaUtleSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhY2Nlc3NUb2tlbiIsImJhc2VQYXRoIiwic2VydmVySW5kZXgiLCJiYXNlT3B0aW9ucyIsImZvcm1EYXRhQ3RvciIsImlzSnNvbk1pbWUiLCJtaW1lIiwianNvbk1pbWUiLCJSZWdFeHAiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/NeynarAPIClient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/clients/NeynarAPIClient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NeynarAPIClient = void 0;\nconst accounts_1 = __webpack_require__(/*! viem/accounts */ \"(rsc)/./node_modules/viem/_cjs/accounts/index.js\");\nconst logger_1 = __webpack_require__(/*! ../common/logger */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/common/logger.js\");\nconst axios_1 = __importStar(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\nconst configuration_1 = __webpack_require__(/*! ../api/configuration */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/configuration.js\");\nconst constants_1 = __webpack_require__(/*! ../common/constants */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/common/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/utils/index.js\");\nconst action_api_1 = __webpack_require__(/*! ../api/apis/action-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/action-api.js\");\nconst agents_api_1 = __webpack_require__(/*! ../api/apis/agents-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/agents-api.js\");\nconst ban_api_1 = __webpack_require__(/*! ../api/apis/ban-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/ban-api.js\");\nconst block_api_1 = __webpack_require__(/*! ../api/apis/block-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/block-api.js\");\nconst cast_api_1 = __webpack_require__(/*! ../api/apis/cast-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/cast-api.js\");\nconst channel_api_1 = __webpack_require__(/*! ../api/apis/channel-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/channel-api.js\");\nconst feed_api_1 = __webpack_require__(/*! ../api/apis/feed-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/feed-api.js\");\nconst fname_api_1 = __webpack_require__(/*! ../api/apis/fname-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/fname-api.js\");\nconst follows_api_1 = __webpack_require__(/*! ../api/apis/follows-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/follows-api.js\");\nconst frame_api_1 = __webpack_require__(/*! ../api/apis/frame-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/frame-api.js\");\nconst login_api_1 = __webpack_require__(/*! ../api/apis/login-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/login-api.js\");\nconst metrics_api_1 = __webpack_require__(/*! ../api/apis/metrics-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/metrics-api.js\");\nconst mute_api_1 = __webpack_require__(/*! ../api/apis/mute-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/mute-api.js\");\nconst notifications_api_1 = __webpack_require__(/*! ../api/apis/notifications-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/notifications-api.js\");\nconst onchain_api_1 = __webpack_require__(/*! ../api/apis/onchain-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/onchain-api.js\");\nconst reaction_api_1 = __webpack_require__(/*! ../api/apis/reaction-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/reaction-api.js\");\nconst signer_api_1 = __webpack_require__(/*! ../api/apis/signer-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/signer-api.js\");\nconst storage_api_1 = __webpack_require__(/*! ../api/apis/storage-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/storage-api.js\");\nconst subscribers_api_1 = __webpack_require__(/*! ../api/apis/subscribers-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/subscribers-api.js\");\nconst user_api_1 = __webpack_require__(/*! ../api/apis/user-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/user-api.js\");\nconst webhook_api_1 = __webpack_require__(/*! ../api/apis/webhook-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/api/apis/webhook-api.js\");\nconst { version: sdkVersion } = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/package.json\");\n/**\n * Converts a camelCase string to snake_case.\n * If the input string is not in camelCase format, it returns the original string.\n *\n * @param {string} str - The string to convert.\n * @returns {string} The converted string in snake_case, or the original string if not camelCase.\n */ function camelToSnakeCase(str) {\n    // Check if the string is camelCase\n    if (/^[a-z]+([A-Z][a-z]*)+$/.test(str)) {\n        return str.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n    }\n    return str; // Return the original string if it's not camelCase\n}\n/**\n * Converts the top-level keys of an object from camelCase to snake_case.\n * If a key is not in camelCase, it retains its original format.\n * Nested objects or arrays are left unchanged.\n * This is done to revert the conversion of top-level keys since we accept snake_case keys in the API but convert them to camelCase in the wrapper.\n *\n * @param {object} obj - The object whose top-level keys are to be converted.\n * @returns {object} A new object with top-level keys converted to snake_case.\n */ function camelCaseToSnakeCaseKeys(obj) {\n    if (obj && typeof obj === \"object\" && !Array.isArray(obj)) {\n        // Convert only the top-level keys\n        return Object.fromEntries(Object.entries(obj).map(([key, value])=>[\n                camelToSnakeCase(key),\n                value\n            ]));\n    }\n    return obj; // If not an object, return as is\n}\nclass NeynarAPIClient {\n    constructor(config, options = {}){\n        if (typeof config === \"string\") {\n            console.error(\"Error: config must be of type Configuration\");\n            console.log(`\nSeems, like you are using sdk v2 but the syntax on client instantiation is for sdk v1.\nSDK v1 -> v2 migration guide: https://docs.neynar.com/reference/neynar-nodejs-sdk-v1-to-v2-migration-guide\n\nCorrect usage way to instantiate the client:\n\nimport { NeynarAPIClient, Configuration } from \"@neynar/nodejs-sdk\";\n\nconst config = new Configuration({\n  apiKey: \"API_KEY\",\n  baseOptions: {\n    headers: {\n      \"x-neynar-experimental\": true,\n    },\n  },\n});\n\nconst client = new NeynarAPIClient(config);\\n`);\n            throw new Error(\"Invalid configuration type. Expected Configuration object but received string.\");\n        }\n        const { logger = logger_1.silentLogger, axiosInstance: customAxiosInstance } = options;\n        this.logger = logger;\n        this.config = new configuration_1.Configuration({\n            apiKey: config.apiKey,\n            basePath: config.basePath,\n            baseOptions: config.baseOptions\n        });\n        const axiosInstance = customAxiosInstance || axios_1.default.create({\n            headers: {\n                \"x-sdk-version\": sdkVersion,\n                \"x-sdk\": \"node\"\n            }\n        });\n        axiosInstance.defaults.decompress = true;\n        axiosInstance.interceptors.response.use((response)=>response, (error)=>{\n            if (error.response && [\n                302\n            ].includes(error.response.status)) {\n                return {\n                    data: {\n                        location: error.response.headers.location\n                    }\n                };\n            }\n            if (NeynarAPIClient.isApiErrorResponse(error)) {\n                const apiErrors = error.response.data;\n                this.logger.warn(`API errors: ${JSON.stringify(apiErrors)}`);\n            }\n            throw error;\n        });\n        this.apis = {\n            actionApi: new action_api_1.ActionApi(this.config, undefined, axiosInstance),\n            agentsApi: new agents_api_1.AgentsApi(this.config, undefined, axiosInstance),\n            banApi: new ban_api_1.BanApi(this.config, undefined, axiosInstance),\n            blockApi: new block_api_1.BlockApi(this.config, undefined, axiosInstance),\n            castApi: new cast_api_1.CastApi(this.config, undefined, axiosInstance),\n            channelApi: new channel_api_1.ChannelApi(this.config, undefined, axiosInstance),\n            feedApi: new feed_api_1.FeedApi(this.config, undefined, axiosInstance),\n            fnameApi: new fname_api_1.FnameApi(this.config, undefined, axiosInstance),\n            followsApi: new follows_api_1.FollowsApi(this.config, undefined, axiosInstance),\n            frameApi: new frame_api_1.FrameApi(this.config, undefined, axiosInstance),\n            loginApi: new login_api_1.LoginApi(this.config, undefined, axiosInstance),\n            metricsApi: new metrics_api_1.MetricsApi(this.config, undefined, axiosInstance),\n            muteApi: new mute_api_1.MuteApi(this.config, undefined, axiosInstance),\n            notificationsApi: new notifications_api_1.NotificationsApi(this.config, undefined, axiosInstance),\n            onchainApi: new onchain_api_1.OnchainApi(this.config, undefined, axiosInstance),\n            reactionApi: new reaction_api_1.ReactionApi(this.config, undefined, axiosInstance),\n            signerApi: new signer_api_1.SignerApi(this.config, undefined, axiosInstance),\n            storageApi: new storage_api_1.StorageApi(this.config, undefined, axiosInstance),\n            subscribersApi: new subscribers_api_1.SubscribersApi(this.config, undefined, axiosInstance),\n            userApi: new user_api_1.UserApi(this.config, undefined, axiosInstance),\n            webhookApi: new webhook_api_1.WebhookApi(this.config, undefined, axiosInstance)\n        };\n    }\n    static isApiErrorResponse(error) {\n        var _a;\n        if (!(error instanceof axios_1.AxiosError)) return false;\n        return ((_a = error.response) === null || _a === void 0 ? void 0 : _a.data) !== undefined && \"message\" in error.response.data;\n    }\n    /**\n     * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\\'s Farcaster signer.\n     *\n     * @summary User actions across apps\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - The signer_uuid of the user on behalf of whom the action is being performed.\n     * @param {string} params.baseUrl  - The base URL of the app on which the action is being performed.\n     * @param {FarcasterActionReqBodyAction} params.action\n     *\n     * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const baseUrl =\n     * const action =\n     *\n     * client.publishFarcasterAction({signerUuid, baseUrl, action}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)\n     *\n     */ async publishFarcasterAction(params) {\n        const adjustedParams = {};\n        const _params = {\n            farcasterActionReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.actionApi.publishFarcasterAction(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Creates a new transaction pay mini app that can be used to collect payments through a mini app\n     *\n     * @summary Create transaction pay mini app\n     *\n     * @param {object} params\n     * @param {FramePayTransactionRequestBody} params.framePayTransactionRequestBody\n     *\n     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const framePayTransactionRequestBody =\n     *\n     * client.createTransactionPayFrame({ framePayTransactionRequestBody }).then(response => {\n     *   console.log('response:', response);\n     * });\n     */ async createTransactionPayFrame(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.agentsApi.createTransactionPayFrame(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of interactions between two users\n     *\n     * @summary User interactions\n     *\n     * @param {object} params\n     * @param {number[]} params.fids  - Comma separated list of two FIDs\n     * @param {Array<NotificationType>} params.type [optional]  - Comma seperated list of Interaction type to fetch\n     *\n     * @returns {Promise<FetchUserInteractions200Response>} A promise that resolves to a `FetchUserInteractions200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fids =\n     * const type =\n     *\n     * client.fetchUserInteractions({ fids, type }).then(response => {\n     *   console.log('response:', response);\n     * });\n     */ async fetchUserInteractions(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        if (adjustedParams.fids && Array.isArray(adjustedParams.fids)) {\n            adjustedParams.fids = adjustedParams.fids.map((value)=>String(value));\n        }\n        if (adjustedParams.fids && Array.isArray(adjustedParams.fids)) {\n            adjustedParams.fids = adjustedParams.fids.join(\",\");\n        }\n        const response = await this.apis.agentsApi.fetchUserInteractions(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.\n     *\n     * @summary Cast conversation summary\n     *\n     * @param {object} params\n     * @param {string} params.identifier  - Cast identifier (Its either a url or a hash)\n     * @param {number} params.limit [optional]  - Number of casts to consider in a summary up to a point of target cast (Default: 20, Maximum: 50)\n     * @param {string} params.prompt [optional]  - Additional prompt used to generate a summary\n     *\n     * @returns {Promise<ConversationSummary>} A promise that resolves to a `ConversationSummary` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const identifier =\n     * const limit =\n     * const prompt =\n     *\n     * client.lookupCastConversationSummary({ identifier, limit, prompt }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation-summary)\n     *\n     */ async lookupCastConversationSummary(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.agentsApi.lookupCastConversationSummary(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Deletes a list of FIDs from the app associated with your API key.\n     *\n     * @summary Unban FIDs from app\n     *\n     * @param {object} params\n     * @param {Array<number>} params.fids\n     *\n     * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fids =\n     *\n     * client.deleteBans({fids}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-bans)\n     *\n     */ async deleteBans(params) {\n        const adjustedParams = {};\n        const _params = {\n            banReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.banApi.deleteBans(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches all FIDs that your app has banned.\n     *\n     * @summary Banned FIDs of app\n     *\n     * @param {object} params\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<BanListResponse>} A promise that resolves to a `BanListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const limit =\n     *\n     * client.fetchBanList({ limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-ban-list)\n     *\n     */ async fetchBanList(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.banApi.fetchBanList(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.\n     *\n     * @summary Ban FIDs from app\n     *\n     * @param {object} params\n     * @param {Array<number>} params.fids\n     *\n     * @returns {Promise<BanResponse>} A promise that resolves to a `BanResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fids =\n     *\n     * client.publishBans({fids}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-bans)\n     *\n     */ async publishBans(params) {\n        const adjustedParams = {};\n        const _params = {\n            banReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.banApi.publishBans(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Deletes a block for a given FID.\n     *\n     * @summary Unblock FID\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {number} params.blockedFid  - The unique identifier of a farcaster user (unsigned integer)\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const blockedFid =\n     *\n     * client.deleteBlock({signerUuid, blockedFid}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-block)\n     *\n     */ async deleteBlock(params) {\n        const adjustedParams = {};\n        const _params = {\n            blockReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.blockApi.deleteBlock(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches all FIDs that a user has blocked or has been blocked by\n     *\n     * @summary Blocked / Blocked by FIDs\n     *\n     * @param {object} params\n     * @param {number} params.blockerFid [optional]  - Providing this will return the users that this user has blocked\n     * @param {number} params.blockedFid [optional]  - Providing this will return the users that have blocked this user\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<BlockListResponse>} A promise that resolves to a `BlockListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const blockerFid =\n     * const blockedFid =\n     * const limit =\n     *\n     * client.fetchBlockList({ blockerFid, blockedFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-block-list)\n     *\n     */ async fetchBlockList(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.blockApi.fetchBlockList(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Adds a block for a given FID.\n     *\n     * @summary Block FID\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {number} params.blockedFid  - The unique identifier of a farcaster user (unsigned integer)\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const blockedFid =\n     *\n     * client.publishBlock({signerUuid, blockedFid}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-block)\n     *\n     */ async publishBlock(params) {\n        const adjustedParams = {};\n        const _params = {\n            blockReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.blockApi.publishBlock(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Delete an existing cast. \\\\ (In order to delete a cast `signer_uuid` must be approved)\n     *\n     * @summary Delete a cast\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.targetHash  - Cast Hash\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const targetHash =\n     *\n     * client.deleteCast({signerUuid, targetHash}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)\n     *\n     */ async deleteCast(params) {\n        const adjustedParams = {};\n        const _params = {\n            deleteCastReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.castApi.deleteCast(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch multiple casts using their respective hashes.\n     *\n     * @summary Bulk fetch casts\n     *\n     * @param {object} params\n     * @param {string[]} params.casts  - Hashes of the cast to be retrived (Comma separated, no spaces)\n     * @param {number} params.viewerFid [optional]  - adds viewer_context to cast object to show whether viewer has liked or recasted the cast.\n     * @param {FetchBulkCastsSortTypeEnum} params.sortType [optional]  - Optional parameter to sort the casts based on different criteria\n     *\n     * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const casts =\n     * const viewerFid =\n     * const sortType =\n     *\n     * client.fetchBulkCasts({ casts, viewerFid, sortType }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)\n     *\n     */ async fetchBulkCasts(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        if (adjustedParams.casts && Array.isArray(adjustedParams.casts)) {\n            adjustedParams.casts = adjustedParams.casts.join(\",\");\n        }\n        const response = await this.apis.castApi.fetchBulkCasts(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches all composer actions on Warpcast. You can filter by top or featured.\n     *\n     * @summary Fetch composer actions\n     *\n     * @param {object} params\n     * @param {CastComposerType} params.list  - Type of list to fetch.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 25)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const list =\n     * const limit =\n     *\n     * client.fetchComposerActions({ list, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)\n     *\n     */ async fetchComposerActions(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.castApi.fetchComposerActions(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Crawls the given URL and returns metadata useful when embedding the URL in a cast.\n     *\n     * @summary Embedded URL metadata\n     *\n     * @param {object} params\n     * @param {string} params.url  - URL to crawl metadata of\n     *\n     * @returns {Promise<CastEmbedCrawlResponse>} A promise that resolves to a `CastEmbedCrawlResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const url =\n     *\n     * client.fetchEmbeddedUrlMetadata({ url }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-embedded-url-metadata)\n     *\n     */ async fetchEmbeddedUrlMetadata(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.castApi.fetchEmbeddedUrlMetadata(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Gets information about an individual cast by passing in a Warpcast web URL or cast hash\n     *\n     * @summary By hash or URL\n     *\n     * @param {object} params\n     * @param {string} params.identifier  - Cast identifier (Its either a url or a hash)\n     * @param {CastParamType} params.type\n     * @param {number} params.viewerFid [optional]  - adds viewer_context to cast object to show whether viewer has liked or recasted the cast.\n     *\n     * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const identifier =\n     * const type =\n     * const viewerFid =\n     *\n     * client.lookupCastByHashOrWarpcastUrl({ identifier, type, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)\n     *\n     */ async lookupCastByHashOrWarpcastUrl(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.castApi.lookupCastByHashOrWarpcastUrl(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.\n     *\n     * @summary Conversation for a cast\n     *\n     * @param {object} params\n     * @param {string} params.identifier  - Cast identifier (Its either a url or a hash)\n     * @param {CastParamType} params.type\n     * @param {number} params.replyDepth [optional]  - The depth of replies in the conversation that will be returned (default 2)\n     * @param {boolean} params.includeChronologicalParentCasts [optional]  - Include all parent casts in chronological order\n     * @param {number} params.viewerFid [optional]  - Providing this will return a conversation that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {CastConversationSortType} params.sortType [optional]  - Sort type for the ordering of descendants. Default is `chron`\n     * @param {LookupCastConversationFoldEnum} params.fold [optional]  - Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 50)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const identifier =\n     * const type =\n     * const replyDepth =\n     * const includeChronologicalParentCasts =\n     * const viewerFid =\n     * const sortType =\n     * const fold =\n     * const limit =\n     *\n     * client.lookupCastConversation({ identifier, type, replyDepth, includeChronologicalParentCasts, viewerFid, sortType, fold, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)\n     *\n     */ async lookupCastConversation(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.castApi.lookupCastConversation(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)\n     *\n     * @summary Post a cast\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.text [optional]\n     * @param {Array<PostCastReqBodyEmbeds>} params.embeds [optional]\n     * @param {string} params.parent [optional]  - parent_url of the channel the cast is in, or hash of the cast\n     * @param {string} params.channelId [optional]  - Channel ID of the channel where the cast is to be posted. e.g. neynar, farcaster, warpcast\n     * @param {string} params.idem [optional]  - An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request.\n     * @param {number} params.parentAuthorFid [optional]  - The unique identifier of a farcaster user (unsigned integer)\n     *\n     * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const text =\n     * const embeds =\n     * const parent =\n     * const channelId =\n     * const idem =\n     * const parentAuthorFid =\n     *\n     * client.publishCast({signerUuid, text, embeds, parent, channelId, idem, parentAuthorFid}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)\n     *\n     */ async publishCast(params) {\n        const adjustedParams = {};\n        const _params = {\n            postCastReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.castApi.publishCast(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Search for casts based on a query string, with optional AND filters\n     *\n     * @summary Search for casts\n     *\n     * @param {object} params\n     * @param {string} params.q  - Query string to search for casts. Supported operators:  | Operator  | Description                                                                                              | | --------- | -------------------------------------------------------------------------------------------------------- | | `+`       | Acts as the AND operator. This is the default operator between terms and can usually be omitted.         | | `|`      | Acts as the OR operator.                                                                                 | | `*`       | When used at the end of a term, signifies a prefix query.                                                  | | `\"`       | Wraps several terms into a phrase (for example, `\"star wars\"`).                                          | | `(`, `)`  | Wrap a clause for precedence (for example, `star + (wars | trek)`).                                     | | `~n`      | When used after a term (for example, `satr~3`), sets `fuzziness`. When used after a phrase, sets `slop`. | | `-`       | Negates the term.                                                                                        | | `before:` | Search for casts before a specific date. (e.g. `before:2025-04-20`)                                       | | `after:`  | Search for casts after a specific date. (e.g. `after:2025-04-20`)                                         |\n     * @param {SearchCastsModeEnum} params.mode [optional]  - Choices are: - `literal` - Searches for the words in the query string (default) - `semantic` - Searches for the meaning of the query string - `hybrid` - Combines both literal and semantic results\n     * @param {SearchSortType} params.sortType [optional]  - Choices are: - `desc_chron` - All casts sorted by time (default) - `algorithmic` - Casts sorted by engagement and time\n     * @param {number} params.authorFid [optional]  - Fid of the user whose casts you want to search\n     * @param {number} params.viewerFid [optional]  - Providing this will return search results that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {string} params.parentUrl [optional]  - Parent URL of the casts you want to search\n     * @param {string} params.channelId [optional]  - Channel ID of the casts you want to search\n     * @param {boolean} params.priorityMode [optional]  - When true, only returns search results from power badge users and users that the viewer follows (if viewer_fid is provided).\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor\n     *\n     * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const q =\n     * const mode =\n     * const sortType =\n     * const authorFid =\n     * const viewerFid =\n     * const parentUrl =\n     * const channelId =\n     * const priorityMode =\n     * const limit =\n     *\n     * client.searchCasts({ q, mode, sortType, authorFid, viewerFid, parentUrl, channelId, priorityMode, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)\n     *\n     */ async searchCasts(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.castApi.searchCasts(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of all channels with their details\n     *\n     * @summary Fetch all channels with their details\n     *\n     * @param {object} params\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 200)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const limit =\n     *\n     * client.fetchAllChannels({ limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)\n     *\n     */ async fetchAllChannels(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.channelApi.fetchAllChannels(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns details of multiple channels\n     *\n     * @summary Bulk fetch\n     *\n     * @param {object} params\n     * @param {string[]} params.ids  - Comma separated list of channel IDs or parent_urls, up to 100 at a time\n     * @param {ChannelType} params.type [optional]  - Type of identifier being used to query the channels. Defaults to ID.\n     * @param {number} params.viewerFid [optional]  - FID of the user viewing the channels.\n     *\n     * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const ids =\n     * const type =\n     * const viewerFid =\n     *\n     * client.fetchBulkChannels({ ids, type, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)\n     *\n     */ async fetchBulkChannels(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        if (adjustedParams.ids && Array.isArray(adjustedParams.ids)) {\n            adjustedParams.ids = adjustedParams.ids.join(\",\");\n        }\n        const response = await this.apis.channelApi.fetchBulkChannels(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.\n     *\n     * @summary Open invites\n     *\n     * @param {object} params\n     * @param {string} params.channelId [optional]  - Channel ID for the channel being queried\n     * @param {number} params.invitedFid [optional]  - FID of the user being invited\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const channelId =\n     * const invitedFid =\n     * const limit =\n     *\n     * client.fetchChannelInvites({ channelId, invitedFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)\n     *\n     */ async fetchChannelInvites(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.channelApi.fetchChannelInvites(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of members in a channel\n     *\n     * @summary Fetch members\n     *\n     * @param {object} params\n     * @param {string} params.channelId  - Channel ID for the channel being queried\n     * @param {number} params.fid [optional]  - FID of the user being queried. Specify this to check if a user is a member of the channel without paginating through all members.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const channelId =\n     * const fid =\n     * const limit =\n     *\n     * client.fetchChannelMembers({ channelId, fid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)\n     *\n     */ async fetchChannelMembers(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.channelApi.fetchChannelMembers(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.\n     *\n     * @summary For channel\n     *\n     * @param {object} params\n     * @param {string} params.id  - Channel ID for the channel being queried\n     * @param {number} params.viewerFid [optional]  - Providing this will return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     * @param {number} params.limit [optional]  - Number of followers to fetch (Default: 25, Maximum: 1000)\n     *\n     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const id =\n     * const viewerFid =\n     * const limit =\n     *\n     * client.fetchFollowersForAChannel({ id, viewerFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)\n     *\n     */ async fetchFollowersForAChannel(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.channelApi.fetchFollowersForAChannel(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \\\"X, Y, Z follow this channel\\\".\n     *\n     * @summary Relevant followers\n     *\n     * @param {object} params\n     * @param {string} params.id  - Channel ID being queried\n     * @param {number} params.viewerFid  - The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.\n     *\n     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const id =\n     * const viewerFid =\n     *\n     * client.fetchRelevantFollowersForAChannel({ id, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)\n     *\n     */ async fetchRelevantFollowersForAChannel(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.channelApi.fetchRelevantFollowersForAChannel(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of trending channels based on activity\n     *\n     * @summary Channels by activity\n     *\n     * @param {object} params\n     * @param {FetchTrendingChannelsTimeWindowEnum} params.timeWindow [optional]\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 10, Maximum: 25)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const timeWindow =\n     * const limit =\n     *\n     * client.fetchTrendingChannels({ timeWindow, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)\n     *\n     */ async fetchTrendingChannels(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.channelApi.fetchTrendingChannels(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.\n     *\n     * @summary Member of\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID of the user.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const limit =\n     *\n     * client.fetchUserChannelMemberships({ fid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)\n     *\n     */ async fetchUserChannelMemberships(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.channelApi.fetchUserChannelMemberships(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of all channels with their details that a FID follows.\n     *\n     * @summary Following\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID of the user.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const limit =\n     *\n     * client.fetchUserChannels({ fid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)\n     *\n     */ async fetchUserChannels(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.channelApi.fetchUserChannels(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches all channels that a user has casted in, in reverse chronological order.\n     *\n     * @summary Fetch channels that user is active in\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The user's FID (identifier)\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const limit =\n     *\n     * client.fetchUsersActiveChannels({ fid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)\n     *\n     */ async fetchUsersActiveChannels(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.channelApi.fetchUsersActiveChannels(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Follow a channel\n     *\n     * @summary Follow a channel\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.channelId  - The unique identifier of a farcaster channel\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const channelId =\n     *\n     * client.followChannel({signerUuid, channelId}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)\n     *\n     */ async followChannel(params) {\n        const adjustedParams = {};\n        const _params = {\n            channelFollowReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.channelApi.followChannel(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Invite a user to a channel\n     *\n     * @summary Invite\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.channelId  - The unique identifier of a farcaster channel\n     * @param {number} params.fid  - The unique identifier of a farcaster user (unsigned integer)\n     * @param {ChannelMemberRole} params.role\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const channelId =\n     * const fid =\n     * const role =\n     *\n     * client.inviteChannelMember({signerUuid, channelId, fid, role}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)\n     *\n     */ async inviteChannelMember(params) {\n        const adjustedParams = {};\n        const _params = {\n            inviteChannelMemberReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.channelApi.inviteChannelMember(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns details of a channel\n     *\n     * @summary By ID or parent_url\n     *\n     * @param {object} params\n     * @param {string} params.id  - Channel ID for the channel being queried\n     * @param {ChannelType} params.type [optional]  - Type of identifier being used to query the channel. Defaults to ID.\n     * @param {number} params.viewerFid [optional]  - FID of the user viewing the channel.\n     *\n     * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const id =\n     * const type =\n     * const viewerFid =\n     *\n     * client.lookupChannel({ id, type, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)\n     *\n     */ async lookupChannel(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.channelApi.lookupChannel(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Remove a user from a channel or a user\\'s invite to a channel role\n     *\n     * @summary Remove user\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.channelId  - The unique identifier of a farcaster channel\n     * @param {number} params.fid  - The unique identifier of a farcaster user (unsigned integer)\n     * @param {ChannelMemberRole} params.role\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const channelId =\n     * const fid =\n     * const role =\n     *\n     * client.removeChannelMember({signerUuid, channelId, fid, role}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)\n     *\n     */ async removeChannelMember(params) {\n        const adjustedParams = {};\n        const _params = {\n            removeChannelMemberReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.channelApi.removeChannelMember(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Accept or reject a channel invite\n     *\n     * @summary Accept or reject an invite\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.channelId  - The unique identifier of a farcaster channel\n     * @param {ChannelMemberRole} params.role\n     * @param {boolean} params.accept  - Accept or reject the invite\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const channelId =\n     * const role =\n     * const accept =\n     *\n     * client.respondChannelInvite({signerUuid, channelId, role, accept}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)\n     *\n     */ async respondChannelInvite(params) {\n        const adjustedParams = {};\n        const _params = {\n            respondChannelInviteReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.channelApi.respondChannelInvite(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of channels based on ID or name\n     *\n     * @summary Search by ID or name\n     *\n     * @param {object} params\n     * @param {string} params.q  - Channel ID or name for the channel being queried\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 200)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const q =\n     * const limit =\n     *\n     * client.searchChannels({ q, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)\n     *\n     */ async searchChannels(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.channelApi.searchChannels(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Unfollow a channel\n     *\n     * @summary Unfollow a channel\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.channelId  - The unique identifier of a farcaster channel\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const channelId =\n     *\n     * client.unfollowChannel({signerUuid, channelId}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)\n     *\n     */ async unfollowChannel(params) {\n        const adjustedParams = {};\n        const _params = {\n            channelFollowReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.channelApi.unfollowChannel(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel\n     *\n     * @summary Chronologically\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of user whose recent casts you want to fetch\n     * @param {number} params.appFid [optional]  - Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast\n     * @param {number} params.viewerFid [optional]  - FID of the user viewing the feed\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 150)\n     * @param {string} params.cursor [optional]  - Pagination cursor\n     * @param {boolean} params.includeReplies [optional]  - Include reply casts by the author in the response, true by default\n     * @param {string} params.parentUrl [optional]  - Parent URL to filter the feed; mutually exclusive with channel_id\n     * @param {string} params.channelId [optional]  - Channel ID to filter the feed; mutually exclusive with parent_url\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const appFid =\n     * const viewerFid =\n     * const limit =\n     * const includeReplies =\n     * const parentUrl =\n     * const channelId =\n     *\n     * client.fetchCastsForUser({ fid, appFid, viewerFid, limit, includeReplies, parentUrl, channelId }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)\n     *\n     */ async fetchCastsForUser(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.feedApi.fetchCastsForUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.\n     *\n     * @summary By filters\n     *\n     * @param {object} params\n     * @param {FeedType} params.feedType  - Defaults to following (requires FID or address). If set to filter (requires filter_type)\n     * @param {FilterType} params.filterType [optional]  - Used when feed_type=filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)\n     * @param {number} params.fid [optional]  - (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type\n     * @param {string} params.fids [optional]  - Used when filter_type=FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.\n     * @param {string} params.parentUrl [optional]  - Used when filter_type=parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type.\n     * @param {string} params.channelId [optional]  - Used when filter_type=channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.\n     * @param {boolean} params.membersOnly [optional]  - Used when filter_type=channel_id. Only include casts from members of the channel. True by default.\n     * @param {string} params.embedUrl [optional]  - Used when filter_type=embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend 'https://' if no protocol is included. Requires feed_type and filter_type.\n     * @param {Array<EmbedType>} params.embedTypes [optional]  - Used when filter_type=embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type.\n     * @param {boolean} params.withRecasts [optional]  - Include recasts in the response, true by default\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     * @param {number} params.viewerFid [optional]  - Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const feedType =\n     * const filterType =\n     * const fid =\n     * const fids =\n     * const parentUrl =\n     * const channelId =\n     * const membersOnly =\n     * const embedUrl =\n     * const embedTypes =\n     * const withRecasts =\n     * const limit =\n     * const viewerFid =\n     *\n     * client.fetchFeed({ feedType, filterType, fid, fids, parentUrl, channelId, membersOnly, embedUrl, embedTypes, withRecasts, limit, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)\n     *\n     */ async fetchFeed(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.feedApi.fetchFeed(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch feed based on channel IDs\n     *\n     * @summary By channel IDs\n     *\n     * @param {object} params\n     * @param {string[]} params.channelIds  - Comma separated list of up to 10 channel IDs e.g. neynar,farcaster\n     * @param {boolean} params.withRecasts [optional]  - Include recasts in the response, true by default\n     * @param {number} params.viewerFid [optional]  - Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {boolean} params.withReplies [optional]  - Include replies in the response, false by default\n     * @param {boolean} params.membersOnly [optional]  - Only include casts from members of the channel. True by default.\n     * @param {number[]} params.fids [optional]  - Comma separated list of FIDs to filter the feed by, up to 10 at a time\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     * @param {boolean} params.shouldModerate [optional]  - If true, only casts that have been liked by the moderator (if one exists) will be returned.\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const channelIds =\n     * const withRecasts =\n     * const viewerFid =\n     * const withReplies =\n     * const membersOnly =\n     * const fids =\n     * const limit =\n     * const shouldModerate =\n     *\n     * client.fetchFeedByChannelIds({ channelIds, withRecasts, viewerFid, withReplies, membersOnly, fids, limit, shouldModerate }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)\n     *\n     */ async fetchFeedByChannelIds(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        if (adjustedParams.channelIds && Array.isArray(adjustedParams.channelIds)) {\n            adjustedParams.channelIds = adjustedParams.channelIds.join(\",\");\n        }\n        if (adjustedParams.fids && Array.isArray(adjustedParams.fids)) {\n            adjustedParams.fids = adjustedParams.fids.map((value)=>String(value));\n        }\n        if (adjustedParams.fids && Array.isArray(adjustedParams.fids)) {\n            adjustedParams.fids = adjustedParams.fids.join(\",\");\n        }\n        const response = await this.apis.feedApi.fetchFeedByChannelIds(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch feed based on parent URLs\n     *\n     * @summary By parent URLs\n     *\n     * @param {object} params\n     * @param {string[]} params.parentUrls  - Comma separated list of parent_urls\n     * @param {boolean} params.withRecasts [optional]  - Include recasts in the response, true by default\n     * @param {number} params.viewerFid [optional]  - Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {boolean} params.withReplies [optional]  - Include replies in the response, false by default\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const parentUrls =\n     * const withRecasts =\n     * const viewerFid =\n     * const withReplies =\n     * const limit =\n     *\n     * client.fetchFeedByParentUrls({ parentUrls, withRecasts, viewerFid, withReplies, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)\n     *\n     */ async fetchFeedByParentUrls(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        if (adjustedParams.parentUrls && Array.isArray(adjustedParams.parentUrls)) {\n            adjustedParams.parentUrls = adjustedParams.parentUrls.join(\",\");\n        }\n        const response = await this.apis.feedApi.fetchFeedByParentUrls(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a personalized For You feed for a user\n     *\n     * @summary For you\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of user whose feed you want to create\n     * @param {number} params.viewerFid [optional]  - Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {ForYouProvider} params.provider [optional]\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 50)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     * @param {string} params.providerMetadata [optional]  - provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const viewerFid =\n     * const provider =\n     * const limit =\n     * const providerMetadata =\n     *\n     * client.fetchFeedForYou({ fid, viewerFid, provider, limit, providerMetadata }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)\n     *\n     */ async fetchFeedForYou(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.feedApi.fetchFeedForYou(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch feed of casts with mini apps, reverse chronological order\n     *\n     * @summary Casts with mini apps\n     *\n     * @param {object} params\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {number} params.viewerFid [optional]  - Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const limit =\n     * const viewerFid =\n     *\n     * client.fetchFramesOnlyFeed({ limit, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)\n     *\n     */ async fetchFramesOnlyFeed(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.feedApi.fetchFramesOnlyFeed(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first\n     *\n     * @summary 10 most popular casts\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of user whose feed you want to create\n     * @param {number} params.viewerFid [optional]\n     *\n     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const viewerFid =\n     *\n     * client.fetchPopularCastsByUser({ fid, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)\n     *\n     */ async fetchPopularCastsByUser(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.feedApi.fetchPopularCastsByUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch recent replies and recasts for a given user FID; sorted by most recent first\n     *\n     * @summary Replies and recasts\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of user whose replies and recasts you want to fetch\n     * @param {FetchRepliesAndRecastsForUserFilterEnum} params.filter [optional]  - filter to fetch only replies or recasts\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 50)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     * @param {number} params.viewerFid [optional]  - Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const filter =\n     * const limit =\n     * const viewerFid =\n     *\n     * client.fetchRepliesAndRecastsForUser({ fid, filter, limit, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)\n     *\n     */ async fetchRepliesAndRecastsForUser(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.feedApi.fetchRepliesAndRecastsForUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.\n     *\n     * @summary Trending feeds\n     *\n     * @param {object} params\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 10, Maximum: 10)\n     * @param {string} params.cursor [optional]  - Pagination cursor\n     * @param {number} params.viewerFid [optional]  - Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {FetchTrendingFeedTimeWindowEnum} params.timeWindow [optional]  - Time window for trending casts (7d window for channel feeds only)\n     * @param {string} params.channelId [optional]  - Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either `channel_id` or `parent_url`, not both.\n     * @param {string} params.parentUrl [optional]  - Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either `channel_id` or `parent_url`, not both.\n     * @param {FeedTrendingProvider} params.provider [optional]  - The provider of the trending casts feed.\n     * @param {string} params.providerMetadata [optional]  - provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const limit =\n     * const viewerFid =\n     * const timeWindow =\n     * const channelId =\n     * const parentUrl =\n     * const provider =\n     * const providerMetadata =\n     *\n     * client.fetchTrendingFeed({ limit, viewerFid, timeWindow, channelId, parentUrl, provider, providerMetadata }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)\n     *\n     */ async fetchTrendingFeed(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.feedApi.fetchTrendingFeed(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch feed based on who a user is following\n     *\n     * @summary Following\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of user whose feed you want to create\n     * @param {number} params.viewerFid [optional]  - Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {boolean} params.withRecasts [optional]  - Include recasts in the response, true by default\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const viewerFid =\n     * const withRecasts =\n     * const limit =\n     *\n     * client.fetchUserFollowingFeed({ fid, viewerFid, withRecasts, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)\n     *\n     */ async fetchUserFollowingFeed(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.feedApi.fetchUserFollowingFeed(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Check if a given fname is available\n     *\n     * @summary Check fname availability\n     *\n     * @param {object} params\n     * @param {string} params.fname\n     *\n     * @returns {Promise<FnameAvailabilityResponse>} A promise that resolves to a `FnameAvailabilityResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fname =\n     *\n     * client.isFnameAvailable({ fname }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/is-fname-available)\n     *\n     */ async isFnameAvailable(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.fnameApi.isFnameAvailable(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of suggested users to follow. Used to help users discover new users to follow\n     *\n     * @summary Suggest Follows\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of the user whose following you want to fetch.\n     * @param {number} params.viewerFid [optional]  - Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     *\n     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const viewerFid =\n     * const limit =\n     *\n     * client.fetchFollowSuggestions({ fid, viewerFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-follow-suggestions)\n     *\n     */ async fetchFollowSuggestions(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.followsApi.fetchFollowSuggestions(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of relevant followers for a specific FID. This usually shows on a profile as \\\"X, Y and Z follow this user\\\".\n     *\n     * @summary Relevant followers\n     *\n     * @param {object} params\n     * @param {number} params.targetFid  - User who's profile you are looking at\n     * @param {number} params.viewerFid  - The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.\n     *\n     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const targetFid =\n     * const viewerFid =\n     *\n     * client.fetchRelevantFollowers({ targetFid, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers)\n     *\n     */ async fetchRelevantFollowers(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.followsApi.fetchRelevantFollowers(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of followers for a specific FID.\n     *\n     * @summary Followers\n     *\n     * @param {object} params\n     * @param {number} params.fid  - User who's profile you are looking at\n     * @param {number} params.viewerFid [optional]  - Providing this will return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {FollowSortType} params.sortType [optional]  - Sort type for fetch followers. Default is `desc_chron`\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const viewerFid =\n     * const sortType =\n     * const limit =\n     *\n     * client.fetchUserFollowers({ fid, viewerFid, sortType, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n     *\n     */ async fetchUserFollowers(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.followsApi.fetchUserFollowers(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.\n     *\n     * @summary Following\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of the user whose following you want to fetch.\n     * @param {number} params.viewerFid [optional]  - Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {FollowSortType} params.sortType [optional]  - Optional parameter to sort the users based on different criteria.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<FollowersResponse>} A promise that resolves to a `FollowersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const viewerFid =\n     * const sortType =\n     * const limit =\n     *\n     * client.fetchUserFollowing({ fid, viewerFid, sortType, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n     *\n     */ async fetchUserFollowing(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.followsApi.fetchUserFollowing(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Delete an existing mini app, if it was made by the developer (identified by API key)\n     *\n     * @summary Delete mini app\n     *\n     * @param {object} params\n     * @param {string} params.uuid [optional]\n     *\n     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const uuid =\n     *\n     * client.deleteNeynarFrame({uuid}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)\n     *\n     */ async deleteNeynarFrame(params) {\n        const adjustedParams = {};\n        const _params = {\n            deleteFrameReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.frameApi.deleteNeynarFrame(adjustedParams);\n        return response.data;\n    }\n    /**\n     * A curated list of featured mini apps\n     *\n     * @summary Mini apps catalog\n     *\n     * @param {object} params\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 100, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor\n     * @param {MiniAppTimeWindow} params.timeWindow [optional]  - Time window used to calculate the change in trending score for each mini app, used to sort mini app results\n     * @param {Array<FetchFrameCatalogCategoriesEnum>} params.categories [optional]  - Comma separated list of categories to include in the results.  Includes all if left blank.  Example: `categories=games,social` OR: `categories=games&categories=social`\n     *\n     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const limit =\n     * const timeWindow =\n     * const categories =\n     *\n     * client.fetchFrameCatalog({ limit, timeWindow, categories }).then(response => {\n     *   console.log('response:', response);\n     * });\n     */ async fetchFrameCatalog(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.frameApi.fetchFrameCatalog(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches the mini app meta tags from the URL\n     *\n     * @summary Meta tags from URL\n     *\n     * @param {object} params\n     * @param {string} params.url  - The mini app URL to crawl\n     *\n     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const url =\n     *\n     * client.fetchFrameMetaTagsFromUrl({ url }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)\n     *\n     */ async fetchFrameMetaTagsFromUrl(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.frameApi.fetchFrameMetaTagsFromUrl(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of mini apps made by the developer (identified by API key)\n     *\n     * @summary List of mini apps\n     *\n     *\n     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object.\n     *\n     * @example\n     *\n     * client.fetchNeynarFrames().then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)\n     *\n     */ async fetchNeynarFrames() {\n        const response = await this.apis.frameApi.fetchNeynarFrames();\n        return response.data;\n    }\n    /**\n     * Returns a list of notifications tokens related to a mini app\n     *\n     * @summary List of mini app notification tokens\n     *\n     * @param {object} params\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {number[]} params.fids [optional]  - Comma separated list of FIDs, up to 100 at a time. If you pass in FIDs, you will get back the notification tokens for those FIDs. If you don't pass in FIDs, you will get back all the notification tokens for the mini app.\n     * @param {string} params.cursor [optional]  - Pagination cursor\n     *\n     * @returns {Promise<FrameNotificationTokens>} A promise that resolves to a `FrameNotificationTokens` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const limit =\n     * const fids =\n     *\n     * client.fetchNotificationTokens({ limit, fids }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notification-tokens)\n     *\n     */ async fetchNotificationTokens(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        if (adjustedParams.fids && Array.isArray(adjustedParams.fids)) {\n            adjustedParams.fids = adjustedParams.fids.map((value)=>String(value));\n        }\n        if (adjustedParams.fids && Array.isArray(adjustedParams.fids)) {\n            adjustedParams.fids = adjustedParams.fids.join(\",\");\n        }\n        const response = await this.apis.frameApi.fetchNotificationTokens(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user\n     *\n     * @summary Relevant mini apps\n     *\n     * @param {object} params\n     * @param {number} params.viewerFid  - FID of the user to fetch relevant mini apps for\n     * @param {MiniAppTimeWindow} params.timeWindow [optional]  - Time window used to limit statistics used to calculate mini app relevance\n     *\n     * @returns {Promise<FetchRelevantFrames200Response>} A promise that resolves to a `FetchRelevantFrames200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const viewerFid =\n     * const timeWindow =\n     *\n     * client.fetchRelevantFrames({ viewerFid, timeWindow }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-relevant)\n     *\n     */ async fetchRelevantFrames(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.frameApi.fetchRelevantFrames(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.\n     *\n     * @summary Analytics for the mini app\n     *\n     * @param {object} params\n     * @param {string} params.frameUrl\n     * @param {ValidateFrameAnalyticsType} params.analyticsType\n     * @param {string} params.start\n     * @param {string} params.stop\n     * @param {ValidateFrameAggregateWindow} params.aggregateWindow [optional]  - Required for `analytics_type=interactions-per-cast`\n     *\n     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const frameUrl =\n     * const analyticsType =\n     * const start =\n     * const stop =\n     * const aggregateWindow =\n     *\n     * client.fetchValidateFrameAnalytics({ frameUrl, analyticsType, start, stop, aggregateWindow }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)\n     *\n     */ async fetchValidateFrameAnalytics(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.frameApi.fetchValidateFrameAnalytics(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of all the mini apps validated by a user\n     *\n     * @summary All mini apps validated by user\n     *\n     *\n     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object.\n     *\n     * @example\n     *\n     * client.fetchValidateFrameList().then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)\n     *\n     */ async fetchValidateFrameList() {\n        const response = await this.apis.frameApi.fetchValidateFrameList();\n        return response.data;\n    }\n    /**\n     * Retrieves details about a transaction pay mini app by ID\n     *\n     * @summary Get transaction pay mini app\n     *\n     * @param {object} params\n     * @param {string} params.id  - ID of the transaction mini app to retrieve\n     *\n     * @returns {Promise<TransactionFrameResponse>} A promise that resolves to a `TransactionFrameResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const id =\n     *\n     * client.getTransactionPayFrame({ id }).then(response => {\n     *   console.log('response:', response);\n     * });\n     */ async getTransactionPayFrame(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.frameApi.getTransactionPayFrame(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a mini app either by UUID or Neynar URL\n     *\n     * @summary Mini app by UUID or URL\n     *\n     * @param {object} params\n     * @param {FrameType} params.type\n     * @param {string} params.uuid [optional]  - UUID of the mini app to fetch\n     * @param {string} params.url [optional]  - URL of the Neynar mini app to fetch\n     *\n     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const type =\n     * const uuid =\n     * const url =\n     *\n     * client.lookupNeynarFrame({ type, uuid, url }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)\n     *\n     */ async lookupNeynarFrame(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.frameApi.lookupNeynarFrame(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Post mini app actions, cast actions or cast composer actions to the server  \\\\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for mini apps.\n     *\n     * @summary Post a mini app action, cast action or a cast composer action\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.castHash [optional]  - Cast Hash\n     * @param {FrameAction} params.action\n     *\n     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const castHash =\n     * const action =\n     *\n     * client.postFrameAction({signerUuid, castHash, action}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)\n     *\n     */ async postFrameAction(params) {\n        const adjustedParams = {};\n        const _params = {\n            frameActionReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.frameApi.postFrameAction(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Post a mini app action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.\n     *\n     * @summary Signature packet\n     *\n     * @param {object} params\n     * @param {string} params.castHash [optional]  - Cast Hash\n     * @param {FrameAction} params.action\n     * @param {FrameSignaturePacket} params.signaturePacket\n     *\n     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const castHash =\n     * const action =\n     * const signaturePacket =\n     *\n     * client.postFrameActionDeveloperManaged({castHash, action, signaturePacket}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)\n     *\n     */ async postFrameActionDeveloperManaged(params) {\n        const adjustedParams = {};\n        const _params = {\n            frameDeveloperManagedActionReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.frameApi.postFrameActionDeveloperManaged(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Send notifications to interactors of a mini app\n     *\n     * @summary Send notifications\n     *\n     * @param {object} params\n     * @param {Array<number>} params.targetFids  - An array of target FIDs to whom the notifications should be sent. Each FID must be a positive integer. Pass an empty array to send notifications to all FIDs with notifications enabled for the mini app.\n     * @param {SendFrameNotificationsReqBodyNotification} params.notification\n     * @param {SendFrameNotificationsReqBodyFilters} params.filters [optional]\n     *\n     * @returns {Promise<SendFrameNotificationsResponse>} A promise that resolves to a `SendFrameNotificationsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const targetFids =\n     * const notification =\n     * const filters =\n     *\n     * client.publishFrameNotifications({targetFids, notification, filters}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-frame-notifications)\n     *\n     */ async publishFrameNotifications(params) {\n        const adjustedParams = {};\n        const _params = {\n            sendFrameNotificationsReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.frameApi.publishFrameNotifications(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Create a new mini app with a list of pages.\n     *\n     * @summary Create mini app\n     *\n     * @param {object} params\n     * @param {string} params.name  - The name of the mini app.\n     * @param {Array<NeynarFramePage>} params.pages\n     *\n     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const name =\n     * const pages =\n     *\n     * client.publishNeynarFrame({name, pages}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)\n     *\n     */ async publishNeynarFrame(params) {\n        const adjustedParams = {};\n        const _params = {\n            neynarFrameCreationReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.frameApi.publishNeynarFrame(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Search for mini apps based on a query string\n     *\n     * @summary Search mini apps\n     *\n     * @param {object} params\n     * @param {string} params.q  - Query string to search for mini apps\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor\n     *\n     * @returns {Promise<FrameCatalogResponse>} A promise that resolves to a `FrameCatalogResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const q =\n     * const limit =\n     *\n     * client.searchFrames({ q, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-frames)\n     *\n     */ async searchFrames(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.frameApi.searchFrames(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)\n     *\n     * @summary Update mini app\n     *\n     * @param {object} params\n     * @param {string} params.uuid  - The UUID of the mini app to update.\n     * @param {string} params.name [optional]  - The name of the mini app.\n     * @param {Array<NeynarFramePage>} params.pages\n     *\n     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const uuid =\n     * const name =\n     * const pages =\n     *\n     * client.updateNeynarFrame({uuid, name, pages}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)\n     *\n     */ async updateNeynarFrame(params) {\n        const adjustedParams = {};\n        const _params = {\n            neynarFrameUpdateReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.frameApi.updateNeynarFrame(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Validates a mini app against by an interacting user against a Farcaster Hub \\\\ (In order to validate a mini app, message bytes from Frame Action must be provided in hex)\n     *\n     * @summary Validate mini app action\n     *\n     * @param {object} params\n     * @param {string} params.messageBytesInHex  - Hexadecimal string of message bytes.\n     * @param {boolean} params.castReactionContext [optional]  - Adds viewer_context inside the cast object to indicate whether the interactor reacted to the cast housing the mini app.\n     * @param {boolean} params.followContext [optional]  - Adds viewer_context inside the user (interactor) object to indicate whether the interactor follows or is followed by the cast author.\n     * @param {boolean} params.signerContext [optional]  - Adds context about the app used by the user inside `frame.action`.\n     * @param {boolean} params.channelFollowContext [optional]  - Adds context about the channel that the cast belongs to inside of the cast object.\n     *\n     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const messageBytesInHex =\n     * const castReactionContext =\n     * const followContext =\n     * const signerContext =\n     * const channelFollowContext =\n     *\n     * client.validateFrameAction({messageBytesInHex, castReactionContext, followContext, signerContext, channelFollowContext}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)\n     *\n     */ async validateFrameAction(params) {\n        const adjustedParams = {};\n        const _params = {\n            validateFrameActionReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.frameApi.validateFrameAction(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Nonce to sign a message\n     *\n     * @summary Fetch nonce\n     *\n     *\n     * @returns {Promise<NonceResponse>} A promise that resolves to a `NonceResponse` object.\n     *\n     * @example\n     *\n     * client.fetchNonce().then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-nonce)\n     *\n     */ async fetchNonce() {\n        const response = await this.apis.loginApi.fetchNonce();\n        return response.data;\n    }\n    /**\n     * Fetches metrics casts matching a query\n     *\n     * @summary Metrics for casts\n     *\n     * @param {object} params\n     * @param {string} params.q  - Query string to search for casts\n     * @param {FetchCastMetricsIntervalEnum} params.interval [optional]  - Interval of time for which to fetch metrics. Choices are `1d`, `7d`, `30d`\n     * @param {number} params.authorFid [optional]  - Fid of the user whose casts you want to search\n     * @param {string} params.channelId [optional]  - Channel ID of the casts you want to search\n     *\n     * @returns {Promise<CastsMetricsResponse>} A promise that resolves to a `CastsMetricsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const q =\n     * const interval =\n     * const authorFid =\n     * const channelId =\n     *\n     * client.fetchCastMetrics({ q, interval, authorFid, channelId }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-metrics)\n     *\n     */ async fetchCastMetrics(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.metricsApi.fetchCastMetrics(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Deletes a mute for a given FID. This is an allowlisted API, reach out if you want access.\n     *\n     * @summary Unmute FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The unique identifier of a farcaster user (unsigned integer)\n     * @param {number} params.mutedFid  - The unique identifier of a farcaster user (unsigned integer)\n     *\n     * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const mutedFid =\n     *\n     * client.deleteMute({fid, mutedFid}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-mute)\n     *\n     */ async deleteMute(params) {\n        const adjustedParams = {};\n        const _params = {\n            muteReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.muteApi.deleteMute(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches all FIDs that a user has muted.\n     *\n     * @summary Muted FIDs of user\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The user's FID (identifier)\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 20, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<MuteListResponse>} A promise that resolves to a `MuteListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const limit =\n     *\n     * client.fetchMuteList({ fid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-mute-list)\n     *\n     */ async fetchMuteList(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.muteApi.fetchMuteList(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Adds a mute for a given FID. This is an allowlisted API, reach out if you want access.\n     *\n     * @summary Mute FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The unique identifier of a farcaster user (unsigned integer)\n     * @param {number} params.mutedFid  - The unique identifier of a farcaster user (unsigned integer)\n     *\n     * @returns {Promise<MuteResponse>} A promise that resolves to a `MuteResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const mutedFid =\n     *\n     * client.publishMute({fid, mutedFid}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-mute)\n     *\n     */ async publishMute(params) {\n        const adjustedParams = {};\n        const _params = {\n            muteReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.muteApi.publishMute(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of notifications for a specific FID.\n     *\n     * @summary For user\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.\n     * @param {Array<NotificationType>} params.type [optional]  - Notification type to fetch. Comma separated values of follows, recasts, likes, mentions, replies.\n     * @param {boolean} params.priorityMode [optional]  - When true, only returns notifications from power badge users and users that the user follows.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 15, Maximum: 25)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const type =\n     * const priorityMode =\n     * const limit =\n     *\n     * client.fetchAllNotifications({ fid, type, priorityMode, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)\n     *\n     */ async fetchAllNotifications(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.notificationsApi.fetchAllNotifications(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of notifications for a user in specific channels\n     *\n     * @summary For user by channel\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.\n     * @param {string[]} params.channelIds  - Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)\n     * @param {boolean} params.priorityMode [optional]  - When true, only returns notifications from power badge users and users that the user follows.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 15, Maximum: 25)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const channelIds =\n     * const priorityMode =\n     * const limit =\n     *\n     * client.fetchChannelNotificationsForUser({ fid, channelIds, priorityMode, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)\n     *\n     */ async fetchChannelNotificationsForUser(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        if (adjustedParams.channelIds && Array.isArray(adjustedParams.channelIds)) {\n            adjustedParams.channelIds = adjustedParams.channelIds.join(\",\");\n        }\n        const response = await this.apis.notificationsApi.fetchChannelNotificationsForUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Returns a list of notifications for a user in specific parent_urls\n     *\n     * @summary For user by parent_urls\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.\n     * @param {string[]} params.parentUrls  - Comma separated parent_urls\n     * @param {boolean} params.priorityMode [optional]  - When true, only returns notifications from power badge users and users that the user follows.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 15, Maximum: 25)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const parentUrls =\n     * const priorityMode =\n     * const limit =\n     *\n     * client.fetchNotificationsByParentUrlForUser({ fid, parentUrls, priorityMode, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)\n     *\n     */ async fetchNotificationsByParentUrlForUser(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        if (adjustedParams.parentUrls && Array.isArray(adjustedParams.parentUrls)) {\n            adjustedParams.parentUrls = adjustedParams.parentUrls.join(\",\");\n        }\n        const response = await this.apis.notificationsApi.fetchNotificationsByParentUrlForUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Mark notifications as seen. You can choose one of two authorization methods, either:   1. Provide a valid signer_uuid in the request body (Most common)   2. Provide a valid, signed \\\"Bearer\\\" token in the request\\'s `Authorization` header similar to the      approach described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication)\n     *\n     * @summary Mark as seen\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid [optional]  - The UUID of a signer with at least one write permission.  Required unless a valid Authorization Bearer token is provided in the header.\n     * @param {NotificationType} params.type [optional]\n     * @param {string} params.authorization [optional]  - Optional Bearer token for certain endpoints. The token format is described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication).\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const type =\n     * const authorization =\n     *\n     * client.markNotificationsAsSeen({signerUuid, type, authorization}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)\n     *\n     */ async markNotificationsAsSeen(params) {\n        const adjustedParams = {};\n        const _params = {\n            markNotificationsAsSeenReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.notificationsApi.markNotificationsAsSeen(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Creates a new token. This is an allowlisted API, reach out if you want access.\n     *\n     * @summary Deploy fungible\n     *\n     * @param {object} params\n     * @param {string} params.owner  - Ethereum address of the one who is creating the token\n     * @param {string} params.symbol  - Symbol/Ticker for the token\n     * @param {string} params.name  - Name of the token\n     * @param {File} params.metadataMedia [optional]  - Media file associated with the token.  Supported formats are image/jpeg, image/gif and image/png\n     * @param {string} params.metadataDescription [optional]  - Description of the token\n     * @param {DeployFungibleMetadataNsfwEnum} params.metadataNsfw [optional]  - Indicates if the token is NSFW (Not Safe For Work).\n     * @param {string} params.metadataWebsiteLink [optional]  - Website link related to the token\n     * @param {string} params.metadataTwitter [optional]  - Twitter profile link\n     * @param {string} params.metadataDiscord [optional]  - Discord server link\n     * @param {string} params.metadataTelegram [optional]  - Telegram link\n     * @param {DeployFungibleNetworkEnum} params.network [optional]  - Network/Chain name\n     * @param {DeployFungibleFactoryEnum} params.factory [optional]  - Factory name - wow -> [wow.xyz](https://wow.xyz) - clanker -> [clanker.world](https://www.clanker.world)\n     *\n     * @returns {Promise<DeployFungibleResponse>} A promise that resolves to a `DeployFungibleResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const owner =\n     * const symbol =\n     * const name =\n     * const metadataMedia =\n     * const metadataDescription =\n     * const metadataNsfw =\n     * const metadataWebsiteLink =\n     * const metadataTwitter =\n     * const metadataDiscord =\n     * const metadataTelegram =\n     * const network =\n     * const factory =\n     *\n     * client.deployFungible({ owner, symbol, name, metadataMedia, metadataDescription, metadataNsfw, metadataWebsiteLink, metadataTwitter, metadataDiscord, metadataTelegram, network, factory }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/deploy-fungible)\n     *\n     */ async deployFungible(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.onchainApi.deployFungible(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \\\"X, Y, Z and N others you know own this asset\\\".\n     *\n     * @summary Relevant owners\n     *\n     * @param {object} params\n     * @param {string} params.contractAddress  - Contract address of the fungible asset\n     * @param {FungibleOwnerRelevantNetwork} params.network  - Network of the fungible asset.\n     * @param {number} params.viewerFid [optional]  - If you provide a viewer_fid, the response will include token holders from the user's network, respecting their mutes and blocks and including viewer_context; if not provided, the response will show top token holders across the network—both sets can be combined to generate a longer list if desired.\n     *\n     * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const contractAddress =\n     * const network =\n     * const viewerFid =\n     *\n     * client.fetchRelevantFungibleOwners({ contractAddress, network, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)\n     *\n     */ async fetchRelevantFungibleOwners(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.onchainApi.fetchRelevantFungibleOwners(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches the token balances of a user given their FID\n     *\n     * @summary Token balance\n     *\n     * @param {object} params\n     * @param {number} params.fid  - FID of the user to fetch\n     * @param {Array<Network>} params.networks  - Comma separated list of networks to fetch balances for\n     *\n     * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const networks =\n     *\n     * client.fetchUserBalance({ fid, networks }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)\n     *\n     */ async fetchUserBalance(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.onchainApi.fetchUserBalance(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Register a new farcaster account onchain. Optionally you can pass in signers along to register a new account and create multiple signers in a single transaction\n     *\n     * @summary Register Farcaster account onchain\n     *\n     * @param {object} params\n     * @param {RegisterUserOnChainReqBodyRegistration} params.registration\n     * @param {number} params.storageUnits [optional]\n     * @param {Array<RegisterUserOnChainReqBodySignersInner>} params.signers [optional]\n     * @param {Array<RegisterUserOnChainReqBodyPreRegistrationCallsInner>} params.preRegistrationCalls [optional]\n     * @param {string} params.idem [optional]\n     *\n     * @returns {Promise<RegisterUserOnChainResponse>} A promise that resolves to a `RegisterUserOnChainResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const registration =\n     * const storageUnits =\n     * const signers =\n     * const preRegistrationCalls =\n     * const idem =\n     *\n     * client.registerAccountOnchain({registration, storageUnits, signers, preRegistrationCalls, idem}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account-onchain)\n     *\n     */ async registerAccountOnchain(params) {\n        const adjustedParams = {};\n        const _params = {\n            registerUserOnChainReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.onchainApi.registerAccountOnchain(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Send fungibles in bulk to several farcaster users. A funded wallet is to required use this API. React out to us on the Neynar channel on farcaster to get your wallet address.\n     *\n     * @summary Send fungibles\n     *\n     * @param {object} params\n     * @param {string} params.xWalletId  - Wallet ID to use for transactions\n     * @param {TransactionSendFungiblesRequest} params.transactionSendFungiblesRequest\n     *\n     * @returns {Promise<TransactionSendFungiblesResponse>} A promise that resolves to a `TransactionSendFungiblesResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const xWalletId =\n     * const transactionSendFungiblesRequest =\n     *\n     * client.sendFungiblesToUsers({ xWalletId, transactionSendFungiblesRequest }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/send-fungibles-to-users)\n     *\n     */ async sendFungiblesToUsers(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.onchainApi.sendFungiblesToUsers(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Delete a reaction (like or recast) to a cast \\\\ (In order to delete a reaction `signer_uuid` must be approved)\n     *\n     * @summary Delete reaction\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {ReactionType} params.reactionType\n     * @param {string} params.target  - Target cast hash (hex string starting with 0x) OR a valid URL.\n     * @param {number} params.targetAuthorFid [optional]  - The unique identifier of a farcaster user (unsigned integer)\n     * @param {string} params.idem [optional]  - An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request.\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const reactionType =\n     * const target =\n     * const targetAuthorFid =\n     * const idem =\n     *\n     * client.deleteReaction({signerUuid, reactionType, target, targetAuthorFid, idem}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-reaction)\n     *\n     */ async deleteReaction(params) {\n        const adjustedParams = {};\n        const _params = {\n            reactionReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.reactionApi.deleteReaction(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches reactions for a given cast\n     *\n     * @summary Reactions for cast\n     *\n     * @param {object} params\n     * @param {string} params.hash\n     * @param {Array<ReactionsType>} params.types  - Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: 'likes' and 'recasts'. By default api returns both. To select multiple types, use a comma-separated list of these values.\n     * @param {number} params.viewerFid [optional]  - Providing this will return a list of reactions that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<ReactionsCastResponse>} A promise that resolves to a `ReactionsCastResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const hash =\n     * const types =\n     * const viewerFid =\n     * const limit =\n     *\n     * client.fetchCastReactions({ hash, types, viewerFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n     *\n     */ async fetchCastReactions(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.reactionApi.fetchCastReactions(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches reactions for a given user\n     *\n     * @summary Reactions for user\n     *\n     * @param {object} params\n     * @param {number} params.fid\n     * @param {ReactionsType} params.type  - Type of reaction to fetch (likes or recasts or all)\n     * @param {number} params.viewerFid [optional]  - Providing this will return a list of reactions that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<ReactionsResponse>} A promise that resolves to a `ReactionsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const type =\n     * const viewerFid =\n     * const limit =\n     *\n     * client.fetchUserReactions({ fid, type, viewerFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n     *\n     */ async fetchUserReactions(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.reactionApi.fetchUserReactions(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Post a reaction (like or recast) to a given cast \\\\ (In order to post a reaction `signer_uuid` must be approved)\n     *\n     * @summary Post a reaction\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {ReactionType} params.reactionType\n     * @param {string} params.target  - Target cast hash (hex string starting with 0x) OR a valid URL.\n     * @param {number} params.targetAuthorFid [optional]  - The unique identifier of a farcaster user (unsigned integer)\n     * @param {string} params.idem [optional]  - An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request.\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const reactionType =\n     * const target =\n     * const targetAuthorFid =\n     * const idem =\n     *\n     * client.publishReaction({signerUuid, reactionType, target, targetAuthorFid, idem}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-reaction)\n     *\n     */ async publishReaction(params) {\n        const adjustedParams = {};\n        const _params = {\n            reactionReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.reactionApi.publishReaction(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Creates a signer and returns the signer status. \\\\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.\n     *\n     * @summary Create signer\n     *\n     *\n     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object.\n     *\n     * @example\n     *\n     * client.createSigner().then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)\n     *\n     */ async createSigner() {\n        const response = await this.apis.signerApi.createSigner();\n        return response.data;\n    }\n    /**\n     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)\n     *\n     * @summary Fetch authorization url\n     *\n     * @param {object} params\n     * @param {string} params.clientId\n     * @param {AuthorizationUrlResponseType} params.responseType\n     *\n     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const clientId =\n     * const responseType =\n     *\n     * client.fetchAuthorizationUrl({ clientId, responseType }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)\n     *\n     */ async fetchAuthorizationUrl(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.signerApi.fetchAuthorizationUrl(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches a list of signers for a custody address\n     *\n     * @summary List signers\n     *\n     * @param {object} params\n     * @param {string} params.message  - A Sign-In with Ethereum (SIWE) message that the user's Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.  example:  example.com wants you to sign in with your Ethereum account:n0x23A...F232nnSign in to continue.nnURI: example.comnVersion: 1nChain ID: 1nNonce: xyz123nIssued At: 2021-09-01T14:52:07Z  Note: This is just an example message (So, message is invalid, since we don't want any signers related to NEYNAR_API_DOCS to be exposed).   [Checkout fetch-signers API documentation for more details.](https://docs.neynar.com/docs/fetch-signers-1)\n     * @param {string} params.signature  - The digital signature produced by signing the provided SIWE message with the user's Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.\n     *\n     * @returns {Promise<SignerListResponse>} A promise that resolves to a `SignerListResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const message =\n     * const signature =\n     *\n     * client.fetchSigners({ message, signature }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-signers)\n     *\n     */ async fetchSigners(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.signerApi.fetchSigners(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches the status of a developer managed signer by public key\n     *\n     * @summary Status by public key\n     *\n     * @param {object} params\n     * @param {string} params.publicKey\n     *\n     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const publicKey =\n     *\n     * client.lookupDeveloperManagedSigner({ publicKey }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)\n     *\n     */ async lookupDeveloperManagedSigner(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.signerApi.lookupDeveloperManagedSigner(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)\n     *\n     * @summary Status\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid\n     *\n     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     *\n     * client.lookupSigner({ signerUuid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)\n     *\n     */ async lookupSigner(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.signerApi.lookupSigner(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.\n     *\n     * @summary Publish message\n     *\n     * @param {object} params\n     * @param {object} params.body\n     *\n     * @returns {Promise<object>} A promise that resolves to a `object` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const body =\n     *\n     * client.publishMessageToFarcaster({ body }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)\n     *\n     */ async publishMessageToFarcaster(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.signerApi.publishMessageToFarcaster(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.\n     *\n     * @summary Register Signed Key\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.signature  - Signature generated by the custody address of the app. Signed data includes app_fid, deadline, signer’s public key\n     * @param {number} params.appFid  - The unique identifier of a farcaster user (unsigned integer)\n     * @param {number} params.deadline  - unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)\n     * @param {string} params.redirectUrl [optional]  - Url to redirect to after the signer is approved.  **Note** : This should only be used when requesting a signer from a native mobile application.\n     * @param {SignedKeyRequestSponsor} params.sponsor [optional]\n     *\n     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const signature =\n     * const appFid =\n     * const deadline =\n     * const redirectUrl =\n     * const sponsor =\n     *\n     * client.registerSignedKey({signerUuid, signature, appFid, deadline, redirectUrl, sponsor}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)\n     *\n     */ async registerSignedKey(params) {\n        const adjustedParams = {};\n        const _params = {\n            registerSignerKeyReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.signerApi.registerSignedKey(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Registers an signed key and returns the developer managed signer status with an approval url.\n     *\n     * @summary Register Signed Key\n     *\n     * @param {object} params\n     * @param {string} params.publicKey  - Ed25519 public key\n     * @param {string} params.signature  - Signature generated by the custody address of the app. Signed data includes app_fid, deadline, signer’s public key\n     * @param {number} params.appFid  - The unique identifier of a farcaster user (unsigned integer)\n     * @param {number} params.deadline  - unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)\n     * @param {string} params.redirectUrl [optional]  - Url to redirect to after the signer is approved.  **Note** : This should only be used when requesting a signer from a native mobile application.\n     * @param {SignedKeyRequestSponsor} params.sponsor [optional]\n     *\n     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const publicKey =\n     * const signature =\n     * const appFid =\n     * const deadline =\n     * const redirectUrl =\n     * const sponsor =\n     *\n     * client.registerSignedKeyForDeveloperManagedSigner({publicKey, signature, appFid, deadline, redirectUrl, sponsor}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)\n     *\n     */ async registerSignedKeyForDeveloperManagedSigner(params) {\n        const adjustedParams = {};\n        const _params = {\n            registerDeveloperManagedSignedKeyReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.signerApi.registerSignedKeyForDeveloperManagedSigner(adjustedParams);\n        return response.data;\n    }\n    /**\n     * This api will help you rent units of storage for an year for a specific FID. A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.\n     *\n     * @summary Buy storage\n     *\n     * @param {object} params\n     * @param {number} params.fid\n     * @param {number} params.units [optional]  - Number of storage units to buy. A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.\n     * @param {string} params.idem [optional]  - An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request.\n     *\n     * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const units =\n     * const idem =\n     *\n     * client.buyStorage({fid, units, idem}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/buy-storage)\n     *\n     */ async buyStorage(params) {\n        const adjustedParams = {};\n        const _params = {\n            buyStorageReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.storageApi.buyStorage(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches storage allocations for a given user\n     *\n     * @summary Allocation of user\n     *\n     * @param {object} params\n     * @param {number} params.fid\n     *\n     * @returns {Promise<StorageAllocationsResponse>} A promise that resolves to a `StorageAllocationsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     *\n     * client.lookupUserStorageAllocations({ fid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-allocations)\n     *\n     */ async lookupUserStorageAllocations(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.storageApi.lookupUserStorageAllocations(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches storage usage for a given user\n     *\n     * @summary Usage of user\n     *\n     * @param {object} params\n     * @param {number} params.fid\n     *\n     * @returns {Promise<StorageUsageResponse>} A promise that resolves to a `StorageUsageResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     *\n     * client.lookupUserStorageUsage({ fid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-usage)\n     *\n     */ async lookupUserStorageUsage(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.storageApi.lookupUserStorageUsage(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch what FIDs and contracts a FID is subscribed to.\n     *\n     * @summary Subscribed to\n     *\n     * @param {object} params\n     * @param {number} params.fid\n     * @param {SubscriptionProvider} params.subscriptionProvider\n     * @param {number} params.viewerFid [optional]\n     *\n     * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const subscriptionProvider =\n     * const viewerFid =\n     *\n     * client.fetchSubscribedToForFid({ fid, subscriptionProvider, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)\n     *\n     */ async fetchSubscribedToForFid(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.subscribersApi.fetchSubscribedToForFid(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch subscribers for a given FID\\'s contracts. Doesn\\'t return addresses that don\\'t have an FID.\n     *\n     * @summary Subscribers of a user\n     *\n     * @param {object} params\n     * @param {number} params.fid\n     * @param {SubscriptionProviders} params.subscriptionProvider\n     * @param {number} params.viewerFid [optional]\n     *\n     * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const subscriptionProvider =\n     * const viewerFid =\n     *\n     * client.fetchSubscribersForFid({ fid, subscriptionProvider, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)\n     *\n     */ async fetchSubscribersForFid(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.subscribersApi.fetchSubscribersForFid(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Check if a wallet address is subscribed to a given STP (Hypersub) contract.\n     *\n     * @summary Hypersub subscription check\n     *\n     * @param {object} params\n     * @param {string[]} params.addresses  - Comma separated list of Ethereum addresses, up to 350 at a time\n     * @param {string} params.contractAddress  - Ethereum address of the STP contract\n     * @param {string} params.chainId  - Chain ID of the STP contract\n     *\n     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const addresses =\n     * const contractAddress =\n     * const chainId =\n     *\n     * client.fetchSubscriptionCheck({ addresses, contractAddress, chainId }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)\n     *\n     */ async fetchSubscriptionCheck(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        if (adjustedParams.addresses && Array.isArray(adjustedParams.addresses)) {\n            adjustedParams.addresses = adjustedParams.addresses.join(\",\");\n        }\n        const response = await this.apis.subscribersApi.fetchSubscriptionCheck(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch created subscriptions for a given FID\\'s.\n     *\n     * @summary Subscriptions created by FID\n     *\n     * @param {object} params\n     * @param {number} params.fid\n     * @param {SubscriptionProvider} params.subscriptionProvider\n     *\n     * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const subscriptionProvider =\n     *\n     * client.fetchSubscriptionsForFid({ fid, subscriptionProvider }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)\n     *\n     */ async fetchSubscriptionsForFid(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.subscribersApi.fetchSubscriptionsForFid(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Removes verification for an eth address for the user \\\\ (In order to delete verification `signer_uuid` must be approved)\n     *\n     * @summary Delete verification\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.address  - Ethereum address\n     * @param {string} params.blockHash\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const address =\n     * const blockHash =\n     *\n     * client.deleteVerification({signerUuid, address, blockHash}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-verification)\n     *\n     */ async deleteVerification(params) {\n        const adjustedParams = {};\n        const _params = {\n            removeVerificationReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.userApi.deleteVerification(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches information about multiple users based on FIDs\n     *\n     * @summary By FIDs\n     *\n     * @param {object} params\n     * @param {number[]} params.fids  - Comma separated list of FIDs, up to 100 at a time\n     * @param {number} params.viewerFid [optional]\n     *\n     * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fids =\n     * const viewerFid =\n     *\n     * client.fetchBulkUsers({ fids, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users)\n     *\n     */ async fetchBulkUsers(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        if (adjustedParams.fids && Array.isArray(adjustedParams.fids)) {\n            adjustedParams.fids = adjustedParams.fids.map((value)=>String(value));\n        }\n        if (adjustedParams.fids && Array.isArray(adjustedParams.fids)) {\n            adjustedParams.fids = adjustedParams.fids.join(\",\");\n        }\n        const response = await this.apis.userApi.fetchBulkUsers(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches all users based on multiple Ethereum or Solana addresses.  Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.  A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users. You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.\n     *\n     * @summary By Eth or Sol addresses\n     *\n     * @param {object} params\n     * @param {string[]} params.addresses  - Comma separated list of Ethereum addresses, up to 350 at a time\n     * @param {Array<BulkUserAddressType>} params.addressTypes [optional]  - Customize which address types the request should search for. This is a comma-separated string that can include the following values: 'custody_address' and 'verified_address'. By default api returns both. To select multiple types, use a comma-separated list of these values.\n     * @param {number} params.viewerFid [optional]\n     *\n     * @returns {Promise<BulkUsersByAddressResponse>} A promise that resolves to a `BulkUsersByAddressResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const addresses =\n     * const addressTypes =\n     * const viewerFid =\n     *\n     * client.fetchBulkUsersByEthOrSolAddress({ addresses, addressTypes, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-users-by-eth-or-sol-address)\n     *\n     */ async fetchBulkUsersByEthOrSolAddress(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        if (adjustedParams.addresses && Array.isArray(adjustedParams.addresses)) {\n            adjustedParams.addresses = adjustedParams.addresses.join(\",\");\n        }\n        const response = await this.apis.userApi.fetchBulkUsersByEthOrSolAddress(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches power users based on Warpcast power badges. Information is updated once a day.\n     *\n     * @summary Power users\n     *\n     * @param {object} params\n     * @param {number} params.viewerFid [optional]\n     * @param {number} params.limit [optional]  - Number of power users to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const viewerFid =\n     * const limit =\n     *\n     * client.fetchPowerUsers({ viewerFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users)\n     *\n     */ async fetchPowerUsers(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.userApi.fetchPowerUsers(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches power users and respond in a backwards compatible format to Warpcast\\'s deprecated power badge endpoint.\n     *\n     * @summary Power user FIDs\n     *\n     * @param {object} params\n     *\n     * @returns {Promise<UserPowerLiteResponse>} A promise that resolves to a `UserPowerLiteResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     *\n     * client.fetchPowerUsersLite().then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-power-users-lite)\n     *\n     */ async fetchPowerUsersLite() {\n        var _a, _b;\n        const adjustedParams = {};\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.userApi.fetchPowerUsersLite(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches a list of users given a location\n     *\n     * @summary By location\n     *\n     * @param {object} params\n     * @param {number} params.latitude  - Latitude of the location\n     * @param {number} params.longitude  - Longitude of the location\n     * @param {number} params.viewerFid [optional]  - FID of the user viewing the feed. Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {number} params.limit [optional]  - Number of results to fetch (Default: 25, Maximum: 100)\n     * @param {string} params.cursor [optional]  - Pagination cursor\n     *\n     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const latitude =\n     * const longitude =\n     * const viewerFid =\n     * const limit =\n     *\n     * client.fetchUsersByLocation({ latitude, longitude, viewerFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-by-location)\n     *\n     */ async fetchUsersByLocation(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.userApi.fetchUsersByLocation(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Follow a user \\\\ (In order to follow a user `signer_uuid` must be approved)\n     *\n     * @summary Follow user\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {Array<number>} params.targetFids\n     *\n     * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const targetFids =\n     *\n     * client.followUser({signerUuid, targetFids}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-user)\n     *\n     */ async followUser(params) {\n        const adjustedParams = {};\n        const _params = {\n            followReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.userApi.followUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches FID to [assign it to new user](https://docs.neynar.com/reference/register-account)\n     *\n     * @summary Fetch fresh FID\n     *\n     * @param {object} params\n     *\n     * @returns {Promise<UserFIDResponse>} A promise that resolves to a `UserFIDResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     *\n     * client.getFreshAccountFID().then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/get-fresh-account-fid)\n     *\n     */ async getFreshAccountFID() {\n        var _a, _b;\n        const adjustedParams = {};\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.userApi.getFreshAccountFID(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Lookup a user by custody-address\n     *\n     * @summary By custody-address\n     *\n     * @param {object} params\n     * @param {string} params.custodyAddress  - Custody Address associated with mnemonic\n     *\n     * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const custodyAddress =\n     *\n     * client.lookupUserByCustodyAddress({ custodyAddress }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-custody-address)\n     *\n     */ async lookupUserByCustodyAddress(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.userApi.lookupUserByCustodyAddress(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches a single hydrated user object given a username\n     *\n     * @summary By username\n     *\n     * @param {object} params\n     * @param {string} params.username  - Username of the user to fetch\n     * @param {number} params.viewerFid [optional]\n     *\n     * @returns {Promise<UserResponse>} A promise that resolves to a `UserResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const username =\n     * const viewerFid =\n     *\n     * client.lookupUserByUsername({ username, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-by-username)\n     *\n     */ async lookupUserByUsername(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.userApi.lookupUserByUsername(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetches the users who have verified the specified X (Twitter) username\n     *\n     * @summary By X username\n     *\n     * @param {object} params\n     * @param {string} params.xUsername  - X (Twitter) username to search for, without the @ symbol\n     * @param {number} params.viewerFid [optional]  - FID of the viewer for contextual information like follows and blocks\n     *\n     * @returns {Promise<BulkUsersResponse>} A promise that resolves to a `BulkUsersResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const xUsername =\n     * const viewerFid =\n     *\n     * client.lookupUsersByXUsername({ xUsername, viewerFid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-users-by-x-username)\n     *\n     */ async lookupUsersByXUsername(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.userApi.lookupUsersByXUsername(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Adds verification for an eth address or contract for the user \\\\ (In order to add verification `signer_uuid` must be approved)\n     *\n     * @summary Add verification\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.address  - Ethereum address\n     * @param {string} params.blockHash\n     * @param {string} params.ethSignature\n     * @param {VerificationType} params.verificationType [optional]\n     * @param {VerificationChainId} params.chainId [optional]\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const address =\n     * const blockHash =\n     * const ethSignature =\n     * const verificationType =\n     * const chainId =\n     *\n     * client.publishVerification({signerUuid, address, blockHash, ethSignature, verificationType, chainId}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-verification)\n     *\n     */ async publishVerification(params) {\n        const adjustedParams = {};\n        const _params = {\n            addVerificationReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.userApi.publishVerification(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Register account on farcaster.  **Note:** This API must be called within 10 minutes of the fetch FID API call (i.e., /v2/farcaster/user/fid). Otherwise, Neynar will assign this FID to another available user.\n     *\n     * @summary Register new account\n     *\n     * @param {object} params\n     * @param {string} params.signature\n     * @param {number} params.fid\n     * @param {string} params.requestedUserCustodyAddress\n     * @param {number} params.deadline\n     * @param {string} params.fname [optional]\n     * @param {RegisterUserReqBodyMetadata} params.metadata [optional]\n     *\n     * @returns {Promise<RegisterUserResponse>} A promise that resolves to a `RegisterUserResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signature =\n     * const fid =\n     * const requestedUserCustodyAddress =\n     * const deadline =\n     * const fname =\n     * const metadata =\n     *\n     * client.registerAccount({signature, fid, requestedUserCustodyAddress, deadline, fname, metadata}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-account)\n     *\n     */ async registerAccount(params) {\n        const adjustedParams = {};\n        const _params = {\n            registerUserReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.userApi.registerAccount(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Search for Usernames\n     *\n     * @summary Search for Usernames\n     *\n     * @param {object} params\n     * @param {string} params.q\n     * @param {number} params.viewerFid [optional]  - Providing this will return search results that respects this user's mutes and blocks and includes `viewer_context`.\n     * @param {number} params.limit [optional]  - Number of users to fetch (Default: 5, Maximum: 10)\n     * @param {string} params.cursor [optional]  - Pagination cursor.\n     *\n     * @returns {Promise<UserSearchResponse>} A promise that resolves to a `UserSearchResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const q =\n     * const viewerFid =\n     * const limit =\n     *\n     * client.searchUser({ q, viewerFid, limit }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-user)\n     *\n     */ async searchUser(params) {\n        var _a, _b;\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        adjustedParams[\"xNeynarExperimental\"] = (_b = (_a = this.config.baseOptions) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b[\"x-neynar-experimental\"];\n        const response = await this.apis.userApi.searchUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Unfollow a user \\\\ (In order to unfollow a user `signer_uuid` must be approved)\n     *\n     * @summary Unfollow user\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {Array<number>} params.targetFids\n     *\n     * @returns {Promise<BulkFollowResponse>} A promise that resolves to a `BulkFollowResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const targetFids =\n     *\n     * client.unfollowUser({signerUuid, targetFids}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-user)\n     *\n     */ async unfollowUser(params) {\n        const adjustedParams = {};\n        const _params = {\n            followReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.userApi.unfollowUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Update user profile \\\\ (In order to update user\\'s profile `signer_uuid` must be approved)\n     *\n     * @summary Update user profile\n     *\n     * @param {object} params\n     * @param {string} params.signerUuid  - UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.\n     * @param {string} params.bio [optional]\n     * @param {string} params.pfpUrl [optional]\n     * @param {string} params.url [optional]\n     * @param {string} params.username [optional]\n     * @param {string} params.displayName [optional]\n     * @param {UpdateUserReqBodyLocation} params.location [optional]\n     * @param {UpdateUserReqBodyVerifiedAccounts} params.verifiedAccounts [optional]\n     *\n     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const signerUuid =\n     * const bio =\n     * const pfpUrl =\n     * const url =\n     * const username =\n     * const displayName =\n     * const location =\n     * const verifiedAccounts =\n     *\n     * client.updateUser({signerUuid, bio, pfpUrl, url, username, displayName, location, verifiedAccounts}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-user)\n     *\n     */ async updateUser(params) {\n        const adjustedParams = {};\n        const _params = {\n            updateUserReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.userApi.updateUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Delete a webhook\n     *\n     * @summary Delete a webhook\n     *\n     * @param {object} params\n     * @param {string} params.webhookId\n     *\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const webhookId =\n     *\n     * client.deleteWebhook({webhookId}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-webhook)\n     *\n     */ async deleteWebhook(params) {\n        const adjustedParams = {};\n        const _params = {\n            webhookDeleteReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.webhookApi.deleteWebhook(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of webhooks associated to a user\n     *\n     * @summary Associated webhooks of user\n     *\n     *\n     * @returns {Promise<WebhookListResponse>} A promise that resolves to a `WebhookListResponse` object.\n     *\n     * @example\n     *\n     * client.fetchWebhooks().then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-webhooks)\n     *\n     */ async fetchWebhooks() {\n        const response = await this.apis.webhookApi.fetchWebhooks();\n        return response.data;\n    }\n    /**\n     * Fetch a webhook\n     *\n     * @summary Fetch a webhook\n     *\n     * @param {object} params\n     * @param {string} params.webhookId\n     *\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const webhookId =\n     *\n     * client.lookupWebhook({ webhookId }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-webhook)\n     *\n     */ async lookupWebhook(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.webhookApi.lookupWebhook(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Create a webhook\n     *\n     * @summary Create a webhook\n     *\n     * @param {object} params\n     * @param {string} params.name\n     * @param {string} params.url\n     * @param {WebhookSubscriptionFilters} params.subscription [optional]\n     *\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const name =\n     * const url =\n     * const subscription =\n     *\n     * client.publishWebhook({name, url, subscription}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-webhook)\n     *\n     */ async publishWebhook(params) {\n        const adjustedParams = {};\n        const _params = {\n            webhookPostReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.webhookApi.publishWebhook(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Update a webhook\n     *\n     * @summary Update a webhook\n     *\n     * @param {object} params\n     * @param {string} params.name\n     * @param {string} params.url\n     * @param {WebhookSubscriptionFilters} params.subscription [optional]\n     * @param {string} params.webhookId\n     *\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const name =\n     * const url =\n     * const subscription =\n     * const webhookId =\n     *\n     * client.updateWebhook({name, url, subscription, webhookId}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook)\n     *\n     */ async updateWebhook(params) {\n        const adjustedParams = {};\n        const _params = {\n            webhookPutReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.webhookApi.updateWebhook(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Update webhook active status\n     *\n     * @summary Update webhook status\n     *\n     * @param {object} params\n     * @param {string} params.webhookId\n     * @param {WebhookPatchReqBodyActiveEnum} params.active\n     *\n     * @returns {Promise<WebhookResponse>} A promise that resolves to a `WebhookResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const webhookId =\n     * const active =\n     *\n     * client.updateWebhookActiveStatus({webhookId, active}).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-webhook-active-status)\n     *\n     */ async updateWebhookActiveStatus(params) {\n        const adjustedParams = {};\n        const _params = {\n            webhookPatchReqBody: camelCaseToSnakeCaseKeys(params)\n        };\n        Object.assign(adjustedParams, _params);\n        const response = await this.apis.webhookApi.updateWebhookActiveStatus(adjustedParams);\n        return response.data;\n    }\n    /**\n       * Creates a signer and registers a signed key for the signer.\n       * It returns a Signer which includes `signer_approval_url` that can be used to create a QR Code for the user to scan and approve the signer.\n       *\n       * @param {Object} [options] - Optional parameters for the request.\n       * @param {string} [options.farcasterDeveloperMnemonic] - mnemonic of the farcaster developer account\n       * @param {number} [options.deadline] - (Optional) Unix timestamp in seconds that controls how long the signed key\n       *   request is valid for. A 24-hour duration from now is recommended.\n       *\n       * @returns {Promise<Signer>} A promise that resolves to a `Signer` object,\n       *   that includes signer_approval_url.\n       *\n       * @example\n       *\n       * // Fill in the appropriate values\n       *\n       * const farcasterDeveloperMnemonic =\n       * const deadline =\n       *\n       * client.createSignerAndRegisterSignedKey({ farcasterDeveloperMnemonic, deadline: 1693927665 }).then(response => {\n       *   console.log('Signer', response);\n       * });\n       */ async createSignerAndRegisterSignedKey(params) {\n        const { farcasterDeveloperMnemonic, deadline } = params;\n        try {\n            const { public_key: signerPublicKey, signer_uuid } = await this.createSigner();\n            const account = (0, accounts_1.mnemonicToAccount)(farcasterDeveloperMnemonic);\n            const { user: farcasterDeveloper } = await this.lookupUserByCustodyAddress({\n                custodyAddress: account.address\n            });\n            // Generates an expiration date for the signature\n            // e.g. 1693927665\n            const signed_key_deadline = deadline !== null && deadline !== void 0 ? deadline : Math.floor(Date.now() / 1000) + 86400; // signature is valid for 1 day from now\n            let signature = await account.signTypedData({\n                domain: constants_1.SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_DOMAIN,\n                types: {\n                    SignedKeyRequest: constants_1.SIGNED_KEY_REQUEST_TYPE\n                },\n                primaryType: \"SignedKeyRequest\",\n                message: {\n                    requestFid: BigInt(farcasterDeveloper.fid),\n                    key: signerPublicKey,\n                    deadline: BigInt(signed_key_deadline)\n                }\n            });\n            let signer_pending = await this.registerSignedKey({\n                signerUuid: signer_uuid,\n                appFid: farcasterDeveloper.fid,\n                deadline: signed_key_deadline,\n                signature\n            });\n            return signer_pending;\n        } catch (err) {\n            if ((0, utils_1.isApiErrorResponse)(err)) {\n                console.log(err.response.data);\n            } else console.log(err);\n        }\n    }\n}\nexports.NeynarAPIClient = NeynarAPIClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/NeynarAPIClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/NeynarHubClient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/clients/NeynarHubClient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NeynarHubClient = void 0;\nconst logger_1 = __webpack_require__(/*! ../common/logger */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/common/logger.js\");\nconst axios_1 = __importStar(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\nconst configuration_1 = __webpack_require__(/*! ../hub-api/configuration */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/configuration.js\");\nconst casts_api_1 = __webpack_require__(/*! ../hub-api/apis/casts-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/casts-api.js\");\nconst fids_api_1 = __webpack_require__(/*! ../hub-api/apis/fids-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/fids-api.js\");\nconst hub_events_api_1 = __webpack_require__(/*! ../hub-api/apis/hub-events-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/hub-events-api.js\");\nconst info_api_1 = __webpack_require__(/*! ../hub-api/apis/info-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/info-api.js\");\nconst links_api_1 = __webpack_require__(/*! ../hub-api/apis/links-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/links-api.js\");\nconst message_api_1 = __webpack_require__(/*! ../hub-api/apis/message-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/message-api.js\");\nconst on_chain_events_api_1 = __webpack_require__(/*! ../hub-api/apis/on-chain-events-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/on-chain-events-api.js\");\nconst reactions_api_1 = __webpack_require__(/*! ../hub-api/apis/reactions-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/reactions-api.js\");\nconst storage_api_1 = __webpack_require__(/*! ../hub-api/apis/storage-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/storage-api.js\");\nconst user_data_api_1 = __webpack_require__(/*! ../hub-api/apis/user-data-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/user-data-api.js\");\nconst usernames_api_1 = __webpack_require__(/*! ../hub-api/apis/usernames-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/usernames-api.js\");\nconst verifications_api_1 = __webpack_require__(/*! ../hub-api/apis/verifications-api */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/verifications-api.js\");\nconst { version: sdkVersion } = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/package.json\");\n/**\n * Converts a camelCase string to snake_case.\n * If the input string is not in camelCase format, it returns the original string.\n *\n * @param {string} str - The string to convert.\n * @returns {string} The converted string in snake_case, or the original string if not camelCase.\n */ function camelToSnakeCase(str) {\n    // Check if the string is camelCase\n    if (/^[a-z]+([A-Z][a-z]*)+$/.test(str)) {\n        return str.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n    }\n    return str; // Return the original string if it's not camelCase\n}\n/**\n * Converts the top-level keys of an object from camelCase to snake_case.\n * If a key is not in camelCase, it retains its original format.\n * Nested objects or arrays are left unchanged.\n * This is done to revert the conversion of top-level keys since we accept snake_case keys in the API but convert them to camelCase in the wrapper.\n *\n * @param {object} obj - The object whose top-level keys are to be converted.\n * @returns {object} A new object with top-level keys converted to snake_case.\n */ function camelCaseToSnakeCaseKeys(obj) {\n    if (obj && typeof obj === \"object\" && !Array.isArray(obj)) {\n        // Convert only the top-level keys\n        return Object.fromEntries(Object.entries(obj).map(([key, value])=>[\n                camelToSnakeCase(key),\n                value\n            ]));\n    }\n    return obj; // If not an object, return as is\n}\nclass NeynarHubClient {\n    constructor(config, options = {}){\n        if (typeof config === \"string\") {\n            console.error(\"Error: config must be of type Configuration\");\n            console.log(`\nSeems, like you are using sdk v2 but the syntax on client instantiation is for sdk v1.\nSDK v1 -> v2 migration guide: https://docs.neynar.com/reference/neynar-nodejs-sdk-v1-to-v2-migration-guide\n\nCorrect usage way to instantiate the client:\n\nimport { NeynarHubClient, Configuration } from \"@neynar/nodejs-sdk\";\n\nconst config = new Configuration({\n  apiKey: \"API_KEY\",\n  baseOptions: {\n    headers: {\n      \"x-neynar-experimental\": true,\n    },\n  },\n});\n\nconst client = new NeynarHubClient(config);\\n`);\n            throw new Error(\"Invalid configuration type. Expected Configuration object but received string.\");\n        }\n        const { logger = logger_1.silentLogger, axiosInstance: customAxiosInstance } = options;\n        this.logger = logger;\n        this.config = new configuration_1.Configuration({\n            apiKey: config.apiKey,\n            basePath: config.basePath,\n            baseOptions: config.baseOptions\n        });\n        const axiosInstance = customAxiosInstance || axios_1.default.create({\n            headers: {\n                \"x-sdk-version\": sdkVersion,\n                \"x-sdk\": \"node\"\n            }\n        });\n        axiosInstance.defaults.decompress = true;\n        axiosInstance.interceptors.response.use((response)=>response, (error)=>{\n            if (error.response && [\n                302\n            ].includes(error.response.status)) {\n                return {\n                    data: {\n                        location: error.response.headers.location\n                    }\n                };\n            }\n            if (NeynarHubClient.isApiErrorResponse(error)) {\n                const apiErrors = error.response.data;\n                this.logger.warn(`API errors: ${JSON.stringify(apiErrors)}`);\n            }\n            throw error;\n        });\n        this.apis = {\n            castsApi: new casts_api_1.CastsApi(this.config, undefined, axiosInstance),\n            fidsApi: new fids_api_1.FidsApi(this.config, undefined, axiosInstance),\n            hubEventsApi: new hub_events_api_1.HubEventsApi(this.config, undefined, axiosInstance),\n            infoApi: new info_api_1.InfoApi(this.config, undefined, axiosInstance),\n            linksApi: new links_api_1.LinksApi(this.config, undefined, axiosInstance),\n            messageApi: new message_api_1.MessageApi(this.config, undefined, axiosInstance),\n            onChainEventsApi: new on_chain_events_api_1.OnChainEventsApi(this.config, undefined, axiosInstance),\n            reactionsApi: new reactions_api_1.ReactionsApi(this.config, undefined, axiosInstance),\n            storageApi: new storage_api_1.StorageApi(this.config, undefined, axiosInstance),\n            userDataApi: new user_data_api_1.UserDataApi(this.config, undefined, axiosInstance),\n            usernamesApi: new usernames_api_1.UsernamesApi(this.config, undefined, axiosInstance),\n            verificationsApi: new verifications_api_1.VerificationsApi(this.config, undefined, axiosInstance)\n        };\n    }\n    static isApiErrorResponse(error) {\n        var _a;\n        if (!(error instanceof axios_1.AxiosError)) return false;\n        return ((_a = error.response) === null || _a === void 0 ? void 0 : _a.data) !== undefined && \"message\" in error.response.data;\n    }\n    /**\n     * Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.\n     *\n     * @summary By parent cast\n     *\n     * @param {object} params\n     * @param {number} params.fid [optional]  - The Farcaster ID (FID) of the parent cast's creator. This parameter must be used together with the 'hash' parameter to uniquely identify a parent cast. Required only when using hash-based lookup instead of URL-based lookup. The FID is a unique identifier assigned to each Farcaster user.\n     * @param {string} params.hash [optional]  - The unique hash identifier of the parent cast. Must be used together with the 'fid' parameter when doing hash-based lookup. This is a 40-character hexadecimal string prefixed with '0x' that uniquely identifies the cast within the creator's posts. Not required if using URL-based lookup.\n     * @param {string} params.url [optional]  - Cast URL starting with 'chain://'\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchCastsByParent200Response>} A promise that resolves to a `FetchCastsByParent200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const hash =\n     * const url =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchCastsByParent({ fid, hash, url, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-by-parent)\n     *\n     */ async fetchCastsByParent(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.castsApi.fetchCastsByParent(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch casts mentioning a user.\n     *\n     * @summary Mentioning an FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID that is mentioned in a cast\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchCastsMentioningUser({ fid, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-mentioning-user)\n     *\n     */ async fetchCastsMentioningUser(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.castsApi.fetchCastsMentioningUser(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch user\\'s casts.\n     *\n     * @summary By FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID of the casts' creator\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchUsersCasts({ fid, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-casts)\n     *\n     */ async fetchUsersCasts(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.castsApi.fetchUsersCasts(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Lookup a cast by its FID and hash.\n     *\n     * @summary By FID and Hash\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID of the cast's creator\n     * @param {string} params.hash  - The unique hash identifier of the cast. This is a 40-character hexadecimal string prefixed with '0x' that uniquely identifies a specific cast in the Farcaster network.\n     *\n     * @returns {Promise<CastAdd>} A promise that resolves to a `CastAdd` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const hash =\n     *\n     * client.lookupCastByHashAndFid({ fid, hash }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-and-fid)\n     *\n     */ async lookupCastByHashAndFid(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.castsApi.lookupCastByHashAndFid(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of all the FIDs.\n     *\n     * @summary Fetch a list of all the FIDs\n     *\n     * @param {object} params\n     * @param {number} params.shardId  - The shard ID to filter by\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FidsResponse>} A promise that resolves to a `FidsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const shardId =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchFids({ shardId, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-fids)\n     *\n     */ async fetchFids(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.fidsApi.fetchFids(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of events.\n     *\n     * @summary Page of events\n     *\n     * @param {object} params\n     * @param {number} params.fromEventId [optional]  - An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event.\n     *\n     * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fromEventId =\n     *\n     * client.fetchEvents({ fromEventId }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)\n     *\n     */ async fetchEvents(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.hubEventsApi.fetchEvents(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Lookup an event by its ID.\n     *\n     * @summary Event by ID\n     *\n     * @param {object} params\n     * @param {number} params.eventId  - The Hub Id of the event\n     *\n     * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const eventId =\n     *\n     * client.lookupEvent({ eventId }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)\n     *\n     */ async lookupEvent(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.hubEventsApi.lookupEvent(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Retrieve hub information.\n     *\n     * @summary Sync Methods\n     *\n     * @param {object} params\n     * @param {boolean} params.dbstats  - Controls whether the response includes database statistics. When true, the response includes information about the hub's database state, storage usage, and performance metrics.\n     *\n     * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const dbstats =\n     *\n     * client.lookupHubInfo({ dbstats }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)\n     *\n     */ async lookupHubInfo(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.infoApi.lookupHubInfo(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of users that are following a user.\n     *\n     * @summary To target FID\n     *\n     * @param {object} params\n     * @param {number} params.targetFid  - The FID of the target user for this link\n     * @param {LinkType} params.linkType [optional]\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const targetFid =\n     * const linkType =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchUserFollowers({ targetFid, linkType, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n     *\n     */ async fetchUserFollowers(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.linksApi.fetchUserFollowers(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a list of users that a user is following.\n     *\n     * @summary From source FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID of the link's originator\n     * @param {LinkType} params.linkType [optional]\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const linkType =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchUserFollowing({ fid, linkType, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n     *\n     */ async fetchUserFollowing(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.linksApi.fetchUserFollowing(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Lookup a link by its FID and target FID.\n     *\n     * @summary By its FID and target FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID of the link's originator\n     * @param {number} params.targetFid  - The FID of the target user for this link\n     * @param {LinkType} params.linkType\n     *\n     * @returns {Promise<LinkAdd>} A promise that resolves to a `LinkAdd` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const targetFid =\n     * const linkType =\n     *\n     * client.lookupUserRelation({ fid, targetFid, linkType }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-relation)\n     *\n     */ async lookupUserRelation(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.linksApi.lookupUserRelation(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Submit a message to the Farcaster network.\n     *\n     * @summary Submit signed message\n     *\n     * @param {object} params\n     * @param {File} params.body  - A Message is a delta operation on the Farcaster network. The message protobuf is an envelope that wraps a MessageData object and contains a hash and signature which can verify its authenticity.\n     *\n     * @returns {Promise<Message>} A promise that resolves to a `Message` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const body =\n     *\n     * client.publishMessage({ body }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/submit-signed-message)\n     *\n     */ async publishMessage(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.messageApi.publishMessage(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Validate a message on the Farcaster network.\n     *\n     * @summary Validate signed message\n     *\n     * @param {object} params\n     * @param {File} params.body  - A Message is a delta operation on the Farcaster network. The message protobuf is an envelope that wraps a MessageData object and contains a hash and signature which can verify its authenticity.\n     *\n     * @returns {Promise<ValidateMessageResponse>} A promise that resolves to a `ValidateMessageResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const body =\n     *\n     * client.validateMessage({ body }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-message)\n     *\n     */ async validateMessage(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.messageApi.validateMessage(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch on-chain events provided by a user.\n     *\n     * @summary Fetch a list of on-chain events provided by an FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID being requested\n     * @param {OnChainEventType} params.eventType  - The numeric or string value of the event type being requested\n     *\n     * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const eventType =\n     *\n     * client.fetchUserOnChainEvents({ fid, eventType }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)\n     *\n     */ async fetchUserOnChainEvents(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.onChainEventsApi.fetchUserOnChainEvents(adjustedParams);\n        return response.data;\n    }\n    /**\n     * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.\n     *\n     * @summary Fetch a list of signers provided by an FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID being requested\n     * @param {string} params.signer [optional]  - The optional key of signer\n     *\n     * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const signer =\n     *\n     * client.fetchUserOnChainSignersEvents({ fid, signer }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)\n     *\n     */ async fetchUserOnChainSignersEvents(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.onChainEventsApi.fetchUserOnChainSignersEvents(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch an on-chain ID Registry Event for a given Address.\n     *\n     * @summary Fetch an on-chain ID Registry Event for a given Address\n     *\n     * @param {object} params\n     * @param {string} params.address  - The ETH address being requested\n     *\n     * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const address =\n     *\n     * client.lookupOnChainIdRegistryEventByAddress({ address }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)\n     *\n     */ async lookupOnChainIdRegistryEventByAddress(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.onChainEventsApi.lookupOnChainIdRegistryEventByAddress(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.\n     *\n     * @summary On cast\n     *\n     * @param {object} params\n     * @param {number} params.targetFid  - The FID of the cast's creator. Required to uniquely identify the cast that received the reactions. Must be used in conjunction with target_hash.\n     * @param {string} params.targetHash  - The unique hash identifier of the cast that received the reactions. This is a 40-character hexadecimal string prefixed with '0x' that uniquely identifies the cast within the creator's posts. Must be used with target_fid.\n     * @param {ReactionType} params.reactionType\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const targetFid =\n     * const targetHash =\n     * const reactionType =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchCastReactions({ targetFid, targetHash, reactionType, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n     *\n     */ async fetchCastReactions(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.reactionsApi.fetchCastReactions(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.\n     *\n     * @summary To a target URL\n     *\n     * @param {object} params\n     * @param {string} params.url  - Target URL starting with 'chain://'.\n     * @param {ReactionType} params.reactionType [optional]\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const url =\n     * const reactionType =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchReactionsByTarget({ url, reactionType, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)\n     *\n     */ async fetchReactionsByTarget(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.reactionsApi.fetchReactionsByTarget(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch reactions by a user.\n     *\n     * @summary By FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID of the reaction's creator\n     * @param {ReactionType} params.reactionType\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const reactionType =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchUserReactions({ fid, reactionType, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n     *\n     */ async fetchUserReactions(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.reactionsApi.fetchUserReactions(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Lookup a reaction by its FID or cast.\n     *\n     * @summary By FID or cast\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID of the reaction's creator\n     * @param {number} params.targetFid  - The FID of the cast's creator\n     * @param {string} params.targetHash  - The cast's hash\n     * @param {ReactionType} params.reactionType\n     *\n     * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const targetFid =\n     * const targetHash =\n     * const reactionType =\n     *\n     * client.lookupReactionById({ fid, targetFid, targetHash, reactionType }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)\n     *\n     */ async lookupReactionById(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.reactionsApi.lookupReactionById(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a user\\'s storage limits.\n     *\n     * @summary FID\\'s limits\n     *\n     * @param {object} params\n     * @param {number} params.fid\n     *\n     * @returns {Promise<StorageLimitsResponse>} A promise that resolves to a `StorageLimitsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     *\n     * client.lookupUserStorageLimit({ fid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-limit)\n     *\n     */ async lookupUserStorageLimit(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.storageApi.lookupUserStorageLimit(adjustedParams);\n        return response.data;\n    }\n    /**\n     * **Note:** one of two different response schemas is returned based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead.\n     *\n     * @summary Fetch UserData for a FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID that's being requested\n     * @param {UserDataType} params.userDataType [optional]  - The type of user data, either as a numerical value or type string. If this is omitted, all user data for the FID is returned\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchUserData200Response>} A promise that resolves to a `FetchUserData200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const userDataType =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchUserData({ fid, userDataType, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-data)\n     *\n     */ async fetchUserData(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.userDataApi.fetchUserData(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch a proof for a username.\n     *\n     * @summary Proof for a username\n     *\n     * @param {object} params\n     * @param {string} params.name  - The Farcaster username or ENS address\n     *\n     * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const name =\n     *\n     * client.fetchUsernameProofByName({ name }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)\n     *\n     */ async fetchUsernameProofByName(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.usernamesApi.fetchUsernameProofByName(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch proofs provided by a user.\n     *\n     * @summary Proofs provided by an FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID being requested\n     *\n     * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     *\n     * client.fetchUsernameProofsByFid({ fid }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)\n     *\n     */ async fetchUsernameProofsByFid(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.usernamesApi.fetchUsernameProofsByFid(adjustedParams);\n        return response.data;\n    }\n    /**\n     * Fetch verifications provided by a user.\n     *\n     * @summary Provided by an FID\n     *\n     * @param {object} params\n     * @param {number} params.fid  - The FID being requested\n     * @param {string} params.address [optional]  - The optional ETH address to filter by\n     * @param {number} params.pageSize [optional]  - Maximum number of messages to return in a single response\n     * @param {boolean} params.reverse [optional]  - Reverse the sort order, returning latest messages first\n     * @param {string} params.pageToken [optional]  - The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n     *\n     * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object.\n     *\n     * @example\n     *\n     * // Fill in the appropriate values\n     * const fid =\n     * const address =\n     * const pageSize =\n     * const reverse =\n     * const pageToken =\n     *\n     * client.fetchVerificationsByFid({ fid, address, pageSize, reverse, pageToken }).then(response => {\n     *   console.log('response:', response);\n     * });\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)\n     *\n     */ async fetchVerificationsByFid(params) {\n        const adjustedParams = {};\n        Object.assign(adjustedParams, params);\n        const response = await this.apis.verificationsApi.fetchVerificationsByFid(adjustedParams);\n        return response.data;\n    }\n}\nexports.NeynarHubClient = NeynarHubClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/NeynarHubClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/configuration.js":
/*!************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/clients/configuration.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Configuration = void 0;\nclass Configuration {\n    constructor(params){\n        this.apiKey = params.apiKey;\n        this.basePath = params.basePath;\n        this.baseOptions = params.baseOptions;\n    }\n}\nexports.Configuration = Configuration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2NsaWVudHMvY29uZmlndXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRTtJQUNGQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdELE9BQU9DLE1BQU07UUFDM0IsSUFBSSxDQUFDQyxRQUFRLEdBQUdGLE9BQU9FLFFBQVE7UUFDL0IsSUFBSSxDQUFDQyxXQUFXLEdBQUdILE9BQU9HLFdBQVc7SUFDekM7QUFDSjtBQUNBUCxxQkFBcUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYXJjYXN0ZXJzdGF0cy8uL25vZGVfbW9kdWxlcy9AbmV5bmFyL25vZGVqcy1zZGsvYnVpbGQvY2xpZW50cy9jb25maWd1cmF0aW9uLmpzPzc5NmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbmZpZ3VyYXRpb24gPSB2b2lkIDA7XG5jbGFzcyBDb25maWd1cmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBwYXJhbXMuYXBpS2V5O1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gcGFyYW1zLmJhc2VQYXRoO1xuICAgICAgICB0aGlzLmJhc2VPcHRpb25zID0gcGFyYW1zLmJhc2VPcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IENvbmZpZ3VyYXRpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDb25maWd1cmF0aW9uIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJhcGlLZXkiLCJiYXNlUGF0aCIsImJhc2VPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/clients/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NeynarHubClient = exports.NeynarAPIClient = void 0;\nvar NeynarAPIClient_1 = __webpack_require__(/*! ./NeynarAPIClient */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/NeynarAPIClient.js\");\nObject.defineProperty(exports, \"NeynarAPIClient\", ({\n    enumerable: true,\n    get: function() {\n        return NeynarAPIClient_1.NeynarAPIClient;\n    }\n}));\nvar NeynarHubClient_1 = __webpack_require__(/*! ./NeynarHubClient */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/NeynarHubClient.js\");\nObject.defineProperty(exports, \"NeynarHubClient\", ({\n    enumerable: true,\n    get: function() {\n        return NeynarHubClient_1.NeynarHubClient;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2NsaWVudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSx1QkFBdUIsR0FBRyxLQUFLO0FBQ3pELElBQUlJLG9CQUFvQkMsbUJBQU9BLENBQUMsbUdBQW1CO0FBQ25EUCxtREFBa0Q7SUFBRVEsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsa0JBQWtCRCxlQUFlO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkksSUFBSUssb0JBQW9CSCxtQkFBT0EsQ0FBQyxtR0FBbUI7QUFDbkRQLG1EQUFrRDtJQUFFUSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxrQkFBa0JOLGVBQWU7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZhcmNhc3RlcnN0YXRzLy4vbm9kZV9tb2R1bGVzL0BuZXluYXIvbm9kZWpzLXNkay9idWlsZC9jbGllbnRzL2luZGV4LmpzPzMxOTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5leW5hckh1YkNsaWVudCA9IGV4cG9ydHMuTmV5bmFyQVBJQ2xpZW50ID0gdm9pZCAwO1xudmFyIE5leW5hckFQSUNsaWVudF8xID0gcmVxdWlyZShcIi4vTmV5bmFyQVBJQ2xpZW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTmV5bmFyQVBJQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOZXluYXJBUElDbGllbnRfMS5OZXluYXJBUElDbGllbnQ7IH0gfSk7XG52YXIgTmV5bmFySHViQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9OZXluYXJIdWJDbGllbnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOZXluYXJIdWJDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5leW5hckh1YkNsaWVudF8xLk5leW5hckh1YkNsaWVudDsgfSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk5leW5hckh1YkNsaWVudCIsIk5leW5hckFQSUNsaWVudCIsIk5leW5hckFQSUNsaWVudF8xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJOZXluYXJIdWJDbGllbnRfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/common/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/common/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SIGNED_KEY_REQUEST_TYPE = exports.SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_DOMAIN = void 0;\n// DO NOT CHANGE ANY VALUES IN THIS CONSTANT\nexports.SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_DOMAIN = {\n    name: \"Farcaster SignedKeyRequestValidator\",\n    version: \"1\",\n    chainId: 10,\n    verifyingContract: \"0x00000000fc700472606ed4fa22623acf62c60553\"\n};\n// DO NOT CHANGE ANY VALUES IN THIS CONSTANT\nexports.SIGNED_KEY_REQUEST_TYPE = [\n    {\n        name: \"requestFid\",\n        type: \"uint256\"\n    },\n    {\n        name: \"key\",\n        type: \"bytes\"\n    },\n    {\n        name: \"deadline\",\n        type: \"uint256\"\n    }\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2NvbW1vbi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELCtCQUErQixHQUFHQSxtREFBbUQsR0FBRyxLQUFLO0FBQzdGLDRDQUE0QztBQUM1Q0EsbURBQW1ELEdBQUc7SUFDbERJLE1BQU07SUFDTkMsU0FBUztJQUNUQyxTQUFTO0lBQ1RDLG1CQUFtQjtBQUN2QjtBQUNBLDRDQUE0QztBQUM1Q1AsK0JBQStCLEdBQUc7SUFDOUI7UUFBRUksTUFBTTtRQUFjSSxNQUFNO0lBQVU7SUFDdEM7UUFBRUosTUFBTTtRQUFPSSxNQUFNO0lBQVE7SUFDN0I7UUFBRUosTUFBTTtRQUFZSSxNQUFNO0lBQVU7Q0FDdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYXJjYXN0ZXJzdGF0cy8uL25vZGVfbW9kdWxlcy9AbmV5bmFyL25vZGVqcy1zZGsvYnVpbGQvY29tbW9uL2NvbnN0YW50cy5qcz81ZDBhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TSUdORURfS0VZX1JFUVVFU1RfVFlQRSA9IGV4cG9ydHMuU0lHTkVEX0tFWV9SRVFVRVNUX1ZBTElEQVRPUl9FSVBfNzEyX0RPTUFJTiA9IHZvaWQgMDtcbi8vIERPIE5PVCBDSEFOR0UgQU5ZIFZBTFVFUyBJTiBUSElTIENPTlNUQU5UXG5leHBvcnRzLlNJR05FRF9LRVlfUkVRVUVTVF9WQUxJREFUT1JfRUlQXzcxMl9ET01BSU4gPSB7XG4gICAgbmFtZTogXCJGYXJjYXN0ZXIgU2lnbmVkS2V5UmVxdWVzdFZhbGlkYXRvclwiLFxuICAgIHZlcnNpb246IFwiMVwiLFxuICAgIGNoYWluSWQ6IDEwLFxuICAgIHZlcmlmeWluZ0NvbnRyYWN0OiBcIjB4MDAwMDAwMDBmYzcwMDQ3MjYwNmVkNGZhMjI2MjNhY2Y2MmM2MDU1M1wiLFxufTtcbi8vIERPIE5PVCBDSEFOR0UgQU5ZIFZBTFVFUyBJTiBUSElTIENPTlNUQU5UXG5leHBvcnRzLlNJR05FRF9LRVlfUkVRVUVTVF9UWVBFID0gW1xuICAgIHsgbmFtZTogXCJyZXF1ZXN0RmlkXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgeyBuYW1lOiBcImtleVwiLCB0eXBlOiBcImJ5dGVzXCIgfSxcbiAgICB7IG5hbWU6IFwiZGVhZGxpbmVcIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbl07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTSUdORURfS0VZX1JFUVVFU1RfVFlQRSIsIlNJR05FRF9LRVlfUkVRVUVTVF9WQUxJREFUT1JfRUlQXzcxMl9ET01BSU4iLCJuYW1lIiwidmVyc2lvbiIsImNoYWluSWQiLCJ2ZXJpZnlpbmdDb250cmFjdCIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/common/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/common/logger.js":
/*!****************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/common/logger.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* eslint-disable @typescript-eslint/no-unused-vars */ /* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint-disable @typescript-eslint/no-empty-function */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.silentLogger = void 0;\nexports.silentLogger = {\n    trace: (_message, ..._optionalParams)=>{},\n    debug: (_message, ..._optionalParams)=>{},\n    info: (_message, ..._optionalParams)=>{},\n    warn: (_message, ..._optionalParams)=>{},\n    error: (_message, ..._optionalParams)=>{}\n}; /* eslint-enable @typescript-eslint/no-unused-vars */  /* eslint-enable @typescript-eslint/no-explicit-any */  /* eslint-enable @typescript-eslint/no-empty-function */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2NvbW1vbi9sb2dnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixvREFBb0QsR0FDcEQscURBQXFELEdBQ3JELHVEQUF1RCxHQUN2REEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUJBLG9CQUFvQixHQUFHO0lBQ25CRyxPQUFPLENBQUNDLFVBQVUsR0FBR0MsbUJBQXNCO0lBQzNDQyxPQUFPLENBQUNGLFVBQVUsR0FBR0MsbUJBQXNCO0lBQzNDRSxNQUFNLENBQUNILFVBQVUsR0FBR0MsbUJBQXNCO0lBQzFDRyxNQUFNLENBQUNKLFVBQVUsR0FBR0MsbUJBQXNCO0lBQzFDSSxPQUFPLENBQUNMLFVBQVUsR0FBR0MsbUJBQXNCO0FBQy9DLEdBQ0EsbURBQW1ELElBQ25ELG9EQUFvRCxJQUNwRCxzREFBc0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYXJjYXN0ZXJzdGF0cy8uL25vZGVfbW9kdWxlcy9AbmV5bmFyL25vZGVqcy1zZGsvYnVpbGQvY29tbW9uL2xvZ2dlci5qcz81NTg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2lsZW50TG9nZ2VyID0gdm9pZCAwO1xuZXhwb3J0cy5zaWxlbnRMb2dnZXIgPSB7XG4gICAgdHJhY2U6IChfbWVzc2FnZSwgLi4uX29wdGlvbmFsUGFyYW1zKSA9PiB7IH0sXG4gICAgZGVidWc6IChfbWVzc2FnZSwgLi4uX29wdGlvbmFsUGFyYW1zKSA9PiB7IH0sXG4gICAgaW5mbzogKF9tZXNzYWdlLCAuLi5fb3B0aW9uYWxQYXJhbXMpID0+IHsgfSxcbiAgICB3YXJuOiAoX21lc3NhZ2UsIC4uLl9vcHRpb25hbFBhcmFtcykgPT4geyB9LFxuICAgIGVycm9yOiAoX21lc3NhZ2UsIC4uLl9vcHRpb25hbFBhcmFtcykgPT4geyB9LFxufTtcbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uICovXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzaWxlbnRMb2dnZXIiLCJ0cmFjZSIsIl9tZXNzYWdlIiwiX29wdGlvbmFsUGFyYW1zIiwiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/common/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/casts-api.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/casts-api.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CastsApi = exports.CastsApiFactory = exports.CastsApiFp = exports.CastsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * CastsApi - axios parameter creator\n * @export\n */ const CastsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.\n         * @summary By parent cast\n         * @param {number} [fid] The Farcaster ID (FID) of the parent cast\\&#39;s creator. This parameter must be used together with the \\&#39;hash\\&#39; parameter to uniquely identify a parent cast. Required only when using hash-based lookup instead of URL-based lookup. The FID is a unique identifier assigned to each Farcaster user.\n         * @param {string} [hash] The unique hash identifier of the parent cast. Must be used together with the \\&#39;fid\\&#39; parameter when doing hash-based lookup. This is a 40-character hexadecimal string prefixed with \\&#39;0x\\&#39; that uniquely identifies the cast within the creator\\&#39;s posts. Not required if using URL-based lookup.\n         * @param {string} [url] Cast URL starting with \\&#39;chain://\\&#39;\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastsByParent200Response>} A promise that resolves to a `FetchCastsByParent200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-by-parent)\n         *\n         */ fetchCastsByParent: async (fid, hash, url, pageSize, reverse, pageToken, options = {})=>{\n            const localVarPath = `/v1/castsByParent`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (hash !== undefined) {\n                localVarQueryParameter[\"hash\"] = hash;\n            }\n            if (url !== undefined) {\n                localVarQueryParameter[\"url\"] = url;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch casts mentioning a user.\n         * @summary Mentioning an FID\n         * @param {number} fid The FID that is mentioned in a cast\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-mentioning-user)\n         *\n         */ fetchCastsMentioningUser: async (fid, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchCastsMentioningUser\", \"fid\", fid);\n            const localVarPath = `/v1/castsByMention`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch user\\'s casts.\n         * @summary By FID\n         * @param {number} fid The FID of the casts\\&#39; creator\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-casts)\n         *\n         */ fetchUsersCasts: async (fid, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUsersCasts\", \"fid\", fid);\n            const localVarPath = `/v1/castsByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Lookup a cast by its FID and hash.\n         * @summary By FID and Hash\n         * @param {number} fid The FID of the cast\\&#39;s creator\n         * @param {string} hash The unique hash identifier of the cast. This is a 40-character hexadecimal string prefixed with \\&#39;0x\\&#39; that uniquely identifies a specific cast in the Farcaster network.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastAdd>} A promise that resolves to a `CastAdd` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-and-fid)\n         *\n         */ lookupCastByHashAndFid: async (fid, hash, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupCastByHashAndFid\", \"fid\", fid);\n            // verify required parameter 'hash' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupCastByHashAndFid\", \"hash\", hash);\n            const localVarPath = `/v1/castById`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (hash !== undefined) {\n                localVarQueryParameter[\"hash\"] = hash;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.CastsApiAxiosParamCreator = CastsApiAxiosParamCreator;\n/**\n * CastsApi - functional programming interface\n * @export\n */ const CastsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.CastsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.\n         * @summary By parent cast\n         * @param {number} [fid] The Farcaster ID (FID) of the parent cast\\&#39;s creator. This parameter must be used together with the \\&#39;hash\\&#39; parameter to uniquely identify a parent cast. Required only when using hash-based lookup instead of URL-based lookup. The FID is a unique identifier assigned to each Farcaster user.\n         * @param {string} [hash] The unique hash identifier of the parent cast. Must be used together with the \\&#39;fid\\&#39; parameter when doing hash-based lookup. This is a 40-character hexadecimal string prefixed with \\&#39;0x\\&#39; that uniquely identifies the cast within the creator\\&#39;s posts. Not required if using URL-based lookup.\n         * @param {string} [url] Cast URL starting with \\&#39;chain://\\&#39;\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastsByParent200Response>} A promise that resolves to a `FetchCastsByParent200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-by-parent)\n         *\n         */ async fetchCastsByParent (fid, hash, url, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastsByParent(fid, hash, url, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastsApi.fetchCastsByParent\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch casts mentioning a user.\n         * @summary Mentioning an FID\n         * @param {number} fid The FID that is mentioned in a cast\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-mentioning-user)\n         *\n         */ async fetchCastsMentioningUser (fid, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastsMentioningUser(fid, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastsApi.fetchCastsMentioningUser\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch user\\'s casts.\n         * @summary By FID\n         * @param {number} fid The FID of the casts\\&#39; creator\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-casts)\n         *\n         */ async fetchUsersCasts (fid, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsersCasts(fid, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastsApi.fetchUsersCasts\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Lookup a cast by its FID and hash.\n         * @summary By FID and Hash\n         * @param {number} fid The FID of the cast\\&#39;s creator\n         * @param {string} hash The unique hash identifier of the cast. This is a 40-character hexadecimal string prefixed with \\&#39;0x\\&#39; that uniquely identifies a specific cast in the Farcaster network.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastAdd>} A promise that resolves to a `CastAdd` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-and-fid)\n         *\n         */ async lookupCastByHashAndFid (fid, hash, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupCastByHashAndFid(fid, hash, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"CastsApi.lookupCastByHashAndFid\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.CastsApiFp = CastsApiFp;\n/**\n * CastsApi - factory interface\n * @export\n */ const CastsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.CastsApiFp)(configuration);\n    return {\n        /**\n         * Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.\n         * @summary By parent cast\n         * @param {CastsApiFetchCastsByParentRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastsByParent200Response>} A promise that resolves to a `FetchCastsByParent200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-by-parent)\n         *\n         */ fetchCastsByParent (requestParameters = {}, options) {\n            return localVarFp.fetchCastsByParent(requestParameters.fid, requestParameters.hash, requestParameters.url, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch casts mentioning a user.\n         * @summary Mentioning an FID\n         * @param {CastsApiFetchCastsMentioningUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-mentioning-user)\n         *\n         */ fetchCastsMentioningUser (requestParameters, options) {\n            return localVarFp.fetchCastsMentioningUser(requestParameters.fid, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch user\\'s casts.\n         * @summary By FID\n         * @param {CastsApiFetchUsersCastsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-casts)\n         *\n         */ fetchUsersCasts (requestParameters, options) {\n            return localVarFp.fetchUsersCasts(requestParameters.fid, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Lookup a cast by its FID and hash.\n         * @summary By FID and Hash\n         * @param {CastsApiLookupCastByHashAndFidRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<CastAdd>} A promise that resolves to a `CastAdd` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-and-fid)\n         *\n         */ lookupCastByHashAndFid (requestParameters, options) {\n            return localVarFp.lookupCastByHashAndFid(requestParameters.fid, requestParameters.hash, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.CastsApiFactory = CastsApiFactory;\n/**\n * CastsApi - object-oriented interface\n * @export\n * @class CastsApi\n * @extends {BaseAPI}\n */ class CastsApi extends base_1.BaseAPI {\n    /**\n     * Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.\n     * @summary By parent cast\n     * @param {CastsApiFetchCastsByParentRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastsApi\n     * @returns {Promise<FetchCastsByParent200Response>} A promise that resolves to a `FetchCastsByParent200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-by-parent)\n     *\n     */ fetchCastsByParent(requestParameters = {}, options) {\n        return (0, exports.CastsApiFp)(this.configuration).fetchCastsByParent(requestParameters.fid, requestParameters.hash, requestParameters.url, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch casts mentioning a user.\n     * @summary Mentioning an FID\n     * @param {CastsApiFetchCastsMentioningUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastsApi\n     * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-mentioning-user)\n     *\n     */ fetchCastsMentioningUser(requestParameters, options) {\n        return (0, exports.CastsApiFp)(this.configuration).fetchCastsMentioningUser(requestParameters.fid, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch user\\'s casts.\n     * @summary By FID\n     * @param {CastsApiFetchUsersCastsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastsApi\n     * @returns {Promise<FetchUsersCasts200Response>} A promise that resolves to a `FetchUsersCasts200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-casts)\n     *\n     */ fetchUsersCasts(requestParameters, options) {\n        return (0, exports.CastsApiFp)(this.configuration).fetchUsersCasts(requestParameters.fid, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Lookup a cast by its FID and hash.\n     * @summary By FID and Hash\n     * @param {CastsApiLookupCastByHashAndFidRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CastsApi\n     * @returns {Promise<CastAdd>} A promise that resolves to a `CastAdd` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-and-fid)\n     *\n     */ lookupCastByHashAndFid(requestParameters, options) {\n        return (0, exports.CastsApiFp)(this.configuration).lookupCastByHashAndFid(requestParameters.fid, requestParameters.hash, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.CastsApi = CastsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/casts-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/fids-api.js":
/*!************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/fids-api.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FidsApi = exports.FidsApiFactory = exports.FidsApiFp = exports.FidsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * FidsApi - axios parameter creator\n * @export\n */ const FidsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch a list of all the FIDs.\n         * @summary Fetch a list of all the FIDs\n         * @param {number} shardId The shard ID to filter by\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FidsResponse>} A promise that resolves to a `FidsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-fids)\n         *\n         */ fetchFids: async (shardId, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'shardId' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchFids\", \"shardId\", shardId);\n            const localVarPath = `/v1/fids`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (shardId !== undefined) {\n                localVarQueryParameter[\"shard_id\"] = shardId;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.FidsApiAxiosParamCreator = FidsApiAxiosParamCreator;\n/**\n * FidsApi - functional programming interface\n * @export\n */ const FidsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.FidsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch a list of all the FIDs.\n         * @summary Fetch a list of all the FIDs\n         * @param {number} shardId The shard ID to filter by\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FidsResponse>} A promise that resolves to a `FidsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-fids)\n         *\n         */ async fetchFids (shardId, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFids(shardId, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"FidsApi.fetchFids\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.FidsApiFp = FidsApiFp;\n/**\n * FidsApi - factory interface\n * @export\n */ const FidsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.FidsApiFp)(configuration);\n    return {\n        /**\n         * Fetch a list of all the FIDs.\n         * @summary Fetch a list of all the FIDs\n         * @param {FidsApiFetchFidsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FidsResponse>} A promise that resolves to a `FidsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-fids)\n         *\n         */ fetchFids (requestParameters, options) {\n            return localVarFp.fetchFids(requestParameters.shardId, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.FidsApiFactory = FidsApiFactory;\n/**\n * FidsApi - object-oriented interface\n * @export\n * @class FidsApi\n * @extends {BaseAPI}\n */ class FidsApi extends base_1.BaseAPI {\n    /**\n     * Fetch a list of all the FIDs.\n     * @summary Fetch a list of all the FIDs\n     * @param {FidsApiFetchFidsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FidsApi\n     * @returns {Promise<FidsResponse>} A promise that resolves to a `FidsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-fids)\n     *\n     */ fetchFids(requestParameters, options) {\n        return (0, exports.FidsApiFp)(this.configuration).fetchFids(requestParameters.shardId, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.FidsApi = FidsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/fids-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/hub-events-api.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/hub-events-api.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HubEventsApi = exports.HubEventsApiFactory = exports.HubEventsApiFp = exports.HubEventsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * HubEventsApi - axios parameter creator\n * @export\n */ const HubEventsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch a list of events.\n         * @summary Page of events\n         * @param {number} [fromEventId] An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)\n         *\n         */ fetchEvents: async (fromEventId, options = {})=>{\n            const localVarPath = `/v1/events`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fromEventId !== undefined) {\n                localVarQueryParameter[\"from_event_id\"] = fromEventId;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Lookup an event by its ID.\n         * @summary Event by ID\n         * @param {number} eventId The Hub Id of the event\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)\n         *\n         */ lookupEvent: async (eventId, options = {})=>{\n            // verify required parameter 'eventId' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupEvent\", \"eventId\", eventId);\n            const localVarPath = `/v1/eventById`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (eventId !== undefined) {\n                localVarQueryParameter[\"event_id\"] = eventId;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.HubEventsApiAxiosParamCreator = HubEventsApiAxiosParamCreator;\n/**\n * HubEventsApi - functional programming interface\n * @export\n */ const HubEventsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.HubEventsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch a list of events.\n         * @summary Page of events\n         * @param {number} [fromEventId] An optional Hub Id to start getting events from. This is also returned from the API as nextPageEventId, which can be used to page through all the Hub events. Set it to 0 to start from the first event.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)\n         *\n         */ async fetchEvents (fromEventId, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchEvents(fromEventId, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"HubEventsApi.fetchEvents\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Lookup an event by its ID.\n         * @summary Event by ID\n         * @param {number} eventId The Hub Id of the event\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)\n         *\n         */ async lookupEvent (eventId, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupEvent(eventId, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"HubEventsApi.lookupEvent\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.HubEventsApiFp = HubEventsApiFp;\n/**\n * HubEventsApi - factory interface\n * @export\n */ const HubEventsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.HubEventsApiFp)(configuration);\n    return {\n        /**\n         * Fetch a list of events.\n         * @summary Page of events\n         * @param {HubEventsApiFetchEventsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)\n         *\n         */ fetchEvents (requestParameters = {}, options) {\n            return localVarFp.fetchEvents(requestParameters.fromEventId, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Lookup an event by its ID.\n         * @summary Event by ID\n         * @param {HubEventsApiLookupEventRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)\n         *\n         */ lookupEvent (requestParameters, options) {\n            return localVarFp.lookupEvent(requestParameters.eventId, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.HubEventsApiFactory = HubEventsApiFactory;\n/**\n * HubEventsApi - object-oriented interface\n * @export\n * @class HubEventsApi\n * @extends {BaseAPI}\n */ class HubEventsApi extends base_1.BaseAPI {\n    /**\n     * Fetch a list of events.\n     * @summary Page of events\n     * @param {HubEventsApiFetchEventsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HubEventsApi\n     * @returns {Promise<FetchEvents200Response>} A promise that resolves to a `FetchEvents200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-events)\n     *\n     */ fetchEvents(requestParameters = {}, options) {\n        return (0, exports.HubEventsApiFp)(this.configuration).fetchEvents(requestParameters.fromEventId, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Lookup an event by its ID.\n     * @summary Event by ID\n     * @param {HubEventsApiLookupEventRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HubEventsApi\n     * @returns {Promise<HubEvent>} A promise that resolves to a `HubEvent` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-event)\n     *\n     */ lookupEvent(requestParameters, options) {\n        return (0, exports.HubEventsApiFp)(this.configuration).lookupEvent(requestParameters.eventId, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.HubEventsApi = HubEventsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2h1Yi1hcGkvYXBpcy9odWItZXZlbnRzLWFwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtCQUFrQixHQUNsQixrQkFBa0IsR0FDbEI7Ozs7Ozs7Ozs7Q0FVQyxHQUNELElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLDJCQUEyQixHQUFHQSxzQkFBc0IsR0FBR0EscUNBQXFDLEdBQUcsS0FBSztBQUMzSCxNQUFNTSxVQUFVWCxnQkFBZ0JZLG1CQUFPQSxDQUFDLDZEQUFPO0FBQy9DLHlEQUF5RDtBQUN6RCxhQUFhO0FBQ2IsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsa0ZBQVc7QUFDcEMsYUFBYTtBQUNiLE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDLDhFQUFTO0FBQ2hDOzs7Q0FHQyxHQUNELE1BQU1GLGdDQUFnQyxTQUFVSyxhQUFhO0lBQ3pELE9BQU87UUFDSDs7Ozs7Ozs7OztTQVVDLEdBQ0RDLGFBQWEsT0FBT0MsYUFBYUMsVUFBVSxDQUFDLENBQUM7WUFDekMsTUFBTUMsZUFBZSxDQUFDLFVBQVUsQ0FBQztZQUNqQyxvRkFBb0Y7WUFDcEYsTUFBTUMsaUJBQWlCLElBQUlDLElBQUlGLGNBQWNOLFNBQVNTLGNBQWM7WUFDcEUsSUFBSUM7WUFDSixJQUFJUixlQUFlO2dCQUNmUSxjQUFjUixjQUFjUSxXQUFXO1lBQzNDO1lBQ0EsTUFBTUMseUJBQXlCckIsT0FBT3NCLE1BQU0sQ0FBQ3RCLE9BQU9zQixNQUFNLENBQUM7Z0JBQUVDLFFBQVE7WUFBTSxHQUFHSCxjQUFjTDtZQUM1RixNQUFNUywwQkFBMEIsQ0FBQztZQUNqQyxNQUFNQyx5QkFBeUIsQ0FBQztZQUNoQyxxQ0FBcUM7WUFDckMsTUFBTSxDQUFDLEdBQUdmLFNBQVNnQixpQkFBaUIsRUFBRUYseUJBQXlCLGFBQWFaO1lBQzVFLElBQUlFLGdCQUFnQmEsV0FBVztnQkFDM0JGLHNCQUFzQixDQUFDLGdCQUFnQixHQUFHWDtZQUM5QztZQUNDLElBQUdKLFNBQVNrQixlQUFlLEVBQUVYLGdCQUFnQlE7WUFDOUMsSUFBSUkseUJBQXlCVCxlQUFlQSxZQUFZVSxPQUFPLEdBQUdWLFlBQVlVLE9BQU8sR0FBRyxDQUFDO1lBQ3pGVCx1QkFBdUJTLE9BQU8sR0FBRzlCLE9BQU9zQixNQUFNLENBQUN0QixPQUFPc0IsTUFBTSxDQUFDdEIsT0FBT3NCLE1BQU0sQ0FBQyxDQUFDLEdBQUdFLDBCQUEwQksseUJBQXlCZCxRQUFRZSxPQUFPO1lBQ2pKLE9BQU87Z0JBQ0hDLEtBQUssQ0FBQyxHQUFHckIsU0FBU3NCLFlBQVksRUFBRWY7Z0JBQ2hDRixTQUFTTTtZQUNiO1FBQ0o7UUFDQTs7Ozs7Ozs7OztTQVVDLEdBQ0RZLGFBQWEsT0FBT0MsU0FBU25CLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLCtEQUErRDtZQUM5RCxJQUFHTCxTQUFTeUIsaUJBQWlCLEVBQUUsZUFBZSxXQUFXRDtZQUMxRCxNQUFNbEIsZUFBZSxDQUFDLGFBQWEsQ0FBQztZQUNwQyxvRkFBb0Y7WUFDcEYsTUFBTUMsaUJBQWlCLElBQUlDLElBQUlGLGNBQWNOLFNBQVNTLGNBQWM7WUFDcEUsSUFBSUM7WUFDSixJQUFJUixlQUFlO2dCQUNmUSxjQUFjUixjQUFjUSxXQUFXO1lBQzNDO1lBQ0EsTUFBTUMseUJBQXlCckIsT0FBT3NCLE1BQU0sQ0FBQ3RCLE9BQU9zQixNQUFNLENBQUM7Z0JBQUVDLFFBQVE7WUFBTSxHQUFHSCxjQUFjTDtZQUM1RixNQUFNUywwQkFBMEIsQ0FBQztZQUNqQyxNQUFNQyx5QkFBeUIsQ0FBQztZQUNoQyxxQ0FBcUM7WUFDckMsTUFBTSxDQUFDLEdBQUdmLFNBQVNnQixpQkFBaUIsRUFBRUYseUJBQXlCLGFBQWFaO1lBQzVFLElBQUlzQixZQUFZUCxXQUFXO2dCQUN2QkYsc0JBQXNCLENBQUMsV0FBVyxHQUFHUztZQUN6QztZQUNDLElBQUd4QixTQUFTa0IsZUFBZSxFQUFFWCxnQkFBZ0JRO1lBQzlDLElBQUlJLHlCQUF5QlQsZUFBZUEsWUFBWVUsT0FBTyxHQUFHVixZQUFZVSxPQUFPLEdBQUcsQ0FBQztZQUN6RlQsdUJBQXVCUyxPQUFPLEdBQUc5QixPQUFPc0IsTUFBTSxDQUFDdEIsT0FBT3NCLE1BQU0sQ0FBQ3RCLE9BQU9zQixNQUFNLENBQUMsQ0FBQyxHQUFHRSwwQkFBMEJLLHlCQUF5QmQsUUFBUWUsT0FBTztZQUNqSixPQUFPO2dCQUNIQyxLQUFLLENBQUMsR0FBR3JCLFNBQVNzQixZQUFZLEVBQUVmO2dCQUNoQ0YsU0FBU007WUFDYjtRQUNKO0lBQ0o7QUFDSjtBQUNBbkIscUNBQXFDLEdBQUdLO0FBQ3hDOzs7Q0FHQyxHQUNELE1BQU1ELGlCQUFpQixTQUFVTSxhQUFhO0lBQzFDLE1BQU13Qiw0QkFBNEIsQ0FBQyxHQUFHbEMsUUFBUUssNkJBQTZCLEVBQUVLO0lBQzdFLE9BQU87UUFDSDs7Ozs7Ozs7OztTQVVDLEdBQ0QsTUFBTUMsYUFBWUMsV0FBVyxFQUFFQyxPQUFPO1lBQ2xDLElBQUlzQixJQUFJQyxJQUFJQztZQUNaLE1BQU1DLG9CQUFvQixNQUFNSiwwQkFBMEJ2QixXQUFXLENBQUNDLGFBQWFDO1lBQ25GLE1BQU0wQiwrQkFBK0IsQ0FBQ0osS0FBS3pCLGtCQUFrQixRQUFRQSxrQkFBa0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsY0FBYzhCLFdBQVcsTUFBTSxRQUFRTCxPQUFPLEtBQUssSUFBSUEsS0FBSztZQUNySyxNQUFNTSxrQ0FBa0MsQ0FBQ0osS0FBSyxDQUFDRCxLQUFLM0IsT0FBT2lDLGtCQUFrQixDQUFDLDJCQUEyQixNQUFNLFFBQVFOLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsRUFBRSxDQUFDRyw2QkFBNkIsTUFBTSxRQUFRRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdSLEdBQUc7WUFDN04sT0FBTyxDQUFDYyxPQUFPQyxXQUFhLENBQUMsR0FBR3BDLFNBQVNxQyxxQkFBcUIsRUFBRVAsbUJBQW1CaEMsUUFBUXdDLE9BQU8sRUFBRXJDLE9BQU9zQyxTQUFTLEVBQUVyQyxlQUFlaUMsT0FBT0YsbUNBQW1DRztRQUNuTDtRQUNBOzs7Ozs7Ozs7O1NBVUMsR0FDRCxNQUFNYixhQUFZQyxPQUFPLEVBQUVuQixPQUFPO1lBQzlCLElBQUlzQixJQUFJQyxJQUFJQztZQUNaLE1BQU1DLG9CQUFvQixNQUFNSiwwQkFBMEJILFdBQVcsQ0FBQ0MsU0FBU25CO1lBQy9FLE1BQU0wQiwrQkFBK0IsQ0FBQ0osS0FBS3pCLGtCQUFrQixRQUFRQSxrQkFBa0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsY0FBYzhCLFdBQVcsTUFBTSxRQUFRTCxPQUFPLEtBQUssSUFBSUEsS0FBSztZQUNySyxNQUFNTSxrQ0FBa0MsQ0FBQ0osS0FBSyxDQUFDRCxLQUFLM0IsT0FBT2lDLGtCQUFrQixDQUFDLDJCQUEyQixNQUFNLFFBQVFOLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsRUFBRSxDQUFDRyw2QkFBNkIsTUFBTSxRQUFRRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdSLEdBQUc7WUFDN04sT0FBTyxDQUFDYyxPQUFPQyxXQUFhLENBQUMsR0FBR3BDLFNBQVNxQyxxQkFBcUIsRUFBRVAsbUJBQW1CaEMsUUFBUXdDLE9BQU8sRUFBRXJDLE9BQU9zQyxTQUFTLEVBQUVyQyxlQUFlaUMsT0FBT0YsbUNBQW1DRztRQUNuTDtJQUNKO0FBQ0o7QUFDQTVDLHNCQUFzQixHQUFHSTtBQUN6Qjs7O0NBR0MsR0FDRCxNQUFNRCxzQkFBc0IsU0FBVU8sYUFBYSxFQUFFa0MsUUFBUSxFQUFFRCxLQUFLO0lBQ2hFLE1BQU1LLGFBQWEsQ0FBQyxHQUFHaEQsUUFBUUksY0FBYyxFQUFFTTtJQUMvQyxPQUFPO1FBQ0g7Ozs7Ozs7Ozs7U0FVQyxHQUNEQyxhQUFZc0Msb0JBQW9CLENBQUMsQ0FBQyxFQUFFcEMsT0FBTztZQUN2QyxPQUFPbUMsV0FBV3JDLFdBQVcsQ0FBQ3NDLGtCQUFrQnJDLFdBQVcsRUFBRUMsU0FBU3FDLElBQUksQ0FBQyxDQUFDQyxVQUFZQSxRQUFRUixPQUFPQztRQUMzRztRQUNBOzs7Ozs7Ozs7O1NBVUMsR0FDRGIsYUFBWWtCLGlCQUFpQixFQUFFcEMsT0FBTztZQUNsQyxPQUFPbUMsV0FBV2pCLFdBQVcsQ0FBQ2tCLGtCQUFrQmpCLE9BQU8sRUFBRW5CLFNBQVNxQyxJQUFJLENBQUMsQ0FBQ0MsVUFBWUEsUUFBUVIsT0FBT0M7UUFDdkc7SUFDSjtBQUNKO0FBQ0E1QywyQkFBMkIsR0FBR0c7QUFDOUI7Ozs7O0NBS0MsR0FDRCxNQUFNRCxxQkFBcUJPLE9BQU8yQyxPQUFPO0lBQ3JDOzs7Ozs7Ozs7OztLQVdDLEdBQ0R6QyxZQUFZc0Msb0JBQW9CLENBQUMsQ0FBQyxFQUFFcEMsT0FBTyxFQUFFO1FBQ3pDLE9BQU8sQ0FBQyxHQUFHYixRQUFRSSxjQUFjLEVBQUUsSUFBSSxDQUFDTSxhQUFhLEVBQUVDLFdBQVcsQ0FBQ3NDLGtCQUFrQnJDLFdBQVcsRUFBRUMsU0FBU3FDLElBQUksQ0FBQyxDQUFDQyxVQUFZQSxRQUFRLElBQUksQ0FBQ1IsS0FBSyxFQUFFLElBQUksQ0FBQ0MsUUFBUTtJQUNsSztJQUNBOzs7Ozs7Ozs7OztLQVdDLEdBQ0RiLFlBQVlrQixpQkFBaUIsRUFBRXBDLE9BQU8sRUFBRTtRQUNwQyxPQUFPLENBQUMsR0FBR2IsUUFBUUksY0FBYyxFQUFFLElBQUksQ0FBQ00sYUFBYSxFQUFFcUIsV0FBVyxDQUFDa0Isa0JBQWtCakIsT0FBTyxFQUFFbkIsU0FBU3FDLElBQUksQ0FBQyxDQUFDQyxVQUFZQSxRQUFRLElBQUksQ0FBQ1IsS0FBSyxFQUFFLElBQUksQ0FBQ0MsUUFBUTtJQUM5SjtBQUNKO0FBQ0E1QyxvQkFBb0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYXJjYXN0ZXJzdGF0cy8uL25vZGVfbW9kdWxlcy9AbmV5bmFyL25vZGVqcy1zZGsvYnVpbGQvaHViLWFwaS9hcGlzL2h1Yi1ldmVudHMtYXBpLmpzP2M3ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogRmFyY2FzdGVyIEh1YiBBUElcbiAqIFBlcmZvcm0gYmFzaWMgcXVlcmllcyBvZiBGYXJjYXN0ZXIgc3RhdGUgdmlhIHRoZSBSRVNUIEFQSSBvZiBhIEZhcmNhc3RlciBodWIuIFNlZSB0aGUgW05leW5hciBkb2NzXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDIuMzUuMFxuICogQ29udGFjdDogdGVhbUBuZXluYXIuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkh1YkV2ZW50c0FwaSA9IGV4cG9ydHMuSHViRXZlbnRzQXBpRmFjdG9yeSA9IGV4cG9ydHMuSHViRXZlbnRzQXBpRnAgPSBleHBvcnRzLkh1YkV2ZW50c0FwaUF4aW9zUGFyYW1DcmVhdG9yID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuLy8gU29tZSBpbXBvcnRzIG5vdCB1c2VkIGRlcGVuZGluZyBvbiB0ZW1wbGF0ZSBjb25kaXRpb25zXG4vLyBAdHMtaWdub3JlXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBiYXNlXzEgPSByZXF1aXJlKFwiLi4vYmFzZVwiKTtcbi8qKlxuICogSHViRXZlbnRzQXBpIC0gYXhpb3MgcGFyYW1ldGVyIGNyZWF0b3JcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgSHViRXZlbnRzQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGZXRjaCBhIGxpc3Qgb2YgZXZlbnRzLlxuICAgICAgICAgKiBAc3VtbWFyeSBQYWdlIG9mIGV2ZW50c1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21FdmVudElkXSBBbiBvcHRpb25hbCBIdWIgSWQgdG8gc3RhcnQgZ2V0dGluZyBldmVudHMgZnJvbS4gVGhpcyBpcyBhbHNvIHJldHVybmVkIGZyb20gdGhlIEFQSSBhcyBuZXh0UGFnZUV2ZW50SWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHBhZ2UgdGhyb3VnaCBhbGwgdGhlIEh1YiBldmVudHMuIFNldCBpdCB0byAwIHRvIHN0YXJ0IGZyb20gdGhlIGZpcnN0IGV2ZW50LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxGZXRjaEV2ZW50czIwMFJlc3BvbnNlPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBgRmV0Y2hFdmVudHMyMDBSZXNwb25zZWAgb2JqZWN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCByZWZlciB0byB0aGUgW0FQSSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UvZmV0Y2gtZXZlbnRzKVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZmV0Y2hFdmVudHM6IGFzeW5jIChmcm9tRXZlbnRJZCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL3YxL2V2ZW50c2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBBcGlLZXlBdXRoIHJlcXVpcmVkXG4gICAgICAgICAgICBhd2FpdCAoMCwgY29tbW9uXzEuc2V0QXBpS2V5VG9PYmplY3QpKGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCBcIngtYXBpLWtleVwiLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChmcm9tRXZlbnRJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnZnJvbV9ldmVudF9pZCddID0gZnJvbUV2ZW50SWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoMCwgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKShsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiAoMCwgY29tbW9uXzEudG9QYXRoU3RyaW5nKShsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb29rdXAgYW4gZXZlbnQgYnkgaXRzIElELlxuICAgICAgICAgKiBAc3VtbWFyeSBFdmVudCBieSBJRFxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnRJZCBUaGUgSHViIElkIG9mIHRoZSBldmVudFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIdWJFdmVudD59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYEh1YkV2ZW50YCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9sb29rdXAtZXZlbnQpXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBsb29rdXBFdmVudDogYXN5bmMgKGV2ZW50SWQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZXZlbnRJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICAoMCwgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMpKCdsb29rdXBFdmVudCcsICdldmVudElkJywgZXZlbnRJZCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL3YxL2V2ZW50QnlJZGA7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBBcGlLZXlBdXRoIHJlcXVpcmVkXG4gICAgICAgICAgICBhd2FpdCAoMCwgY29tbW9uXzEuc2V0QXBpS2V5VG9PYmplY3QpKGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCBcIngtYXBpLWtleVwiLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChldmVudElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydldmVudF9pZCddID0gZXZlbnRJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMpKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6ICgwLCBjb21tb25fMS50b1BhdGhTdHJpbmcpKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydHMuSHViRXZlbnRzQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBIdWJFdmVudHNBcGlBeGlvc1BhcmFtQ3JlYXRvcjtcbi8qKlxuICogSHViRXZlbnRzQXBpIC0gZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgSHViRXZlbnRzQXBpRnAgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xuICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IgPSAoMCwgZXhwb3J0cy5IdWJFdmVudHNBcGlBeGlvc1BhcmFtQ3JlYXRvcikoY29uZmlndXJhdGlvbik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoIGEgbGlzdCBvZiBldmVudHMuXG4gICAgICAgICAqIEBzdW1tYXJ5IFBhZ2Ugb2YgZXZlbnRzXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUV2ZW50SWRdIEFuIG9wdGlvbmFsIEh1YiBJZCB0byBzdGFydCBnZXR0aW5nIGV2ZW50cyBmcm9tLiBUaGlzIGlzIGFsc28gcmV0dXJuZWQgZnJvbSB0aGUgQVBJIGFzIG5leHRQYWdlRXZlbnRJZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gcGFnZSB0aHJvdWdoIGFsbCB0aGUgSHViIGV2ZW50cy4gU2V0IGl0IHRvIDAgdG8gc3RhcnQgZnJvbSB0aGUgZmlyc3QgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEZldGNoRXZlbnRzMjAwUmVzcG9uc2U+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIGBGZXRjaEV2ZW50czIwMFJlc3BvbnNlYCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9mZXRjaC1ldmVudHMpXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBhc3luYyBmZXRjaEV2ZW50cyhmcm9tRXZlbnRJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IGF3YWl0IGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuZmV0Y2hFdmVudHMoZnJvbUV2ZW50SWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJPcGVyYXRpb25TZXJ2ZXJJbmRleCA9IChfYSA9IGNvbmZpZ3VyYXRpb24gPT09IG51bGwgfHwgY29uZmlndXJhdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlndXJhdGlvbi5zZXJ2ZXJJbmRleCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyT3BlcmF0aW9uU2VydmVyQmFzZVBhdGggPSAoX2MgPSAoX2IgPSBiYXNlXzEub3BlcmF0aW9uU2VydmVyTWFwWydIdWJFdmVudHNBcGkuZmV0Y2hFdmVudHMnXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW2xvY2FsVmFyT3BlcmF0aW9uU2VydmVySW5kZXhdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudXJsO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvcywgYmFzZVBhdGgpID0+ICgwLCBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24pKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pKGF4aW9zLCBsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoIHx8IGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvb2t1cCBhbiBldmVudCBieSBpdHMgSUQuXG4gICAgICAgICAqIEBzdW1tYXJ5IEV2ZW50IGJ5IElEXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudElkIFRoZSBIdWIgSWQgb2YgdGhlIGV2ZW50XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEh1YkV2ZW50Pn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBgSHViRXZlbnRgIG9iamVjdFxuICAgICAgICAgKlxuICAgICAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcmVmZXIgdG8gdGhlIFtBUEkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm5leW5hci5jb20vcmVmZXJlbmNlL2xvb2t1cC1ldmVudClcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGFzeW5jIGxvb2t1cEV2ZW50KGV2ZW50SWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBhd2FpdCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmxvb2t1cEV2ZW50KGV2ZW50SWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJPcGVyYXRpb25TZXJ2ZXJJbmRleCA9IChfYSA9IGNvbmZpZ3VyYXRpb24gPT09IG51bGwgfHwgY29uZmlndXJhdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlndXJhdGlvbi5zZXJ2ZXJJbmRleCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyT3BlcmF0aW9uU2VydmVyQmFzZVBhdGggPSAoX2MgPSAoX2IgPSBiYXNlXzEub3BlcmF0aW9uU2VydmVyTWFwWydIdWJFdmVudHNBcGkubG9va3VwRXZlbnQnXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW2xvY2FsVmFyT3BlcmF0aW9uU2VydmVySW5kZXhdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudXJsO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvcywgYmFzZVBhdGgpID0+ICgwLCBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24pKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pKGF4aW9zLCBsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoIHx8IGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydHMuSHViRXZlbnRzQXBpRnAgPSBIdWJFdmVudHNBcGlGcDtcbi8qKlxuICogSHViRXZlbnRzQXBpIC0gZmFjdG9yeSBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgSHViRXZlbnRzQXBpRmFjdG9yeSA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uLCBiYXNlUGF0aCwgYXhpb3MpIHtcbiAgICBjb25zdCBsb2NhbFZhckZwID0gKDAsIGV4cG9ydHMuSHViRXZlbnRzQXBpRnApKGNvbmZpZ3VyYXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGZXRjaCBhIGxpc3Qgb2YgZXZlbnRzLlxuICAgICAgICAgKiBAc3VtbWFyeSBQYWdlIG9mIGV2ZW50c1xuICAgICAgICAgKiBAcGFyYW0ge0h1YkV2ZW50c0FwaUZldGNoRXZlbnRzUmVxdWVzdH0gcmVxdWVzdFBhcmFtZXRlcnMgUmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxGZXRjaEV2ZW50czIwMFJlc3BvbnNlPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBgRmV0Y2hFdmVudHMyMDBSZXNwb25zZWAgb2JqZWN0XG4gICAgICAgICAqXG4gICAgICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCByZWZlciB0byB0aGUgW0FQSSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UvZmV0Y2gtZXZlbnRzKVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZmV0Y2hFdmVudHMocmVxdWVzdFBhcmFtZXRlcnMgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuZmV0Y2hFdmVudHMocmVxdWVzdFBhcmFtZXRlcnMuZnJvbUV2ZW50SWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb29rdXAgYW4gZXZlbnQgYnkgaXRzIElELlxuICAgICAgICAgKiBAc3VtbWFyeSBFdmVudCBieSBJRFxuICAgICAgICAgKiBAcGFyYW0ge0h1YkV2ZW50c0FwaUxvb2t1cEV2ZW50UmVxdWVzdH0gcmVxdWVzdFBhcmFtZXRlcnMgUmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIdWJFdmVudD59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYEh1YkV2ZW50YCBvYmplY3RcbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBbQVBJIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZS9sb29rdXAtZXZlbnQpXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBsb29rdXBFdmVudChyZXF1ZXN0UGFyYW1ldGVycywgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAubG9va3VwRXZlbnQocmVxdWVzdFBhcmFtZXRlcnMuZXZlbnRJZCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydHMuSHViRXZlbnRzQXBpRmFjdG9yeSA9IEh1YkV2ZW50c0FwaUZhY3Rvcnk7XG4vKipcbiAqIEh1YkV2ZW50c0FwaSAtIG9iamVjdC1vcmllbnRlZCBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBIdWJFdmVudHNBcGlcbiAqIEBleHRlbmRzIHtCYXNlQVBJfVxuICovXG5jbGFzcyBIdWJFdmVudHNBcGkgZXh0ZW5kcyBiYXNlXzEuQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogRmV0Y2ggYSBsaXN0IG9mIGV2ZW50cy5cbiAgICAgKiBAc3VtbWFyeSBQYWdlIG9mIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7SHViRXZlbnRzQXBpRmV0Y2hFdmVudHNSZXF1ZXN0fSByZXF1ZXN0UGFyYW1ldGVycyBSZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBIdWJFdmVudHNBcGlcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxGZXRjaEV2ZW50czIwMFJlc3BvbnNlPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBgRmV0Y2hFdmVudHMyMDBSZXNwb25zZWAgb2JqZWN0XG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcmVmZXIgdG8gdGhlIFtBUEkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLm5leW5hci5jb20vcmVmZXJlbmNlL2ZldGNoLWV2ZW50cylcbiAgICAgKlxuICAgICAqL1xuICAgIGZldGNoRXZlbnRzKHJlcXVlc3RQYXJhbWV0ZXJzID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLkh1YkV2ZW50c0FwaUZwKSh0aGlzLmNvbmZpZ3VyYXRpb24pLmZldGNoRXZlbnRzKHJlcXVlc3RQYXJhbWV0ZXJzLmZyb21FdmVudElkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9va3VwIGFuIGV2ZW50IGJ5IGl0cyBJRC5cbiAgICAgKiBAc3VtbWFyeSBFdmVudCBieSBJRFxuICAgICAqIEBwYXJhbSB7SHViRXZlbnRzQXBpTG9va3VwRXZlbnRSZXF1ZXN0fSByZXF1ZXN0UGFyYW1ldGVycyBSZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBIdWJFdmVudHNBcGlcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIdWJFdmVudD59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYEh1YkV2ZW50YCBvYmplY3RcbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCByZWZlciB0byB0aGUgW0FQSSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MubmV5bmFyLmNvbS9yZWZlcmVuY2UvbG9va3VwLWV2ZW50KVxuICAgICAqXG4gICAgICovXG4gICAgbG9va3VwRXZlbnQocmVxdWVzdFBhcmFtZXRlcnMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBleHBvcnRzLkh1YkV2ZW50c0FwaUZwKSh0aGlzLmNvbmZpZ3VyYXRpb24pLmxvb2t1cEV2ZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmV2ZW50SWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuSHViRXZlbnRzQXBpID0gSHViRXZlbnRzQXBpO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkh1YkV2ZW50c0FwaSIsIkh1YkV2ZW50c0FwaUZhY3RvcnkiLCJIdWJFdmVudHNBcGlGcCIsIkh1YkV2ZW50c0FwaUF4aW9zUGFyYW1DcmVhdG9yIiwiYXhpb3NfMSIsInJlcXVpcmUiLCJjb21tb25fMSIsImJhc2VfMSIsImNvbmZpZ3VyYXRpb24iLCJmZXRjaEV2ZW50cyIsImZyb21FdmVudElkIiwib3B0aW9ucyIsImxvY2FsVmFyUGF0aCIsImxvY2FsVmFyVXJsT2JqIiwiVVJMIiwiRFVNTVlfQkFTRV9VUkwiLCJiYXNlT3B0aW9ucyIsImxvY2FsVmFyUmVxdWVzdE9wdGlvbnMiLCJhc3NpZ24iLCJtZXRob2QiLCJsb2NhbFZhckhlYWRlclBhcmFtZXRlciIsImxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIiLCJzZXRBcGlLZXlUb09iamVjdCIsInVuZGVmaW5lZCIsInNldFNlYXJjaFBhcmFtcyIsImhlYWRlcnNGcm9tQmFzZU9wdGlvbnMiLCJoZWFkZXJzIiwidXJsIiwidG9QYXRoU3RyaW5nIiwibG9va3VwRXZlbnQiLCJldmVudElkIiwiYXNzZXJ0UGFyYW1FeGlzdHMiLCJsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yIiwiX2EiLCJfYiIsIl9jIiwibG9jYWxWYXJBeGlvc0FyZ3MiLCJsb2NhbFZhck9wZXJhdGlvblNlcnZlckluZGV4Iiwic2VydmVySW5kZXgiLCJsb2NhbFZhck9wZXJhdGlvblNlcnZlckJhc2VQYXRoIiwib3BlcmF0aW9uU2VydmVyTWFwIiwiYXhpb3MiLCJiYXNlUGF0aCIsImNyZWF0ZVJlcXVlc3RGdW5jdGlvbiIsImRlZmF1bHQiLCJCQVNFX1BBVEgiLCJsb2NhbFZhckZwIiwicmVxdWVzdFBhcmFtZXRlcnMiLCJ0aGVuIiwicmVxdWVzdCIsIkJhc2VBUEkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/hub-events-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/info-api.js":
/*!************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/info-api.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InfoApi = exports.InfoApiFactory = exports.InfoApiFp = exports.InfoApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * InfoApi - axios parameter creator\n * @export\n */ const InfoApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Retrieve hub information.\n         * @summary Sync Methods\n         * @param {boolean} dbstats Controls whether the response includes database statistics. When true, the response includes information about the hub\\&#39;s database state, storage usage, and performance metrics.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)\n         *\n         */ lookupHubInfo: async (dbstats, options = {})=>{\n            // verify required parameter 'dbstats' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupHubInfo\", \"dbstats\", dbstats);\n            const localVarPath = `/v1/info`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (dbstats !== undefined) {\n                localVarQueryParameter[\"dbstats\"] = dbstats;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.InfoApiAxiosParamCreator = InfoApiAxiosParamCreator;\n/**\n * InfoApi - functional programming interface\n * @export\n */ const InfoApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.InfoApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Retrieve hub information.\n         * @summary Sync Methods\n         * @param {boolean} dbstats Controls whether the response includes database statistics. When true, the response includes information about the hub\\&#39;s database state, storage usage, and performance metrics.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)\n         *\n         */ async lookupHubInfo (dbstats, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupHubInfo(dbstats, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"InfoApi.lookupHubInfo\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.InfoApiFp = InfoApiFp;\n/**\n * InfoApi - factory interface\n * @export\n */ const InfoApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.InfoApiFp)(configuration);\n    return {\n        /**\n         * Retrieve hub information.\n         * @summary Sync Methods\n         * @param {InfoApiLookupHubInfoRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)\n         *\n         */ lookupHubInfo (requestParameters, options) {\n            return localVarFp.lookupHubInfo(requestParameters.dbstats, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.InfoApiFactory = InfoApiFactory;\n/**\n * InfoApi - object-oriented interface\n * @export\n * @class InfoApi\n * @extends {BaseAPI}\n */ class InfoApi extends base_1.BaseAPI {\n    /**\n     * Retrieve hub information.\n     * @summary Sync Methods\n     * @param {InfoApiLookupHubInfoRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof InfoApi\n     * @returns {Promise<HubInfoResponse>} A promise that resolves to a `HubInfoResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-hub-info)\n     *\n     */ lookupHubInfo(requestParameters, options) {\n        return (0, exports.InfoApiFp)(this.configuration).lookupHubInfo(requestParameters.dbstats, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.InfoApi = InfoApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/info-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/links-api.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/links-api.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LinksApi = exports.LinksApiFactory = exports.LinksApiFp = exports.LinksApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * LinksApi - axios parameter creator\n * @export\n */ const LinksApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch a list of users that are following a user.\n         * @summary To target FID\n         * @param {number} targetFid The FID of the target user for this link\n         * @param {LinkType} [linkType]\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n         *\n         */ fetchUserFollowers: async (targetFid, linkType, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'targetFid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserFollowers\", \"targetFid\", targetFid);\n            const localVarPath = `/v1/linksByTargetFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (targetFid !== undefined) {\n                localVarQueryParameter[\"target_fid\"] = targetFid;\n            }\n            if (linkType !== undefined) {\n                localVarQueryParameter[\"link_type\"] = linkType;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch a list of users that a user is following.\n         * @summary From source FID\n         * @param {number} fid The FID of the link\\&#39;s originator\n         * @param {LinkType} [linkType]\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n         *\n         */ fetchUserFollowing: async (fid, linkType, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserFollowing\", \"fid\", fid);\n            const localVarPath = `/v1/linksByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (linkType !== undefined) {\n                localVarQueryParameter[\"link_type\"] = linkType;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Lookup a link by its FID and target FID.\n         * @summary By its FID and target FID\n         * @param {number} fid The FID of the link\\&#39;s originator\n         * @param {number} targetFid The FID of the target user for this link\n         * @param {LinkType} linkType\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<LinkAdd>} A promise that resolves to a `LinkAdd` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-relation)\n         *\n         */ lookupUserRelation: async (fid, targetFid, linkType, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUserRelation\", \"fid\", fid);\n            // verify required parameter 'targetFid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUserRelation\", \"targetFid\", targetFid);\n            // verify required parameter 'linkType' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUserRelation\", \"linkType\", linkType);\n            const localVarPath = `/v1/linkById`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (targetFid !== undefined) {\n                localVarQueryParameter[\"target_fid\"] = targetFid;\n            }\n            if (linkType !== undefined) {\n                localVarQueryParameter[\"link_type\"] = linkType;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.LinksApiAxiosParamCreator = LinksApiAxiosParamCreator;\n/**\n * LinksApi - functional programming interface\n * @export\n */ const LinksApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.LinksApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch a list of users that are following a user.\n         * @summary To target FID\n         * @param {number} targetFid The FID of the target user for this link\n         * @param {LinkType} [linkType]\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n         *\n         */ async fetchUserFollowers (targetFid, linkType, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowers(targetFid, linkType, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"LinksApi.fetchUserFollowers\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch a list of users that a user is following.\n         * @summary From source FID\n         * @param {number} fid The FID of the link\\&#39;s originator\n         * @param {LinkType} [linkType]\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n         *\n         */ async fetchUserFollowing (fid, linkType, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowing(fid, linkType, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"LinksApi.fetchUserFollowing\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Lookup a link by its FID and target FID.\n         * @summary By its FID and target FID\n         * @param {number} fid The FID of the link\\&#39;s originator\n         * @param {number} targetFid The FID of the target user for this link\n         * @param {LinkType} linkType\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<LinkAdd>} A promise that resolves to a `LinkAdd` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-relation)\n         *\n         */ async lookupUserRelation (fid, targetFid, linkType, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupUserRelation(fid, targetFid, linkType, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"LinksApi.lookupUserRelation\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.LinksApiFp = LinksApiFp;\n/**\n * LinksApi - factory interface\n * @export\n */ const LinksApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.LinksApiFp)(configuration);\n    return {\n        /**\n         * Fetch a list of users that are following a user.\n         * @summary To target FID\n         * @param {LinksApiFetchUserFollowersRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n         *\n         */ fetchUserFollowers (requestParameters, options) {\n            return localVarFp.fetchUserFollowers(requestParameters.targetFid, requestParameters.linkType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch a list of users that a user is following.\n         * @summary From source FID\n         * @param {LinksApiFetchUserFollowingRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n         *\n         */ fetchUserFollowing (requestParameters, options) {\n            return localVarFp.fetchUserFollowing(requestParameters.fid, requestParameters.linkType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Lookup a link by its FID and target FID.\n         * @summary By its FID and target FID\n         * @param {LinksApiLookupUserRelationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<LinkAdd>} A promise that resolves to a `LinkAdd` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-relation)\n         *\n         */ lookupUserRelation (requestParameters, options) {\n            return localVarFp.lookupUserRelation(requestParameters.fid, requestParameters.targetFid, requestParameters.linkType, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.LinksApiFactory = LinksApiFactory;\n/**\n * LinksApi - object-oriented interface\n * @export\n * @class LinksApi\n * @extends {BaseAPI}\n */ class LinksApi extends base_1.BaseAPI {\n    /**\n     * Fetch a list of users that are following a user.\n     * @summary To target FID\n     * @param {LinksApiFetchUserFollowersRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LinksApi\n     * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-followers)\n     *\n     */ fetchUserFollowers(requestParameters, options) {\n        return (0, exports.LinksApiFp)(this.configuration).fetchUserFollowers(requestParameters.targetFid, requestParameters.linkType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch a list of users that a user is following.\n     * @summary From source FID\n     * @param {LinksApiFetchUserFollowingRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LinksApi\n     * @returns {Promise<FetchUserFollowing200Response>} A promise that resolves to a `FetchUserFollowing200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following)\n     *\n     */ fetchUserFollowing(requestParameters, options) {\n        return (0, exports.LinksApiFp)(this.configuration).fetchUserFollowing(requestParameters.fid, requestParameters.linkType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Lookup a link by its FID and target FID.\n     * @summary By its FID and target FID\n     * @param {LinksApiLookupUserRelationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LinksApi\n     * @returns {Promise<LinkAdd>} A promise that resolves to a `LinkAdd` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-relation)\n     *\n     */ lookupUserRelation(requestParameters, options) {\n        return (0, exports.LinksApiFp)(this.configuration).lookupUserRelation(requestParameters.fid, requestParameters.targetFid, requestParameters.linkType, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.LinksApi = LinksApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/links-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/message-api.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/message-api.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MessageApi = exports.MessageApiFactory = exports.MessageApiFp = exports.MessageApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * MessageApi - axios parameter creator\n * @export\n */ const MessageApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Submit a message to the Farcaster network.\n         * @summary Submit signed message\n         * @param {File} body A Message is a delta operation on the Farcaster network. The message protobuf is an envelope that wraps a MessageData object and contains a hash and signature which can verify its authenticity.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Message>} A promise that resolves to a `Message` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/submit-signed-message)\n         *\n         */ publishMessage: async (body, options = {})=>{\n            // verify required parameter 'body' is not null or undefined\n            (0, common_1.assertParamExists)(\"publishMessage\", \"body\", body);\n            const localVarPath = `/v1/submitMessage`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/octet-stream\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Validate a message on the Farcaster network.\n         * @summary Validate signed message\n         * @param {File} body A Message is a delta operation on the Farcaster network. The message protobuf is an envelope that wraps a MessageData object and contains a hash and signature which can verify its authenticity.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ValidateMessageResponse>} A promise that resolves to a `ValidateMessageResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-message)\n         *\n         */ validateMessage: async (body, options = {})=>{\n            // verify required parameter 'body' is not null or undefined\n            (0, common_1.assertParamExists)(\"validateMessage\", \"body\", body);\n            const localVarPath = `/v1/validateMessage`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"POST\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            localVarHeaderParameter[\"Content-Type\"] = \"application/octet-stream\";\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.MessageApiAxiosParamCreator = MessageApiAxiosParamCreator;\n/**\n * MessageApi - functional programming interface\n * @export\n */ const MessageApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.MessageApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Submit a message to the Farcaster network.\n         * @summary Submit signed message\n         * @param {File} body A Message is a delta operation on the Farcaster network. The message protobuf is an envelope that wraps a MessageData object and contains a hash and signature which can verify its authenticity.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Message>} A promise that resolves to a `Message` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/submit-signed-message)\n         *\n         */ async publishMessage (body, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishMessage(body, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"MessageApi.publishMessage\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Validate a message on the Farcaster network.\n         * @summary Validate signed message\n         * @param {File} body A Message is a delta operation on the Farcaster network. The message protobuf is an envelope that wraps a MessageData object and contains a hash and signature which can verify its authenticity.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ValidateMessageResponse>} A promise that resolves to a `ValidateMessageResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-message)\n         *\n         */ async validateMessage (body, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.validateMessage(body, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"MessageApi.validateMessage\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.MessageApiFp = MessageApiFp;\n/**\n * MessageApi - factory interface\n * @export\n */ const MessageApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.MessageApiFp)(configuration);\n    return {\n        /**\n         * Submit a message to the Farcaster network.\n         * @summary Submit signed message\n         * @param {MessageApiPublishMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Message>} A promise that resolves to a `Message` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/submit-signed-message)\n         *\n         */ publishMessage (requestParameters, options) {\n            return localVarFp.publishMessage(requestParameters.body, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Validate a message on the Farcaster network.\n         * @summary Validate signed message\n         * @param {MessageApiValidateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<ValidateMessageResponse>} A promise that resolves to a `ValidateMessageResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-message)\n         *\n         */ validateMessage (requestParameters, options) {\n            return localVarFp.validateMessage(requestParameters.body, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.MessageApiFactory = MessageApiFactory;\n/**\n * MessageApi - object-oriented interface\n * @export\n * @class MessageApi\n * @extends {BaseAPI}\n */ class MessageApi extends base_1.BaseAPI {\n    /**\n     * Submit a message to the Farcaster network.\n     * @summary Submit signed message\n     * @param {MessageApiPublishMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MessageApi\n     * @returns {Promise<Message>} A promise that resolves to a `Message` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/submit-signed-message)\n     *\n     */ publishMessage(requestParameters, options) {\n        return (0, exports.MessageApiFp)(this.configuration).publishMessage(requestParameters.body, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Validate a message on the Farcaster network.\n     * @summary Validate signed message\n     * @param {MessageApiValidateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MessageApi\n     * @returns {Promise<ValidateMessageResponse>} A promise that resolves to a `ValidateMessageResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-message)\n     *\n     */ validateMessage(requestParameters, options) {\n        return (0, exports.MessageApiFp)(this.configuration).validateMessage(requestParameters.body, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.MessageApi = MessageApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/message-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/on-chain-events-api.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/on-chain-events-api.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OnChainEventsApi = exports.OnChainEventsApiFactory = exports.OnChainEventsApiFp = exports.OnChainEventsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * OnChainEventsApi - axios parameter creator\n * @export\n */ const OnChainEventsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch on-chain events provided by a user.\n         * @summary Fetch a list of on-chain events provided by an FID\n         * @param {number} fid The FID being requested\n         * @param {OnChainEventType} eventType The numeric or string value of the event type being requested\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)\n         *\n         */ fetchUserOnChainEvents: async (fid, eventType, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserOnChainEvents\", \"fid\", fid);\n            // verify required parameter 'eventType' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserOnChainEvents\", \"eventType\", eventType);\n            const localVarPath = `/v1/onChainEventsByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (eventType !== undefined) {\n                localVarQueryParameter[\"event_type\"] = eventType;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.\n         * @summary Fetch a list of signers provided by an FID\n         * @param {number} fid The FID being requested\n         * @param {string} [signer] The optional key of signer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)\n         *\n         */ fetchUserOnChainSignersEvents: async (fid, signer, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserOnChainSignersEvents\", \"fid\", fid);\n            const localVarPath = `/v1/onChainSignersByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (signer !== undefined) {\n                localVarQueryParameter[\"signer\"] = signer;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch an on-chain ID Registry Event for a given Address.\n         * @summary Fetch an on-chain ID Registry Event for a given Address\n         * @param {string} address The ETH address being requested\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)\n         *\n         */ lookupOnChainIdRegistryEventByAddress: async (address, options = {})=>{\n            // verify required parameter 'address' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupOnChainIdRegistryEventByAddress\", \"address\", address);\n            const localVarPath = `/v1/onChainIdRegistryEventByAddress`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (address !== undefined) {\n                localVarQueryParameter[\"address\"] = address;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.OnChainEventsApiAxiosParamCreator = OnChainEventsApiAxiosParamCreator;\n/**\n * OnChainEventsApi - functional programming interface\n * @export\n */ const OnChainEventsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.OnChainEventsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch on-chain events provided by a user.\n         * @summary Fetch a list of on-chain events provided by an FID\n         * @param {number} fid The FID being requested\n         * @param {OnChainEventType} eventType The numeric or string value of the event type being requested\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)\n         *\n         */ async fetchUserOnChainEvents (fid, eventType, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserOnChainEvents(fid, eventType, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"OnChainEventsApi.fetchUserOnChainEvents\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.\n         * @summary Fetch a list of signers provided by an FID\n         * @param {number} fid The FID being requested\n         * @param {string} [signer] The optional key of signer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)\n         *\n         */ async fetchUserOnChainSignersEvents (fid, signer, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserOnChainSignersEvents(fid, signer, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"OnChainEventsApi.fetchUserOnChainSignersEvents\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch an on-chain ID Registry Event for a given Address.\n         * @summary Fetch an on-chain ID Registry Event for a given Address\n         * @param {string} address The ETH address being requested\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)\n         *\n         */ async lookupOnChainIdRegistryEventByAddress (address, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupOnChainIdRegistryEventByAddress(address, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"OnChainEventsApi.lookupOnChainIdRegistryEventByAddress\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.OnChainEventsApiFp = OnChainEventsApiFp;\n/**\n * OnChainEventsApi - factory interface\n * @export\n */ const OnChainEventsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.OnChainEventsApiFp)(configuration);\n    return {\n        /**\n         * Fetch on-chain events provided by a user.\n         * @summary Fetch a list of on-chain events provided by an FID\n         * @param {OnChainEventsApiFetchUserOnChainEventsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)\n         *\n         */ fetchUserOnChainEvents (requestParameters, options) {\n            return localVarFp.fetchUserOnChainEvents(requestParameters.fid, requestParameters.eventType, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.\n         * @summary Fetch a list of signers provided by an FID\n         * @param {OnChainEventsApiFetchUserOnChainSignersEventsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)\n         *\n         */ fetchUserOnChainSignersEvents (requestParameters, options) {\n            return localVarFp.fetchUserOnChainSignersEvents(requestParameters.fid, requestParameters.signer, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch an on-chain ID Registry Event for a given Address.\n         * @summary Fetch an on-chain ID Registry Event for a given Address\n         * @param {OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)\n         *\n         */ lookupOnChainIdRegistryEventByAddress (requestParameters, options) {\n            return localVarFp.lookupOnChainIdRegistryEventByAddress(requestParameters.address, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.OnChainEventsApiFactory = OnChainEventsApiFactory;\n/**\n * OnChainEventsApi - object-oriented interface\n * @export\n * @class OnChainEventsApi\n * @extends {BaseAPI}\n */ class OnChainEventsApi extends base_1.BaseAPI {\n    /**\n     * Fetch on-chain events provided by a user.\n     * @summary Fetch a list of on-chain events provided by an FID\n     * @param {OnChainEventsApiFetchUserOnChainEventsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnChainEventsApi\n     * @returns {Promise<FetchUserOnChainEvents200Response>} A promise that resolves to a `FetchUserOnChainEvents200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-events)\n     *\n     */ fetchUserOnChainEvents(requestParameters, options) {\n        return (0, exports.OnChainEventsApiFp)(this.configuration).fetchUserOnChainEvents(requestParameters.fid, requestParameters.eventType, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.\n     * @summary Fetch a list of signers provided by an FID\n     * @param {OnChainEventsApiFetchUserOnChainSignersEventsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnChainEventsApi\n     * @returns {Promise<FetchUserOnChainSignersEvents200Response>} A promise that resolves to a `FetchUserOnChainSignersEvents200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-on-chain-signers)\n     *\n     */ fetchUserOnChainSignersEvents(requestParameters, options) {\n        return (0, exports.OnChainEventsApiFp)(this.configuration).fetchUserOnChainSignersEvents(requestParameters.fid, requestParameters.signer, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch an on-chain ID Registry Event for a given Address.\n     * @summary Fetch an on-chain ID Registry Event for a given Address\n     * @param {OnChainEventsApiLookupOnChainIdRegistryEventByAddressRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OnChainEventsApi\n     * @returns {Promise<OnChainEventIdRegister>} A promise that resolves to a `OnChainEventIdRegister` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address)\n     *\n     */ lookupOnChainIdRegistryEventByAddress(requestParameters, options) {\n        return (0, exports.OnChainEventsApiFp)(this.configuration).lookupOnChainIdRegistryEventByAddress(requestParameters.address, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.OnChainEventsApi = OnChainEventsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/on-chain-events-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/reactions-api.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/reactions-api.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ReactionsApi = exports.ReactionsApiFactory = exports.ReactionsApiFp = exports.ReactionsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * ReactionsApi - axios parameter creator\n * @export\n */ const ReactionsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.\n         * @summary On cast\n         * @param {number} targetFid The FID of the cast\\&#39;s creator. Required to uniquely identify the cast that received the reactions. Must be used in conjunction with target_hash.\n         * @param {string} targetHash The unique hash identifier of the cast that received the reactions. This is a 40-character hexadecimal string prefixed with \\&#39;0x\\&#39; that uniquely identifies the cast within the creator\\&#39;s posts. Must be used with target_fid.\n         * @param {ReactionType} reactionType\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n         *\n         */ fetchCastReactions: async (targetFid, targetHash, reactionType, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'targetFid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchCastReactions\", \"targetFid\", targetFid);\n            // verify required parameter 'targetHash' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchCastReactions\", \"targetHash\", targetHash);\n            // verify required parameter 'reactionType' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchCastReactions\", \"reactionType\", reactionType);\n            const localVarPath = `/v1/reactionsByCast`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (targetFid !== undefined) {\n                localVarQueryParameter[\"target_fid\"] = targetFid;\n            }\n            if (targetHash !== undefined) {\n                localVarQueryParameter[\"target_hash\"] = targetHash;\n            }\n            if (reactionType !== undefined) {\n                localVarQueryParameter[\"reaction_type\"] = reactionType;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.\n         * @summary To a target URL\n         * @param {string} url Target URL starting with \\&#39;chain://\\&#39;.\n         * @param {ReactionType} [reactionType]\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)\n         *\n         */ fetchReactionsByTarget: async (url, reactionType, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'url' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchReactionsByTarget\", \"url\", url);\n            const localVarPath = `/v1/reactionsByTarget`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (url !== undefined) {\n                localVarQueryParameter[\"url\"] = url;\n            }\n            if (reactionType !== undefined) {\n                localVarQueryParameter[\"reaction_type\"] = reactionType;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch reactions by a user.\n         * @summary By FID\n         * @param {number} fid The FID of the reaction\\&#39;s creator\n         * @param {ReactionType} reactionType\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n         *\n         */ fetchUserReactions: async (fid, reactionType, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserReactions\", \"fid\", fid);\n            // verify required parameter 'reactionType' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserReactions\", \"reactionType\", reactionType);\n            const localVarPath = `/v1/reactionsByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (reactionType !== undefined) {\n                localVarQueryParameter[\"reaction_type\"] = reactionType;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Lookup a reaction by its FID or cast.\n         * @summary By FID or cast\n         * @param {number} fid The FID of the reaction\\&#39;s creator\n         * @param {number} targetFid The FID of the cast\\&#39;s creator\n         * @param {string} targetHash The cast\\&#39;s hash\n         * @param {ReactionType} reactionType\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)\n         *\n         */ lookupReactionById: async (fid, targetFid, targetHash, reactionType, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupReactionById\", \"fid\", fid);\n            // verify required parameter 'targetFid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupReactionById\", \"targetFid\", targetFid);\n            // verify required parameter 'targetHash' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupReactionById\", \"targetHash\", targetHash);\n            // verify required parameter 'reactionType' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupReactionById\", \"reactionType\", reactionType);\n            const localVarPath = `/v1/reactionById`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (targetFid !== undefined) {\n                localVarQueryParameter[\"target_fid\"] = targetFid;\n            }\n            if (targetHash !== undefined) {\n                localVarQueryParameter[\"target_hash\"] = targetHash;\n            }\n            if (reactionType !== undefined) {\n                localVarQueryParameter[\"reaction_type\"] = reactionType;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.ReactionsApiAxiosParamCreator = ReactionsApiAxiosParamCreator;\n/**\n * ReactionsApi - functional programming interface\n * @export\n */ const ReactionsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.ReactionsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.\n         * @summary On cast\n         * @param {number} targetFid The FID of the cast\\&#39;s creator. Required to uniquely identify the cast that received the reactions. Must be used in conjunction with target_hash.\n         * @param {string} targetHash The unique hash identifier of the cast that received the reactions. This is a 40-character hexadecimal string prefixed with \\&#39;0x\\&#39; that uniquely identifies the cast within the creator\\&#39;s posts. Must be used with target_fid.\n         * @param {ReactionType} reactionType\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n         *\n         */ async fetchCastReactions (targetFid, targetHash, reactionType, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastReactions(targetFid, targetHash, reactionType, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ReactionsApi.fetchCastReactions\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.\n         * @summary To a target URL\n         * @param {string} url Target URL starting with \\&#39;chain://\\&#39;.\n         * @param {ReactionType} [reactionType]\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)\n         *\n         */ async fetchReactionsByTarget (url, reactionType, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchReactionsByTarget(url, reactionType, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ReactionsApi.fetchReactionsByTarget\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch reactions by a user.\n         * @summary By FID\n         * @param {number} fid The FID of the reaction\\&#39;s creator\n         * @param {ReactionType} reactionType\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n         *\n         */ async fetchUserReactions (fid, reactionType, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserReactions(fid, reactionType, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ReactionsApi.fetchUserReactions\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Lookup a reaction by its FID or cast.\n         * @summary By FID or cast\n         * @param {number} fid The FID of the reaction\\&#39;s creator\n         * @param {number} targetFid The FID of the cast\\&#39;s creator\n         * @param {string} targetHash The cast\\&#39;s hash\n         * @param {ReactionType} reactionType\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)\n         *\n         */ async lookupReactionById (fid, targetFid, targetHash, reactionType, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupReactionById(fid, targetFid, targetHash, reactionType, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"ReactionsApi.lookupReactionById\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.ReactionsApiFp = ReactionsApiFp;\n/**\n * ReactionsApi - factory interface\n * @export\n */ const ReactionsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.ReactionsApiFp)(configuration);\n    return {\n        /**\n         * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.\n         * @summary On cast\n         * @param {ReactionsApiFetchCastReactionsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n         *\n         */ fetchCastReactions (requestParameters, options) {\n            return localVarFp.fetchCastReactions(requestParameters.targetFid, requestParameters.targetHash, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.\n         * @summary To a target URL\n         * @param {ReactionsApiFetchReactionsByTargetRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)\n         *\n         */ fetchReactionsByTarget (requestParameters, options) {\n            return localVarFp.fetchReactionsByTarget(requestParameters.url, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch reactions by a user.\n         * @summary By FID\n         * @param {ReactionsApiFetchUserReactionsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n         *\n         */ fetchUserReactions (requestParameters, options) {\n            return localVarFp.fetchUserReactions(requestParameters.fid, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Lookup a reaction by its FID or cast.\n         * @summary By FID or cast\n         * @param {ReactionsApiLookupReactionByIdRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)\n         *\n         */ lookupReactionById (requestParameters, options) {\n            return localVarFp.lookupReactionById(requestParameters.fid, requestParameters.targetFid, requestParameters.targetHash, requestParameters.reactionType, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.ReactionsApiFactory = ReactionsApiFactory;\n/**\n * ReactionsApi - object-oriented interface\n * @export\n * @class ReactionsApi\n * @extends {BaseAPI}\n */ class ReactionsApi extends base_1.BaseAPI {\n    /**\n     * Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator\\'s FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.\n     * @summary On cast\n     * @param {ReactionsApiFetchCastReactionsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReactionsApi\n     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-cast-reactions)\n     *\n     */ fetchCastReactions(requestParameters, options) {\n        return (0, exports.ReactionsApiFp)(this.configuration).fetchCastReactions(requestParameters.targetFid, requestParameters.targetHash, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.\n     * @summary To a target URL\n     * @param {ReactionsApiFetchReactionsByTargetRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReactionsApi\n     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-reactions-by-target)\n     *\n     */ fetchReactionsByTarget(requestParameters, options) {\n        return (0, exports.ReactionsApiFp)(this.configuration).fetchReactionsByTarget(requestParameters.url, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch reactions by a user.\n     * @summary By FID\n     * @param {ReactionsApiFetchUserReactionsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReactionsApi\n     * @returns {Promise<FetchCastReactions200Response>} A promise that resolves to a `FetchCastReactions200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-reactions)\n     *\n     */ fetchUserReactions(requestParameters, options) {\n        return (0, exports.ReactionsApiFp)(this.configuration).fetchUserReactions(requestParameters.fid, requestParameters.reactionType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Lookup a reaction by its FID or cast.\n     * @summary By FID or cast\n     * @param {ReactionsApiLookupReactionByIdRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReactionsApi\n     * @returns {Promise<Reaction>} A promise that resolves to a `Reaction` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-reaction-by-id)\n     *\n     */ lookupReactionById(requestParameters, options) {\n        return (0, exports.ReactionsApiFp)(this.configuration).lookupReactionById(requestParameters.fid, requestParameters.targetFid, requestParameters.targetHash, requestParameters.reactionType, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.ReactionsApi = ReactionsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/reactions-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/storage-api.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/storage-api.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StorageApi = exports.StorageApiFactory = exports.StorageApiFp = exports.StorageApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * StorageApi - axios parameter creator\n * @export\n */ const StorageApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch a user\\'s storage limits.\n         * @summary FID\\'s limits\n         * @param {number} fid\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageLimitsResponse>} A promise that resolves to a `StorageLimitsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-limit)\n         *\n         */ lookupUserStorageLimit: async (fid, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"lookupUserStorageLimit\", \"fid\", fid);\n            const localVarPath = `/v1/storageLimitsByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.StorageApiAxiosParamCreator = StorageApiAxiosParamCreator;\n/**\n * StorageApi - functional programming interface\n * @export\n */ const StorageApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.StorageApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch a user\\'s storage limits.\n         * @summary FID\\'s limits\n         * @param {number} fid\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageLimitsResponse>} A promise that resolves to a `StorageLimitsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-limit)\n         *\n         */ async lookupUserStorageLimit (fid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupUserStorageLimit(fid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"StorageApi.lookupUserStorageLimit\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.StorageApiFp = StorageApiFp;\n/**\n * StorageApi - factory interface\n * @export\n */ const StorageApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.StorageApiFp)(configuration);\n    return {\n        /**\n         * Fetch a user\\'s storage limits.\n         * @summary FID\\'s limits\n         * @param {StorageApiLookupUserStorageLimitRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<StorageLimitsResponse>} A promise that resolves to a `StorageLimitsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-limit)\n         *\n         */ lookupUserStorageLimit (requestParameters, options) {\n            return localVarFp.lookupUserStorageLimit(requestParameters.fid, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.StorageApiFactory = StorageApiFactory;\n/**\n * StorageApi - object-oriented interface\n * @export\n * @class StorageApi\n * @extends {BaseAPI}\n */ class StorageApi extends base_1.BaseAPI {\n    /**\n     * Fetch a user\\'s storage limits.\n     * @summary FID\\'s limits\n     * @param {StorageApiLookupUserStorageLimitRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StorageApi\n     * @returns {Promise<StorageLimitsResponse>} A promise that resolves to a `StorageLimitsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-user-storage-limit)\n     *\n     */ lookupUserStorageLimit(requestParameters, options) {\n        return (0, exports.StorageApiFp)(this.configuration).lookupUserStorageLimit(requestParameters.fid, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.StorageApi = StorageApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/storage-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/user-data-api.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/user-data-api.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UserDataApi = exports.UserDataApiFactory = exports.UserDataApiFp = exports.UserDataApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * UserDataApi - axios parameter creator\n * @export\n */ const UserDataApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * **Note:** one of two different response schemas is returned based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead.\n         * @summary Fetch UserData for a FID\n         * @param {number} fid The FID that\\&#39;s being requested\n         * @param {UserDataType} [userDataType] The type of user data, either as a numerical value or type string. If this is omitted, all user data for the FID is returned\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserData200Response>} A promise that resolves to a `FetchUserData200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-data)\n         *\n         */ fetchUserData: async (fid, userDataType, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUserData\", \"fid\", fid);\n            const localVarPath = `/v1/userDataByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (userDataType !== undefined) {\n                localVarQueryParameter[\"user_data_type\"] = userDataType;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.UserDataApiAxiosParamCreator = UserDataApiAxiosParamCreator;\n/**\n * UserDataApi - functional programming interface\n * @export\n */ const UserDataApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.UserDataApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * **Note:** one of two different response schemas is returned based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead.\n         * @summary Fetch UserData for a FID\n         * @param {number} fid The FID that\\&#39;s being requested\n         * @param {UserDataType} [userDataType] The type of user data, either as a numerical value or type string. If this is omitted, all user data for the FID is returned\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserData200Response>} A promise that resolves to a `FetchUserData200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-data)\n         *\n         */ async fetchUserData (fid, userDataType, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserData(fid, userDataType, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UserDataApi.fetchUserData\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.UserDataApiFp = UserDataApiFp;\n/**\n * UserDataApi - factory interface\n * @export\n */ const UserDataApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.UserDataApiFp)(configuration);\n    return {\n        /**\n         * **Note:** one of two different response schemas is returned based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead.\n         * @summary Fetch UserData for a FID\n         * @param {UserDataApiFetchUserDataRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchUserData200Response>} A promise that resolves to a `FetchUserData200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-data)\n         *\n         */ fetchUserData (requestParameters, options) {\n            return localVarFp.fetchUserData(requestParameters.fid, requestParameters.userDataType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.UserDataApiFactory = UserDataApiFactory;\n/**\n * UserDataApi - object-oriented interface\n * @export\n * @class UserDataApi\n * @extends {BaseAPI}\n */ class UserDataApi extends base_1.BaseAPI {\n    /**\n     * **Note:** one of two different response schemas is returned based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead.\n     * @summary Fetch UserData for a FID\n     * @param {UserDataApiFetchUserDataRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserDataApi\n     * @returns {Promise<FetchUserData200Response>} A promise that resolves to a `FetchUserData200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-data)\n     *\n     */ fetchUserData(requestParameters, options) {\n        return (0, exports.UserDataApiFp)(this.configuration).fetchUserData(requestParameters.fid, requestParameters.userDataType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.UserDataApi = UserDataApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/user-data-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/usernames-api.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/usernames-api.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UsernamesApi = exports.UsernamesApiFactory = exports.UsernamesApiFp = exports.UsernamesApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * UsernamesApi - axios parameter creator\n * @export\n */ const UsernamesApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch a proof for a username.\n         * @summary Proof for a username\n         * @param {string} name The Farcaster username or ENS address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)\n         *\n         */ fetchUsernameProofByName: async (name, options = {})=>{\n            // verify required parameter 'name' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUsernameProofByName\", \"name\", name);\n            const localVarPath = `/v1/userNameProofByName`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (name !== undefined) {\n                localVarQueryParameter[\"name\"] = name;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        },\n        /**\n         * Fetch proofs provided by a user.\n         * @summary Proofs provided by an FID\n         * @param {number} fid The FID being requested\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)\n         *\n         */ fetchUsernameProofsByFid: async (fid, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchUsernameProofsByFid\", \"fid\", fid);\n            const localVarPath = `/v1/userNameProofsByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.UsernamesApiAxiosParamCreator = UsernamesApiAxiosParamCreator;\n/**\n * UsernamesApi - functional programming interface\n * @export\n */ const UsernamesApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.UsernamesApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch a proof for a username.\n         * @summary Proof for a username\n         * @param {string} name The Farcaster username or ENS address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)\n         *\n         */ async fetchUsernameProofByName (name, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsernameProofByName(name, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UsernamesApi.fetchUsernameProofByName\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * Fetch proofs provided by a user.\n         * @summary Proofs provided by an FID\n         * @param {number} fid The FID being requested\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)\n         *\n         */ async fetchUsernameProofsByFid (fid, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsernameProofsByFid(fid, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"UsernamesApi.fetchUsernameProofsByFid\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.UsernamesApiFp = UsernamesApiFp;\n/**\n * UsernamesApi - factory interface\n * @export\n */ const UsernamesApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.UsernamesApiFp)(configuration);\n    return {\n        /**\n         * Fetch a proof for a username.\n         * @summary Proof for a username\n         * @param {UsernamesApiFetchUsernameProofByNameRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)\n         *\n         */ fetchUsernameProofByName (requestParameters, options) {\n            return localVarFp.fetchUsernameProofByName(requestParameters.name, options).then((request)=>request(axios, basePath));\n        },\n        /**\n         * Fetch proofs provided by a user.\n         * @summary Proofs provided by an FID\n         * @param {UsernamesApiFetchUsernameProofsByFidRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)\n         *\n         */ fetchUsernameProofsByFid (requestParameters, options) {\n            return localVarFp.fetchUsernameProofsByFid(requestParameters.fid, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.UsernamesApiFactory = UsernamesApiFactory;\n/**\n * UsernamesApi - object-oriented interface\n * @export\n * @class UsernamesApi\n * @extends {BaseAPI}\n */ class UsernamesApi extends base_1.BaseAPI {\n    /**\n     * Fetch a proof for a username.\n     * @summary Proof for a username\n     * @param {UsernamesApiFetchUsernameProofByNameRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsernamesApi\n     * @returns {Promise<UserNameProof>} A promise that resolves to a `UserNameProof` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proof-by-name)\n     *\n     */ fetchUsernameProofByName(requestParameters, options) {\n        return (0, exports.UsernamesApiFp)(this.configuration).fetchUsernameProofByName(requestParameters.name, options).then((request)=>request(this.axios, this.basePath));\n    }\n    /**\n     * Fetch proofs provided by a user.\n     * @summary Proofs provided by an FID\n     * @param {UsernamesApiFetchUsernameProofsByFidRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UsernamesApi\n     * @returns {Promise<UsernameProofsResponse>} A promise that resolves to a `UsernameProofsResponse` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-username-proofs-by-fid)\n     *\n     */ fetchUsernameProofsByFid(requestParameters, options) {\n        return (0, exports.UsernamesApiFp)(this.configuration).fetchUsernameProofsByFid(requestParameters.fid, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.UsernamesApi = UsernamesApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/usernames-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/verifications-api.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/verifications-api.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.VerificationsApi = exports.VerificationsApiFactory = exports.VerificationsApiFp = exports.VerificationsApiAxiosParamCreator = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\");\n// @ts-ignore\nconst base_1 = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n * VerificationsApi - axios parameter creator\n * @export\n */ const VerificationsApiAxiosParamCreator = function(configuration) {\n    return {\n        /**\n         * Fetch verifications provided by a user.\n         * @summary Provided by an FID\n         * @param {number} fid The FID being requested\n         * @param {string} [address] The optional ETH address to filter by\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)\n         *\n         */ fetchVerificationsByFid: async (fid, address, pageSize, reverse, pageToken, options = {})=>{\n            // verify required parameter 'fid' is not null or undefined\n            (0, common_1.assertParamExists)(\"fetchVerificationsByFid\", \"fid\", fid);\n            const localVarPath = `/v1/verificationsByFid`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({\n                method: \"GET\"\n            }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication ApiKeyAuth required\n            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, \"x-api-key\", configuration);\n            if (fid !== undefined) {\n                localVarQueryParameter[\"fid\"] = fid;\n            }\n            if (address !== undefined) {\n                localVarQueryParameter[\"address\"] = address;\n            }\n            if (pageSize !== undefined) {\n                localVarQueryParameter[\"pageSize\"] = pageSize;\n            }\n            if (reverse !== undefined) {\n                localVarQueryParameter[\"reverse\"] = reverse;\n            }\n            if (pageToken !== undefined) {\n                localVarQueryParameter[\"pageToken\"] = pageToken;\n            }\n            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: (0, common_1.toPathString)(localVarUrlObj),\n                options: localVarRequestOptions\n            };\n        }\n    };\n};\nexports.VerificationsApiAxiosParamCreator = VerificationsApiAxiosParamCreator;\n/**\n * VerificationsApi - functional programming interface\n * @export\n */ const VerificationsApiFp = function(configuration) {\n    const localVarAxiosParamCreator = (0, exports.VerificationsApiAxiosParamCreator)(configuration);\n    return {\n        /**\n         * Fetch verifications provided by a user.\n         * @summary Provided by an FID\n         * @param {number} fid The FID being requested\n         * @param {string} [address] The optional ETH address to filter by\n         * @param {number} [pageSize] Maximum number of messages to return in a single response\n         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first\n         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)\n         *\n         */ async fetchVerificationsByFid (fid, address, pageSize, reverse, pageToken, options) {\n            var _a, _b, _c;\n            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchVerificationsByFid(fid, address, pageSize, reverse, pageToken, options);\n            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;\n            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap[\"VerificationsApi.fetchVerificationsByFid\"]) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;\n            return (axios, basePath)=>(0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        }\n    };\n};\nexports.VerificationsApiFp = VerificationsApiFp;\n/**\n * VerificationsApi - factory interface\n * @export\n */ const VerificationsApiFactory = function(configuration, basePath, axios) {\n    const localVarFp = (0, exports.VerificationsApiFp)(configuration);\n    return {\n        /**\n         * Fetch verifications provided by a user.\n         * @summary Provided by an FID\n         * @param {VerificationsApiFetchVerificationsByFidRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object\n         *\n         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)\n         *\n         */ fetchVerificationsByFid (requestParameters, options) {\n            return localVarFp.fetchVerificationsByFid(requestParameters.fid, requestParameters.address, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(axios, basePath));\n        }\n    };\n};\nexports.VerificationsApiFactory = VerificationsApiFactory;\n/**\n * VerificationsApi - object-oriented interface\n * @export\n * @class VerificationsApi\n * @extends {BaseAPI}\n */ class VerificationsApi extends base_1.BaseAPI {\n    /**\n     * Fetch verifications provided by a user.\n     * @summary Provided by an FID\n     * @param {VerificationsApiFetchVerificationsByFidRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VerificationsApi\n     * @returns {Promise<FetchVerificationsByFid200Response>} A promise that resolves to a `FetchVerificationsByFid200Response` object\n     *\n     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-verifications-by-fid)\n     *\n     */ fetchVerificationsByFid(requestParameters, options) {\n        return (0, exports.VerificationsApiFp)(this.configuration).fetchVerificationsByFid(requestParameters.fid, requestParameters.address, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request)=>request(this.axios, this.basePath));\n    }\n}\nexports.VerificationsApi = VerificationsApi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/apis/verifications-api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js":
/*!***************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.operationServerMap = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\nexports.BASE_PATH = \"https://hub-api.neynar.com\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */ exports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\t\",\n    pipes: \"|\"\n};\n/**\n *\n * @export\n * @class BaseAPI\n */ class BaseAPI {\n    constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default){\n        var _a;\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = (_a = configuration.basePath) !== null && _a !== void 0 ? _a : basePath;\n        }\n    }\n}\nexports.BaseAPI = BaseAPI;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */ class RequiredError extends Error {\n    constructor(field, msg){\n        super(msg);\n        this.field = field;\n        this.name = \"RequiredError\";\n    }\n}\nexports.RequiredError = RequiredError;\n/**\n *\n * @export\n */ exports.operationServerMap = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2h1Yi1hcGkvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtCQUFrQixHQUNsQixrQkFBa0IsR0FDbEI7Ozs7Ozs7Ozs7Q0FVQyxHQUNELElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLHFCQUFxQixHQUFHQSxlQUFlLEdBQUdBLDBCQUEwQixHQUFHQSxpQkFBaUIsR0FBRyxLQUFLO0FBQzdILE1BQU1PLFVBQVVaLGdCQUFnQmEsbUJBQU9BLENBQUMsNkRBQU87QUFDL0NSLGlCQUFpQixHQUFHLDZCQUE2QlMsT0FBTyxDQUFDLFFBQVE7QUFDakU7OztDQUdDLEdBQ0RULDBCQUEwQixHQUFHO0lBQ3pCVSxLQUFLO0lBQ0xDLEtBQUs7SUFDTEMsS0FBSztJQUNMQyxPQUFPO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ0QsTUFBTVQ7SUFDRlUsWUFBWUMsYUFBYSxFQUFFQyxXQUFXaEIsUUFBUU0sU0FBUyxFQUFFVyxRQUFRVixRQUFRVyxPQUFPLENBQUU7UUFDOUUsSUFBSUM7UUFDSixJQUFJLENBQUNILFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSUYsZUFBZTtZQUNmLElBQUksQ0FBQ0EsYUFBYSxHQUFHQTtZQUNyQixJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUFDRyxLQUFLSixjQUFjQyxRQUFRLE1BQU0sUUFBUUcsT0FBTyxLQUFLLElBQUlBLEtBQUtIO1FBQ25GO0lBQ0o7QUFDSjtBQUNBaEIsZUFBZSxHQUFHSTtBQUVsQjs7Ozs7Q0FLQyxHQUNELE1BQU1ELHNCQUFzQmlCO0lBQ3hCTixZQUFZTyxLQUFLLEVBQUVDLEdBQUcsQ0FBRTtRQUNwQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRCxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDRSxJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUNBdkIscUJBQXFCLEdBQUdHO0FBQ3hCOzs7Q0FHQyxHQUNESCwwQkFBMEIsR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFyY2FzdGVyc3RhdHMvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2h1Yi1hcGkvYmFzZS5qcz83MmM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIEZhcmNhc3RlciBIdWIgQVBJXG4gKiBQZXJmb3JtIGJhc2ljIHF1ZXJpZXMgb2YgRmFyY2FzdGVyIHN0YXRlIHZpYSB0aGUgUkVTVCBBUEkgb2YgYSBGYXJjYXN0ZXIgaHViLiBTZWUgdGhlIFtOZXluYXIgZG9jc10oaHR0cHM6Ly9kb2NzLm5leW5hci5jb20vcmVmZXJlbmNlKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAyLjM1LjBcbiAqIENvbnRhY3Q6IHRlYW1AbmV5bmFyLmNvbVxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vcGVyYXRpb25TZXJ2ZXJNYXAgPSBleHBvcnRzLlJlcXVpcmVkRXJyb3IgPSBleHBvcnRzLkJhc2VBUEkgPSBleHBvcnRzLkNPTExFQ1RJT05fRk9STUFUUyA9IGV4cG9ydHMuQkFTRV9QQVRIID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuZXhwb3J0cy5CQVNFX1BBVEggPSBcImh0dHBzOi8vaHViLWFwaS5uZXluYXIuY29tXCIucmVwbGFjZSgvXFwvKyQvLCBcIlwiKTtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5DT0xMRUNUSU9OX0ZPUk1BVFMgPSB7XG4gICAgY3N2OiBcIixcIixcbiAgICBzc3Y6IFwiIFwiLFxuICAgIHRzdjogXCJcXHRcIixcbiAgICBwaXBlczogXCJ8XCIsXG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIEJhc2VBUElcbiAqL1xuY2xhc3MgQmFzZUFQSSB7XG4gICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbiwgYmFzZVBhdGggPSBleHBvcnRzLkJBU0VfUEFUSCwgYXhpb3MgPSBheGlvc18xLmRlZmF1bHQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuYXhpb3MgPSBheGlvcztcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB0aGlzLmJhc2VQYXRoID0gKF9hID0gY29uZmlndXJhdGlvbi5iYXNlUGF0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYmFzZVBhdGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkJhc2VBUEkgPSBCYXNlQVBJO1xuO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIFJlcXVpcmVkRXJyb3JcbiAqIEBleHRlbmRzIHtFcnJvcn1cbiAqL1xuY2xhc3MgUmVxdWlyZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZCwgbXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSZXF1aXJlZEVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1aXJlZEVycm9yID0gUmVxdWlyZWRFcnJvcjtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5vcGVyYXRpb25TZXJ2ZXJNYXAgPSB7fTtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJvcGVyYXRpb25TZXJ2ZXJNYXAiLCJSZXF1aXJlZEVycm9yIiwiQmFzZUFQSSIsIkNPTExFQ1RJT05fRk9STUFUUyIsIkJBU0VfUEFUSCIsImF4aW9zXzEiLCJyZXF1aXJlIiwicmVwbGFjZSIsImNzdiIsInNzdiIsInRzdiIsInBpcGVzIiwiY29uc3RydWN0b3IiLCJjb25maWd1cmF0aW9uIiwiYmFzZVBhdGgiLCJheGlvcyIsImRlZmF1bHQiLCJfYSIsIkVycm9yIiwiZmllbGQiLCJtc2ciLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;\nconst base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/base.js\");\n/**\n *\n * @export\n */ exports.DUMMY_BASE_URL = \"https://example.com\";\n/**\n *\n * @throws {RequiredError}\n * @export\n */ const assertParamExists = function(functionName, paramName, paramValue) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n};\nexports.assertParamExists = assertParamExists;\n/**\n *\n * @export\n */ const setApiKeyToObject = async function(object, keyParamName, configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === \"function\" ? await configuration.apiKey(keyParamName) : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n};\nexports.setApiKeyToObject = setApiKeyToObject;\n/**\n *\n * @export\n */ const setBasicAuthToObject = function(object, configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = {\n            username: configuration.username,\n            password: configuration.password\n        };\n    }\n};\nexports.setBasicAuthToObject = setBasicAuthToObject;\n/**\n *\n * @export\n */ const setBearerAuthToObject = async function(object, configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === \"function\" ? await configuration.accessToken() : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n};\nexports.setBearerAuthToObject = setBearerAuthToObject;\n/**\n *\n * @export\n */ const setOAuthToObject = async function(object, name, scopes, configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === \"function\" ? await configuration.accessToken(name, scopes) : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n};\nexports.setOAuthToObject = setOAuthToObject;\nfunction setFlattenedQueryParams(urlSearchParams, parameter, key = \"\") {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            parameter.forEach((item)=>setFlattenedQueryParams(urlSearchParams, item, key));\n        } else {\n            Object.keys(parameter).forEach((currentKey)=>setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== \"\" ? \".\" : \"\"}${currentKey}`));\n        }\n    } else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n/**\n *\n * @export\n */ const setSearchParams = function(url, ...objects) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n};\nexports.setSearchParams = setSearchParams;\n/**\n *\n * @export\n */ const serializeDataIfNeeded = function(value, requestOptions, configuration) {\n    const nonString = typeof value !== \"string\";\n    const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers[\"Content-Type\"]) : nonString;\n    return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || \"\";\n};\nexports.serializeDataIfNeeded = serializeDataIfNeeded;\n/**\n *\n * @export\n */ const toPathString = function(url) {\n    return url.pathname + url.search + url.hash;\n};\nexports.toPathString = toPathString;\n/**\n *\n * @export\n */ const createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration) {\n    return (axios = globalAxios, basePath = BASE_PATH)=>{\n        var _a;\n        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), {\n            url: (axios.defaults.baseURL ? \"\" : (_a = configuration === null || configuration === void 0 ? void 0 : configuration.basePath) !== null && _a !== void 0 ? _a : basePath) + axiosArgs.url\n        });\n        return axios.request(axiosRequestArgs);\n    };\n};\nexports.createRequestFunction = createRequestFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2h1Yi1hcGkvY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2Isa0JBQWtCLEdBQ2xCLGtCQUFrQixHQUNsQjs7Ozs7Ozs7OztDQVVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBR0Esb0JBQW9CLEdBQUdBLDZCQUE2QixHQUFHQSx1QkFBdUIsR0FBR0Esd0JBQXdCLEdBQUdBLDZCQUE2QixHQUFHQSw0QkFBNEIsR0FBR0EseUJBQXlCLEdBQUdBLHlCQUF5QixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBQ2pTLE1BQU1ZLFNBQVNDLG1CQUFPQSxDQUFDLDZFQUFRO0FBQy9COzs7Q0FHQyxHQUNEYixzQkFBc0IsR0FBRztBQUN6Qjs7OztDQUlDLEdBQ0QsTUFBTVUsb0JBQW9CLFNBQVVJLFlBQVksRUFBRUMsU0FBUyxFQUFFQyxVQUFVO0lBQ25FLElBQUlBLGVBQWUsUUFBUUEsZUFBZUMsV0FBVztRQUNqRCxNQUFNLElBQUlMLE9BQU9NLGFBQWEsQ0FBQ0gsV0FBVyxDQUFDLG1CQUFtQixFQUFFQSxVQUFVLG9DQUFvQyxFQUFFRCxhQUFhLENBQUMsQ0FBQztJQUNuSTtBQUNKO0FBQ0FkLHlCQUF5QixHQUFHVTtBQUM1Qjs7O0NBR0MsR0FDRCxNQUFNRCxvQkFBb0IsZUFBZ0JVLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxhQUFhO0lBQ3pFLElBQUlBLGlCQUFpQkEsY0FBY0MsTUFBTSxFQUFFO1FBQ3ZDLE1BQU1DLHNCQUFzQixPQUFPRixjQUFjQyxNQUFNLEtBQUssYUFDdEQsTUFBTUQsY0FBY0MsTUFBTSxDQUFDRixnQkFDM0IsTUFBTUMsY0FBY0MsTUFBTTtRQUNoQ0gsTUFBTSxDQUFDQyxhQUFhLEdBQUdHO0lBQzNCO0FBQ0o7QUFDQXZCLHlCQUF5QixHQUFHUztBQUM1Qjs7O0NBR0MsR0FDRCxNQUFNRCx1QkFBdUIsU0FBVVcsTUFBTSxFQUFFRSxhQUFhO0lBQ3hELElBQUlBLGlCQUFrQkEsQ0FBQUEsY0FBY0csUUFBUSxJQUFJSCxjQUFjSSxRQUFRLEdBQUc7UUFDckVOLE1BQU0sQ0FBQyxPQUFPLEdBQUc7WUFBRUssVUFBVUgsY0FBY0csUUFBUTtZQUFFQyxVQUFVSixjQUFjSSxRQUFRO1FBQUM7SUFDMUY7QUFDSjtBQUNBekIsNEJBQTRCLEdBQUdRO0FBQy9COzs7Q0FHQyxHQUNELE1BQU1ELHdCQUF3QixlQUFnQlksTUFBTSxFQUFFRSxhQUFhO0lBQy9ELElBQUlBLGlCQUFpQkEsY0FBY0ssV0FBVyxFQUFFO1FBQzVDLE1BQU1BLGNBQWMsT0FBT0wsY0FBY0ssV0FBVyxLQUFLLGFBQ25ELE1BQU1MLGNBQWNLLFdBQVcsS0FDL0IsTUFBTUwsY0FBY0ssV0FBVztRQUNyQ1AsTUFBTSxDQUFDLGdCQUFnQixHQUFHLFlBQVlPO0lBQzFDO0FBQ0o7QUFDQTFCLDZCQUE2QixHQUFHTztBQUNoQzs7O0NBR0MsR0FDRCxNQUFNRCxtQkFBbUIsZUFBZ0JhLE1BQU0sRUFBRVEsSUFBSSxFQUFFQyxNQUFNLEVBQUVQLGFBQWE7SUFDeEUsSUFBSUEsaUJBQWlCQSxjQUFjSyxXQUFXLEVBQUU7UUFDNUMsTUFBTUcsMkJBQTJCLE9BQU9SLGNBQWNLLFdBQVcsS0FBSyxhQUNoRSxNQUFNTCxjQUFjSyxXQUFXLENBQUNDLE1BQU1DLFVBQ3RDLE1BQU1QLGNBQWNLLFdBQVc7UUFDckNQLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxZQUFZVTtJQUMxQztBQUNKO0FBQ0E3Qix3QkFBd0IsR0FBR007QUFDM0IsU0FBU3dCLHdCQUF3QkMsZUFBZSxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sRUFBRTtJQUNqRSxJQUFJRCxhQUFhLE1BQ2I7SUFDSixJQUFJLE9BQU9BLGNBQWMsVUFBVTtRQUMvQixJQUFJRSxNQUFNQyxPQUFPLENBQUNILFlBQVk7WUFDMUJBLFVBQVVJLE9BQU8sQ0FBQ0MsQ0FBQUEsT0FBUVAsd0JBQXdCQyxpQkFBaUJNLE1BQU1KO1FBQzdFLE9BQ0s7WUFDRG5DLE9BQU93QyxJQUFJLENBQUNOLFdBQVdJLE9BQU8sQ0FBQ0csQ0FBQUEsYUFBY1Qsd0JBQXdCQyxpQkFBaUJDLFNBQVMsQ0FBQ08sV0FBVyxFQUFFLENBQUMsRUFBRU4sSUFBSSxFQUFFQSxRQUFRLEtBQUssTUFBTSxHQUFHLEVBQUVNLFdBQVcsQ0FBQztRQUM5SjtJQUNKLE9BQ0s7UUFDRCxJQUFJUixnQkFBZ0JTLEdBQUcsQ0FBQ1AsTUFBTTtZQUMxQkYsZ0JBQWdCVSxNQUFNLENBQUNSLEtBQUtEO1FBQ2hDLE9BQ0s7WUFDREQsZ0JBQWdCVyxHQUFHLENBQUNULEtBQUtEO1FBQzdCO0lBQ0o7QUFDSjtBQUNBOzs7Q0FHQyxHQUNELE1BQU0zQixrQkFBa0IsU0FBVXNDLEdBQUcsRUFBRSxHQUFHQyxPQUFPO0lBQzdDLE1BQU1DLGVBQWUsSUFBSUMsZ0JBQWdCSCxJQUFJSSxNQUFNO0lBQ25EakIsd0JBQXdCZSxjQUFjRDtJQUN0Q0QsSUFBSUksTUFBTSxHQUFHRixhQUFhRyxRQUFRO0FBQ3RDO0FBQ0FoRCx1QkFBdUIsR0FBR0s7QUFDMUI7OztDQUdDLEdBQ0QsTUFBTUQsd0JBQXdCLFNBQVVILEtBQUssRUFBRWdELGNBQWMsRUFBRTVCLGFBQWE7SUFDeEUsTUFBTTZCLFlBQVksT0FBT2pELFVBQVU7SUFDbkMsTUFBTWtELHFCQUFxQkQsYUFBYTdCLGlCQUFpQkEsY0FBYytCLFVBQVUsR0FDM0UvQixjQUFjK0IsVUFBVSxDQUFDSCxlQUFlSSxPQUFPLENBQUMsZUFBZSxJQUMvREg7SUFDTixPQUFPQyxxQkFDREcsS0FBS0MsU0FBUyxDQUFDdEQsVUFBVWdCLFlBQVloQixRQUFRLENBQUMsS0FDN0NBLFNBQVM7QUFDcEI7QUFDQUQsNkJBQTZCLEdBQUdJO0FBQ2hDOzs7Q0FHQyxHQUNELE1BQU1ELGVBQWUsU0FBVXdDLEdBQUc7SUFDOUIsT0FBT0EsSUFBSWEsUUFBUSxHQUFHYixJQUFJSSxNQUFNLEdBQUdKLElBQUljLElBQUk7QUFDL0M7QUFDQXpELG9CQUFvQixHQUFHRztBQUN2Qjs7O0NBR0MsR0FDRCxNQUFNRCx3QkFBd0IsU0FBVXdELFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUV2QyxhQUFhO0lBQ3BGLE9BQU8sQ0FBQ3dDLFFBQVFGLFdBQVcsRUFBRUcsV0FBV0YsU0FBUztRQUM3QyxJQUFJRztRQUNKLE1BQU1DLG1CQUFtQmxFLE9BQU9tRSxNQUFNLENBQUNuRSxPQUFPbUUsTUFBTSxDQUFDLENBQUMsR0FBR1AsVUFBVVEsT0FBTyxHQUFHO1lBQUV2QixLQUFLLENBQUNrQixNQUFNTSxRQUFRLENBQUNDLE9BQU8sR0FBRyxLQUFLLENBQUNMLEtBQUsxQyxrQkFBa0IsUUFBUUEsa0JBQWtCLEtBQUssSUFBSSxLQUFLLElBQUlBLGNBQWN5QyxRQUFRLE1BQU0sUUFBUUMsT0FBTyxLQUFLLElBQUlBLEtBQUtELFFBQU8sSUFBS0osVUFBVWYsR0FBRztRQUFDO1FBQzFRLE9BQU9rQixNQUFNUSxPQUFPLENBQUNMO0lBQ3pCO0FBQ0o7QUFDQWhFLDZCQUE2QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZhcmNhc3RlcnN0YXRzLy4vbm9kZV9tb2R1bGVzL0BuZXluYXIvbm9kZWpzLXNkay9idWlsZC9odWItYXBpL2NvbW1vbi5qcz80YjQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIEZhcmNhc3RlciBIdWIgQVBJXG4gKiBQZXJmb3JtIGJhc2ljIHF1ZXJpZXMgb2YgRmFyY2FzdGVyIHN0YXRlIHZpYSB0aGUgUkVTVCBBUEkgb2YgYSBGYXJjYXN0ZXIgaHViLiBTZWUgdGhlIFtOZXluYXIgZG9jc10oaHR0cHM6Ly9kb2NzLm5leW5hci5jb20vcmVmZXJlbmNlKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAyLjM1LjBcbiAqIENvbnRhY3Q6IHRlYW1AbmV5bmFyLmNvbVxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24gPSBleHBvcnRzLnRvUGF0aFN0cmluZyA9IGV4cG9ydHMuc2VyaWFsaXplRGF0YUlmTmVlZGVkID0gZXhwb3J0cy5zZXRTZWFyY2hQYXJhbXMgPSBleHBvcnRzLnNldE9BdXRoVG9PYmplY3QgPSBleHBvcnRzLnNldEJlYXJlckF1dGhUb09iamVjdCA9IGV4cG9ydHMuc2V0QmFzaWNBdXRoVG9PYmplY3QgPSBleHBvcnRzLnNldEFwaUtleVRvT2JqZWN0ID0gZXhwb3J0cy5hc3NlcnRQYXJhbUV4aXN0cyA9IGV4cG9ydHMuRFVNTVlfQkFTRV9VUkwgPSB2b2lkIDA7XG5jb25zdCBiYXNlXzEgPSByZXF1aXJlKFwiLi9iYXNlXCIpO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLkRVTU1ZX0JBU0VfVVJMID0gJ2h0dHBzOi8vZXhhbXBsZS5jb20nO1xuLyoqXG4gKlxuICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgYXNzZXJ0UGFyYW1FeGlzdHMgPSBmdW5jdGlvbiAoZnVuY3Rpb25OYW1lLCBwYXJhbU5hbWUsIHBhcmFtVmFsdWUpIHtcbiAgICBpZiAocGFyYW1WYWx1ZSA9PT0gbnVsbCB8fCBwYXJhbVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGJhc2VfMS5SZXF1aXJlZEVycm9yKHBhcmFtTmFtZSwgYFJlcXVpcmVkIHBhcmFtZXRlciAke3BhcmFtTmFtZX0gd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyAke2Z1bmN0aW9uTmFtZX0uYCk7XG4gICAgfVxufTtcbmV4cG9ydHMuYXNzZXJ0UGFyYW1FeGlzdHMgPSBhc3NlcnRQYXJhbUV4aXN0cztcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuY29uc3Qgc2V0QXBpS2V5VG9PYmplY3QgPSBhc3luYyBmdW5jdGlvbiAob2JqZWN0LCBrZXlQYXJhbU5hbWUsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGF3YWl0IGNvbmZpZ3VyYXRpb24uYXBpS2V5KGtleVBhcmFtTmFtZSlcbiAgICAgICAgICAgIDogYXdhaXQgY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgIG9iamVjdFtrZXlQYXJhbU5hbWVdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICB9XG59O1xuZXhwb3J0cy5zZXRBcGlLZXlUb09iamVjdCA9IHNldEFwaUtleVRvT2JqZWN0O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5jb25zdCBzZXRCYXNpY0F1dGhUb09iamVjdCA9IGZ1bmN0aW9uIChvYmplY3QsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICBpZiAoY29uZmlndXJhdGlvbiAmJiAoY29uZmlndXJhdGlvbi51c2VybmFtZSB8fCBjb25maWd1cmF0aW9uLnBhc3N3b3JkKSkge1xuICAgICAgICBvYmplY3RbXCJhdXRoXCJdID0geyB1c2VybmFtZTogY29uZmlndXJhdGlvbi51c2VybmFtZSwgcGFzc3dvcmQ6IGNvbmZpZ3VyYXRpb24ucGFzc3dvcmQgfTtcbiAgICB9XG59O1xuZXhwb3J0cy5zZXRCYXNpY0F1dGhUb09iamVjdCA9IHNldEJhc2ljQXV0aFRvT2JqZWN0O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5jb25zdCBzZXRCZWFyZXJBdXRoVG9PYmplY3QgPSBhc3luYyBmdW5jdGlvbiAob2JqZWN0LCBjb25maWd1cmF0aW9uKSB7XG4gICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hY2Nlc3NUb2tlbikge1xuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGF3YWl0IGNvbmZpZ3VyYXRpb24uYWNjZXNzVG9rZW4oKVxuICAgICAgICAgICAgOiBhd2FpdCBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuO1xuICAgICAgICBvYmplY3RbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyBhY2Nlc3NUb2tlbjtcbiAgICB9XG59O1xuZXhwb3J0cy5zZXRCZWFyZXJBdXRoVG9PYmplY3QgPSBzZXRCZWFyZXJBdXRoVG9PYmplY3Q7XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmNvbnN0IHNldE9BdXRoVG9PYmplY3QgPSBhc3luYyBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBzY29wZXMsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsVmFyQWNjZXNzVG9rZW5WYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGF3YWl0IGNvbmZpZ3VyYXRpb24uYWNjZXNzVG9rZW4obmFtZSwgc2NvcGVzKVxuICAgICAgICAgICAgOiBhd2FpdCBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuO1xuICAgICAgICBvYmplY3RbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyBsb2NhbFZhckFjY2Vzc1Rva2VuVmFsdWU7XG4gICAgfVxufTtcbmV4cG9ydHMuc2V0T0F1dGhUb09iamVjdCA9IHNldE9BdXRoVG9PYmplY3Q7XG5mdW5jdGlvbiBzZXRGbGF0dGVuZWRRdWVyeVBhcmFtcyh1cmxTZWFyY2hQYXJhbXMsIHBhcmFtZXRlciwga2V5ID0gXCJcIikge1xuICAgIGlmIChwYXJhbWV0ZXIgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgcGFyYW1ldGVyID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtZXRlcikpIHtcbiAgICAgICAgICAgIHBhcmFtZXRlci5mb3JFYWNoKGl0ZW0gPT4gc2V0RmxhdHRlbmVkUXVlcnlQYXJhbXModXJsU2VhcmNoUGFyYW1zLCBpdGVtLCBrZXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcikuZm9yRWFjaChjdXJyZW50S2V5ID0+IHNldEZsYXR0ZW5lZFF1ZXJ5UGFyYW1zKHVybFNlYXJjaFBhcmFtcywgcGFyYW1ldGVyW2N1cnJlbnRLZXldLCBgJHtrZXl9JHtrZXkgIT09ICcnID8gJy4nIDogJyd9JHtjdXJyZW50S2V5fWApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHVybFNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdXJsU2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHBhcmFtZXRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1cmxTZWFyY2hQYXJhbXMuc2V0KGtleSwgcGFyYW1ldGVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuY29uc3Qgc2V0U2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKHVybCwgLi4ub2JqZWN0cykge1xuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXModXJsLnNlYXJjaCk7XG4gICAgc2V0RmxhdHRlbmVkUXVlcnlQYXJhbXMoc2VhcmNoUGFyYW1zLCBvYmplY3RzKTtcbiAgICB1cmwuc2VhcmNoID0gc2VhcmNoUGFyYW1zLnRvU3RyaW5nKCk7XG59O1xuZXhwb3J0cy5zZXRTZWFyY2hQYXJhbXMgPSBzZXRTZWFyY2hQYXJhbXM7XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmNvbnN0IHNlcmlhbGl6ZURhdGFJZk5lZWRlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgcmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zdCBub25TdHJpbmcgPSB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnO1xuICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9IG5vblN0cmluZyAmJiBjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uaXNKc29uTWltZVxuICAgICAgICA/IGNvbmZpZ3VyYXRpb24uaXNKc29uTWltZShyZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSlcbiAgICAgICAgOiBub25TdHJpbmc7XG4gICAgcmV0dXJuIG5lZWRzU2VyaWFsaXphdGlvblxuICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KVxuICAgICAgICA6ICh2YWx1ZSB8fCBcIlwiKTtcbn07XG5leHBvcnRzLnNlcmlhbGl6ZURhdGFJZk5lZWRlZCA9IHNlcmlhbGl6ZURhdGFJZk5lZWRlZDtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuY29uc3QgdG9QYXRoU3RyaW5nID0gZnVuY3Rpb24gKHVybCkge1xuICAgIHJldHVybiB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoICsgdXJsLmhhc2g7XG59O1xuZXhwb3J0cy50b1BhdGhTdHJpbmcgPSB0b1BhdGhTdHJpbmc7XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmNvbnN0IGNyZWF0ZVJlcXVlc3RGdW5jdGlvbiA9IGZ1bmN0aW9uIChheGlvc0FyZ3MsIGdsb2JhbEF4aW9zLCBCQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4gKGF4aW9zID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXhpb3NBcmdzLm9wdGlvbnMpLCB7IHVybDogKGF4aW9zLmRlZmF1bHRzLmJhc2VVUkwgPyAnJyA6IChfYSA9IGNvbmZpZ3VyYXRpb24gPT09IG51bGwgfHwgY29uZmlndXJhdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlndXJhdGlvbi5iYXNlUGF0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYmFzZVBhdGgpICsgYXhpb3NBcmdzLnVybCB9KTtcbiAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgfTtcbn07XG5leHBvcnRzLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbiA9IGNyZWF0ZVJlcXVlc3RGdW5jdGlvbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZVJlcXVlc3RGdW5jdGlvbiIsInRvUGF0aFN0cmluZyIsInNlcmlhbGl6ZURhdGFJZk5lZWRlZCIsInNldFNlYXJjaFBhcmFtcyIsInNldE9BdXRoVG9PYmplY3QiLCJzZXRCZWFyZXJBdXRoVG9PYmplY3QiLCJzZXRCYXNpY0F1dGhUb09iamVjdCIsInNldEFwaUtleVRvT2JqZWN0IiwiYXNzZXJ0UGFyYW1FeGlzdHMiLCJEVU1NWV9CQVNFX1VSTCIsImJhc2VfMSIsInJlcXVpcmUiLCJmdW5jdGlvbk5hbWUiLCJwYXJhbU5hbWUiLCJwYXJhbVZhbHVlIiwidW5kZWZpbmVkIiwiUmVxdWlyZWRFcnJvciIsIm9iamVjdCIsImtleVBhcmFtTmFtZSIsImNvbmZpZ3VyYXRpb24iLCJhcGlLZXkiLCJsb2NhbFZhckFwaUtleVZhbHVlIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImFjY2Vzc1Rva2VuIiwibmFtZSIsInNjb3BlcyIsImxvY2FsVmFyQWNjZXNzVG9rZW5WYWx1ZSIsInNldEZsYXR0ZW5lZFF1ZXJ5UGFyYW1zIiwidXJsU2VhcmNoUGFyYW1zIiwicGFyYW1ldGVyIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsIml0ZW0iLCJrZXlzIiwiY3VycmVudEtleSIsImhhcyIsImFwcGVuZCIsInNldCIsInVybCIsIm9iamVjdHMiLCJzZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJzZWFyY2giLCJ0b1N0cmluZyIsInJlcXVlc3RPcHRpb25zIiwibm9uU3RyaW5nIiwibmVlZHNTZXJpYWxpemF0aW9uIiwiaXNKc29uTWltZSIsImhlYWRlcnMiLCJKU09OIiwic3RyaW5naWZ5IiwicGF0aG5hbWUiLCJoYXNoIiwiYXhpb3NBcmdzIiwiZ2xvYmFsQXhpb3MiLCJCQVNFX1BBVEgiLCJheGlvcyIsImJhc2VQYXRoIiwiX2EiLCJheGlvc1JlcXVlc3RBcmdzIiwiYXNzaWduIiwib3B0aW9ucyIsImRlZmF1bHRzIiwiYmFzZVVSTCIsInJlcXVlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/configuration.js":
/*!************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/hub-api/configuration.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* tslint:disable */ /* eslint-disable */ /**\n * Farcaster Hub API\n * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.\n *\n * The version of the OpenAPI document: 2.35.0\n * Contact: team@neynar.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Configuration = void 0;\nclass Configuration {\n    constructor(param){\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.serverIndex = param.serverIndex;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */ isJsonMime(mime) {\n        const jsonMime = new RegExp(\"^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$\", \"i\");\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === \"application/json-patch+json\");\n    }\n}\nexports.Configuration = Configuration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2h1Yi1hcGkvY29uZmlndXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtCQUFrQixHQUNsQixrQkFBa0IsR0FDbEI7Ozs7Ozs7Ozs7Q0FVQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRTtJQUNGQyxZQUFZQyxLQUFLLENBQUU7UUFDZixJQUFJLENBQUNDLE1BQU0sR0FBR0QsTUFBTUMsTUFBTTtRQUMxQixJQUFJLENBQUNDLFFBQVEsR0FBR0YsTUFBTUUsUUFBUTtRQUM5QixJQUFJLENBQUNDLFFBQVEsR0FBR0gsTUFBTUcsUUFBUTtRQUM5QixJQUFJLENBQUNDLFdBQVcsR0FBR0osTUFBTUksV0FBVztRQUNwQyxJQUFJLENBQUNDLFFBQVEsR0FBR0wsTUFBTUssUUFBUTtRQUM5QixJQUFJLENBQUNDLFdBQVcsR0FBR04sTUFBTU0sV0FBVztRQUNwQyxJQUFJLENBQUNDLFdBQVcsR0FBR1AsTUFBTU8sV0FBVztRQUNwQyxJQUFJLENBQUNDLFlBQVksR0FBR1IsTUFBTVEsWUFBWTtJQUMxQztJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNEQyxXQUFXQyxJQUFJLEVBQUU7UUFDYixNQUFNQyxXQUFXLElBQUlDLE9BQU8sNERBQWlFO1FBQzdGLE9BQU9GLFNBQVMsUUFBU0MsQ0FBQUEsU0FBU0UsSUFBSSxDQUFDSCxTQUFTQSxLQUFLSSxXQUFXLE9BQU8sNkJBQTRCO0lBQ3ZHO0FBQ0o7QUFDQWxCLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZhcmNhc3RlcnN0YXRzLy4vbm9kZV9tb2R1bGVzL0BuZXluYXIvbm9kZWpzLXNkay9idWlsZC9odWItYXBpL2NvbmZpZ3VyYXRpb24uanM/N2I3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBGYXJjYXN0ZXIgSHViIEFQSVxuICogUGVyZm9ybSBiYXNpYyBxdWVyaWVzIG9mIEZhcmNhc3RlciBzdGF0ZSB2aWEgdGhlIFJFU1QgQVBJIG9mIGEgRmFyY2FzdGVyIGh1Yi4gU2VlIHRoZSBbTmV5bmFyIGRvY3NdKGh0dHBzOi8vZG9jcy5uZXluYXIuY29tL3JlZmVyZW5jZSkgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMi4zNS4wXG4gKiBDb250YWN0OiB0ZWFtQG5leW5hci5jb21cbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IHZvaWQgMDtcbmNsYXNzIENvbmZpZ3VyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtKSB7XG4gICAgICAgIHRoaXMuYXBpS2V5ID0gcGFyYW0uYXBpS2V5O1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gcGFyYW0udXNlcm5hbWU7XG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBwYXJhbS5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHBhcmFtLmFjY2Vzc1Rva2VuO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gcGFyYW0uYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuc2VydmVySW5kZXggPSBwYXJhbS5zZXJ2ZXJJbmRleDtcbiAgICAgICAgdGhpcy5iYXNlT3B0aW9ucyA9IHBhcmFtLmJhc2VPcHRpb25zO1xuICAgICAgICB0aGlzLmZvcm1EYXRhQ3RvciA9IHBhcmFtLmZvcm1EYXRhQ3RvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIE1JTUUgaXMgYSBKU09OIE1JTUUuXG4gICAgICogSlNPTiBNSU1FIGV4YW1wbGVzOlxuICAgICAqICAgYXBwbGljYXRpb24vanNvblxuICAgICAqICAgYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEY4XG4gICAgICogICBBUFBMSUNBVElPTi9KU09OXG4gICAgICogICBhcHBsaWNhdGlvbi92bmQuY29tcGFueStqc29uXG4gICAgICogQHBhcmFtIG1pbWUgLSBNSU1FIChNdWx0aXB1cnBvc2UgSW50ZXJuZXQgTWFpbCBFeHRlbnNpb25zKVxuICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZ2l2ZW4gTUlNRSBpcyBKU09OLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgaXNKc29uTWltZShtaW1lKSB7XG4gICAgICAgIGNvbnN0IGpzb25NaW1lID0gbmV3IFJlZ0V4cCgnXihhcHBsaWNhdGlvblxcL2pzb258W147LyBcXHRdK1xcL1teOy8gXFx0XStbK11qc29uKVsgXFx0XSooOy4qKT8kJywgJ2knKTtcbiAgICAgICAgcmV0dXJuIG1pbWUgIT09IG51bGwgJiYgKGpzb25NaW1lLnRlc3QobWltZSkgfHwgbWltZS50b0xvd2VyQ2FzZSgpID09PSAnYXBwbGljYXRpb24vanNvbi1wYXRjaCtqc29uJyk7XG4gICAgfVxufVxuZXhwb3J0cy5Db25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNvbmZpZ3VyYXRpb24iLCJjb25zdHJ1Y3RvciIsInBhcmFtIiwiYXBpS2V5IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImFjY2Vzc1Rva2VuIiwiYmFzZVBhdGgiLCJzZXJ2ZXJJbmRleCIsImJhc2VPcHRpb25zIiwiZm9ybURhdGFDdG9yIiwiaXNKc29uTWltZSIsIm1pbWUiLCJqc29uTWltZSIsIlJlZ0V4cCIsInRlc3QiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/hub-api/configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Configuration = void 0;\nconst semver = __webpack_require__(/*! semver */ \"(rsc)/./node_modules/semver/index.js\");\nconst requiredVersion = (__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/package.json\").engines.node);\n// Check Node.js version before requiring/doing anything else\nif (!semver.satisfies(process.version, requiredVersion)) {\n    console.error(`Unsupported Node.js version! Your version: ${process.version}. Required version: ${requiredVersion}.`);\n    process.exit(1);\n}\n__exportStar(__webpack_require__(/*! ./clients */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/utils/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/types/index.js\"), exports);\nvar configuration_1 = __webpack_require__(/*! ./clients/configuration */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/clients/configuration.js\");\nObject.defineProperty(exports, \"Configuration\", ({\n    enumerable: true,\n    get: function() {\n        return configuration_1.Configuration;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1PLFNBQVNDLG1CQUFPQSxDQUFDLG9EQUFRO0FBQy9CLE1BQU1DLGtCQUFrQkQsaUhBQXVDO0FBQy9ELDZEQUE2RDtBQUM3RCxJQUFJLENBQUNELE9BQU9LLFNBQVMsQ0FBQ0MsUUFBUUMsT0FBTyxFQUFFTCxrQkFBa0I7SUFDckRNLFFBQVFDLEtBQUssQ0FBQyxDQUFDLDJDQUEyQyxFQUFFSCxRQUFRQyxPQUFPLENBQUMsb0JBQW9CLEVBQUVMLGdCQUFnQixDQUFDLENBQUM7SUFDcEhJLFFBQVFJLElBQUksQ0FBQztBQUNqQjtBQUNBbEIsYUFBYVMsbUJBQU9BLENBQUMsaUZBQVcsR0FBR1I7QUFDbkNELGFBQWFTLG1CQUFPQSxDQUFDLDZFQUFTLEdBQUdSO0FBQ2pDRCxhQUFhUyxtQkFBT0EsQ0FBQyw2RUFBUyxHQUFHUjtBQUNqQyxJQUFJa0Isa0JBQWtCVixtQkFBT0EsQ0FBQyx1R0FBeUI7QUFDdkR4QixpREFBZ0Q7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT3FCLGdCQUFnQlosYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFyY2FzdGVyc3RhdHMvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL2luZGV4LmpzP2UzNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHNlbXZlciA9IHJlcXVpcmUoXCJzZW12ZXJcIik7XG5jb25zdCByZXF1aXJlZFZlcnNpb24gPSByZXF1aXJlKFwiLi4vcGFja2FnZS5qc29uXCIpLmVuZ2luZXMubm9kZTtcbi8vIENoZWNrIE5vZGUuanMgdmVyc2lvbiBiZWZvcmUgcmVxdWlyaW5nL2RvaW5nIGFueXRoaW5nIGVsc2VcbmlmICghc2VtdmVyLnNhdGlzZmllcyhwcm9jZXNzLnZlcnNpb24sIHJlcXVpcmVkVmVyc2lvbikpIHtcbiAgICBjb25zb2xlLmVycm9yKGBVbnN1cHBvcnRlZCBOb2RlLmpzIHZlcnNpb24hIFlvdXIgdmVyc2lvbjogJHtwcm9jZXNzLnZlcnNpb259LiBSZXF1aXJlZCB2ZXJzaW9uOiAke3JlcXVpcmVkVmVyc2lvbn0uYCk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xufVxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NsaWVudHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG52YXIgY29uZmlndXJhdGlvbl8xID0gcmVxdWlyZShcIi4vY2xpZW50cy9jb25maWd1cmF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29uZmlndXJhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlndXJhdGlvbl8xLkNvbmZpZ3VyYXRpb247IH0gfSk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsIkNvbmZpZ3VyYXRpb24iLCJzZW12ZXIiLCJyZXF1aXJlIiwicmVxdWlyZWRWZXJzaW9uIiwiZW5naW5lcyIsIm5vZGUiLCJzYXRpc2ZpZXMiLCJwcm9jZXNzIiwidmVyc2lvbiIsImNvbnNvbGUiLCJlcnJvciIsImV4aXQiLCJjb25maWd1cmF0aW9uXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/types/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/types/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./webhooks */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/types/webhooks.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL3R5cGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETixhQUFhTyxtQkFBT0EsQ0FBQyxtRkFBWSxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZhcmNhc3RlcnN0YXRzLy4vbm9kZV9tb2R1bGVzL0BuZXluYXIvbm9kZWpzLXNkay9idWlsZC90eXBlcy9pbmRleC5qcz83OTIyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2ViaG9va3NcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/types/webhooks.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/types/webhooks.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL3R5cGVzL3dlYmhvb2tzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFyY2FzdGVyc3RhdHMvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL3R5cGVzL3dlYmhvb2tzLmpzPzEzNWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/types/webhooks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/utils/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/utils/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./is-api-error-response */ \"(rsc)/./node_modules/@neynar/nodejs-sdk/build/utils/is-api-error-response.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL3V0aWxzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETixhQUFhTyxtQkFBT0EsQ0FBQyw2R0FBeUIsR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYXJjYXN0ZXJzdGF0cy8uL25vZGVfbW9kdWxlcy9AbmV5bmFyL25vZGVqcy1zZGsvYnVpbGQvdXRpbHMvaW5kZXguanM/YTZlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2lzLWFwaS1lcnJvci1yZXNwb25zZVwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/build/utils/is-api-error-response.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/build/utils/is-api-error-response.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isApiErrorResponse = void 0;\nconst axios_1 = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\n/**\n * Utility for parsing errors returned by the Neynar API servers. Returns true\n * if the given error is caused by an error response from the server, and\n * narrows the type of `error` accordingly.\n */ const isApiErrorResponse = (// eslint-disable-next-line @typescript-eslint/no-explicit-any\nerror)=>{\n    var _a;\n    if (!(error instanceof axios_1.AxiosError)) return false;\n    return ((_a = error.response) === null || _a === void 0 ? void 0 : _a.data) !== undefined && \"message\" in error.response.data;\n};\nexports.isApiErrorResponse = isApiErrorResponse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leW5hci9ub2RlanMtc2RrL2J1aWxkL3V0aWxzL2lzLWFwaS1lcnJvci1yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUcsS0FBSztBQUNsQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyw2REFBTztBQUMvQjs7OztDQUlDLEdBQ0QsTUFBTUYscUJBQXFCLENBQzNCLDhEQUE4RDtBQUM5REc7SUFDSSxJQUFJQztJQUNKLElBQUksQ0FBRUQsQ0FBQUEsaUJBQWlCRixRQUFRSSxVQUFVLEdBQ3JDLE9BQU87SUFDWCxPQUFPLENBQUMsQ0FBQ0QsS0FBS0QsTUFBTUcsUUFBUSxNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0csSUFBSSxNQUFNQyxhQUFhLGFBQWFMLE1BQU1HLFFBQVEsQ0FBQ0MsSUFBSTtBQUNqSTtBQUNBVCwwQkFBMEIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYXJjYXN0ZXJzdGF0cy8uL25vZGVfbW9kdWxlcy9AbmV5bmFyL25vZGVqcy1zZGsvYnVpbGQvdXRpbHMvaXMtYXBpLWVycm9yLXJlc3BvbnNlLmpzPzhkMDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQXBpRXJyb3JSZXNwb25zZSA9IHZvaWQgMDtcbmNvbnN0IGF4aW9zXzEgPSByZXF1aXJlKFwiYXhpb3NcIik7XG4vKipcbiAqIFV0aWxpdHkgZm9yIHBhcnNpbmcgZXJyb3JzIHJldHVybmVkIGJ5IHRoZSBOZXluYXIgQVBJIHNlcnZlcnMuIFJldHVybnMgdHJ1ZVxuICogaWYgdGhlIGdpdmVuIGVycm9yIGlzIGNhdXNlZCBieSBhbiBlcnJvciByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIsIGFuZFxuICogbmFycm93cyB0aGUgdHlwZSBvZiBgZXJyb3JgIGFjY29yZGluZ2x5LlxuICovXG5jb25zdCBpc0FwaUVycm9yUmVzcG9uc2UgPSAoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXJyb3IpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBheGlvc18xLkF4aW9zRXJyb3IpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICgoX2EgPSBlcnJvci5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRhdGEpICE9PSB1bmRlZmluZWQgJiYgXCJtZXNzYWdlXCIgaW4gZXJyb3IucmVzcG9uc2UuZGF0YTtcbn07XG5leHBvcnRzLmlzQXBpRXJyb3JSZXNwb25zZSA9IGlzQXBpRXJyb3JSZXNwb25zZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQXBpRXJyb3JSZXNwb25zZSIsImF4aW9zXzEiLCJyZXF1aXJlIiwiZXJyb3IiLCJfYSIsIkF4aW9zRXJyb3IiLCJyZXNwb25zZSIsImRhdGEiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@neynar/nodejs-sdk/build/utils/is-api-error-response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@neynar/nodejs-sdk/package.json":
/*!******************************************************!*\
  !*** ./node_modules/@neynar/nodejs-sdk/package.json ***!
  \******************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@neynar/nodejs-sdk","version":"2.44.0","description":"SDK to interact with Neynar APIs (https://docs.neynar.com/reference/quickstart)","main":"./build/index.js","types":"./build/index.d.ts","files":["build/**/*","v1-to-v2-migration.md"],"scripts":{"clean":"del-cli ./build/*","build":"yarn run clean && tsc","generate:api":"del-cli src/api && openapi-generator-cli generate -i ./oas/src/v2/spec.yaml -g typescript-axios -o ./src/api --config ./openapi-generator-config.json --inline-schema-options \'REFACTOR_ALLOF_INLINE_SCHEMAS=true\'","generate:hub-api":"del-cli src/hub-api && openapi-generator-cli generate -i ./oas/src/hub-rest-api/spec.yaml -g typescript-axios -o ./src/hub-api --config ./openapi-generator-config.json --inline-schema-options \'REFACTOR_ALLOF_INLINE_SCHEMAS=true\'","generate":"yarn generate:api && yarn generate:hub-api","generate:api:wrapper":"cross-env CLIENT_TYPE=api ts-node -P tsconfig.scripts.json scripts/generate-wrapper.ts","generate:hub-api:wrapper":"cross-env CLIENT_TYPE=hub-api ts-node -P tsconfig.scripts.json scripts/generate-wrapper.ts","generate:wrapper":"yarn generate:api:wrapper && yarn generate:hub-api:wrapper","generate:all":"yarn generate && yarn generate:wrapper"},"author":"Neynar","license":"MIT","dependencies":{"@openapitools/openapi-generator-cli":"^2.14.1","semver":"^7.6.3","viem":"^2.21.44"},"devDependencies":{"@types/node":"^22.7.9","cross-env":"^7.0.3","del-cli":"^6.0.0","ts-node":"^10.9.2","typescript":"^5.6.3"},"engines":{"node":">=19.9.0"},"keywords":["ethereum","optimism","farcaster","neynar","nodejs"]}');

/***/ })

};
;